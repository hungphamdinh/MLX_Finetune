{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`addOrEditVisitor`):\n```javascript\nimport React from 'react';\nimport Connect from '@stores';\nimport _ from 'lodash';\nimport BaseLayout from '../../../components/Layout/BaseLayout';\nimport TabView from '../../../components/tabView';\nimport TabDetailInfo from './tabDetailInfo';\nimport TabPass from './tabPass';\nimport { useRoute } from '@react-navigation/native';\n\nconst AddOrEditVisitor = ({ navigation }) => {\n  const route = useRoute();\n  const isAddNew = route.name === 'AddVisitor';\n\n  const baseLayoutProps = {\n    showBell: false,\n    title: isAddNew ? 'VS_NEW' : 'VS_EDIT',\n  };\n\n  const components = [\n    {\n      view: <TabDetailInfo navigation={navigation} />,\n      label: 'VISITOR_DETAIL_INFO',\n    },\n  ];\n\n  if (!isAddNew) {\n    components.push({\n      view: <TabPass navigation={navigation} />,\n      label: 'VISITOR_PASS',\n    });\n  }\n\n  return (\n    <BaseLayout {...baseLayoutProps}>\n      <TabView child={components} />\n    </BaseLayout>\n  );\n};\n\nexport default Connect(AddOrEditVisitor);\n\n```\n\nUnit Test:\n```javascript\n// BEGIN: 6f7d8a2fj3d1\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { Provider } from 'react-redux';\nimport AddOrEditVisitor from '../addOrEditVisitor/index';\nimport mockStore from '../../../../__mocks__/mockStore';\n\nconst detailVisitor = {\n  visitorInformations: [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'johndoe@example.com',\n    },\n  ],\n  numberOfVisitors: 2,\n  registerTime: '2022-01-01T00:00:00',\n  registerCheckOutTime: '2022-01-01T01:00:00',\n  description: 'Test Description',\n  reasonForVisit: { id: 1, name: 'Test Reason' },\n};\n\nconst store = mockStore({ visitor: { detailVisitor } });\nconst renderAddOrEditVisitor = () =>\n  render(\n    <Provider store={store}>\n      <AddOrEditVisitor />\n    </Provider>\n  );\n\ndescribe('AddOrEditVisitor', () => {\n  beforeEach(() => {\n    global.useMockRoute = {\n      params: {},\n      name: 'AddVisitor',\n    };\n  });\n\n  it('renders the add visitor', () => {\n    const { getByText } = renderAddOrEditVisitor();\n    expect(getByText('VS_NEW')).toBeDefined();\n  });\n\n  it('does not render the visitor pass tab when adding a new visitor', () => {\n    const { queryByText } = renderAddOrEditVisitor();\n    expect(queryByText('VISITOR_PASS')).toBeNull();\n  });\n\n  it('changes the title to \"VS_NEW\" when adding a new visitor', () => {\n    const { getByText } = renderAddOrEditVisitor();\n    expect(getByText('VS_NEW')).toBeDefined();\n  });\n\n  afterEach(() => {\n    global.useMockRoute = {};\n  });\n});\n\ndescribe('AddOrEditVisitor', () => {\n  beforeEach(() => {\n    global.useMockRoute = {\n      params: {\n        visitorId: '123',\n      },\n      name: 'EditVisitor',\n    };\n  });\n\n  it('renders the visitor pass tab when editing an existing visitor', () => {\n    const { getByText } = renderAddOrEditVisitor();\n    expect(getByText('VISITOR_PASS')).toBeDefined();\n  });\n\n  it('changes the title to \"VS_EDIT\" when editing an existing visitor', () => {\n    const { getByText } = renderAddOrEditVisitor();\n    expect(getByText('VS_EDIT')).toBeDefined();\n  });\n\n  it('navigates to the visitor pass tab when clicking on the \"Visitor Pass\" tab', () => {\n    const { getByText } = renderAddOrEditVisitor();\n    fireEvent.press(getByText('VISITOR_PASS'));\n    expect(getByText('VISITOR_PASS')).toBeDefined();\n  });\n\n  afterEach(() => {\n    global.useMockRoute = {};\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`nextButton`):\n```javascript\nimport React from 'react';\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native';\nimport { Text } from '@components/Commons';\nimport { Colors } from '@themes';\n\nconst NextButton = styled(TouchableOpacity)`\n  margin-bottom: 15px;\n  align-self: flex-end;\n  flex-direction: row;\n  margin-right: 10px;\n`;\n\nconst NextText = styled(Text)`\n  color: ${({ color }) => color};\n  margin-top: 2px;\n`;\n\nconst Icon = styled(Ionicons)`\n  margin-top: 3px;\n`\n\nconst NextTermButton = ({ disabled, onPressNextTerm, title, showIcon = true }) => (\n  <NextButton disabled={disabled} onPress={onPressNextTerm}>\n    <NextText showIcon preset=\"bold\" color={disabled ? Colors.textSemiGray : Colors.azure} text={title} />\n    {showIcon && (\n      <Icon\n        testID=\"chevron-forward-outline\"\n        color={disabled ? Colors.textSemiGray : Colors.azure}\n        name=\"chevron-forward-outline\"\n        size={14}\n      />\n    )}\n  </NextButton>\n);\n\nexport default NextTermButton;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { Colors } from '@themes';\nimport { fireEvent } from '@testing-library/react-native';\nimport NextTermButton from '../nextButton';\nimport { renderScreen } from '../../../../__mocks__/mockApp';\n\nconst onPressNextTerm = jest.fn();\n\nconst renderButton = (disabled) =>\n  renderScreen(<NextTermButton disabled={disabled} onPressNextTerm={onPressNextTerm} />)();\n\ndescribe('NextTermButton', () => {\n  it('renders the button correctly when enabled', () => {\n    const { getByTestId } = renderButton();\n\n    const buttonText = getByTestId('chevron-forward-outline');\n\n    expect(buttonText).toBeTruthy();\n    expect(buttonText).toHaveStyle({ color: Colors.azure });\n  });\n\n  it('renders the button correctly when disabled', () => {\n    const { getByTestId } = renderButton(true);\n    const buttonText = getByTestId('chevron-forward-outline');\n\n    expect(buttonText).toBeTruthy();\n    expect(buttonText).toHaveStyle({ color: Colors.textSemiGray });\n  });\n\n  it('calls onPressNextTerm when the button is pressed', () => {\n    const { getByTestId } = renderButton();\n    const buttonText = getByTestId('chevron-forward-outline');\n    fireEvent.press(buttonText);\n\n    expect(onPressNextTerm).toHaveBeenCalledTimes(1);\n  });\n});\n\n```"}
