{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`noticeSliderItem`):\n```javascript\nimport React from 'react';\nimport { View, TouchableOpacity } from 'react-native';\nimport IC_AVATAR_DF from '@resources/icons/avatar-default.png';\nimport LOGO from '@resources/icons/savillsLogo.png';\nimport { decode } from 'html-entities';\nimport { ImageView, Text } from '../../../Commons';\n\nconst NoticeSliderItem = ({ item, onPress }) => {\n  const image = item.fileUrl ? (item.fileUrl?.mimeType !== 'application/pdf' ? item.fileUrl : IC_AVATAR_DF) : LOGO;\n  const plainString = decode(item.content.replace(/(<[^>]+>)|(\\s\\s+)/g, ''));\n\n  return (\n    <TouchableOpacity testID=\"notice-overlay\" onPress={onPress}>\n      <View style={styles.container}>\n        <View>\n          <ImageView style={styles.image} source={image} resizeMode=\"cover\" />\n          <View>\n            <View style={styles.subjectBackground}>\n              <Text numberOfLines={1} style={styles.subject}>\n                {item.subject}\n              </Text>\n            </View>\n          </View>\n        </View>\n        <View style={styles.contentContainer}>\n          <View style={styles.contentWrapper}>\n            <Text numberOfLines={2} style={styles.content}>\n              {plainString}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = {\n  container: {\n    backgroundColor: 'white',\n    borderRadius: 14,\n    marginBottom: 20,\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    width: 300,\n  },\n  image: {\n    width: '100%',\n    height: 80,\n    borderTopLeftRadius: 14,\n    borderTopRightRadius: 14,\n    overflow: 'hidden',\n  },\n  contentContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    margin: 8,\n    minHeight: 35,\n  },\n  subject: {\n    fontWeight: '600',\n    fontSize: 13,\n    color: 'white',\n  },\n  contentWrapper: {\n    flexDirection: 'column',\n    paddingLeft: 10,\n    flex: 1,\n  },\n  content: {\n    color: '#878787',\n  },\n  subjectBackground: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n    zIndex: 1,\n    paddingHorizontal: 18,\n    paddingVertical: 13,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    flex: 1,\n  },\n};\n\nexport default NoticeSliderItem;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport { renderScreen } from '../../../../../__mocks__/mockApp';\nimport NoticeSliderItem from '../../noticeSlider/noticeSliderItem';\n\nconst mockItem = {\n  fileUrl: 'exampleImageUrl',\n  content: '<p>Sample content</p>',\n  subject: 'Sample Subject',\n};\n\nconst mockOnPress = jest.fn();\n\ndescribe('NoticeSliderItem', () => {\n  const renderItem = () => renderScreen(<NoticeSliderItem item={mockItem} onPress={mockOnPress} />)({ });\n\n  it('should render correctly', () => {\n    const { getByText } = renderItem();\n    const itemSubject = getByText('Sample Subject');\n    const itemContent = getByText('Sample content');\n    expect(itemSubject).toBeTruthy();\n    expect(itemContent).toBeTruthy();\n  });\n\n  it('should call onPress when notice is pressed', () => {\n    const { getByTestId } = renderItem();\n    const noticeOverlay = getByTestId('notice-overlay');\n    fireEvent.press(noticeOverlay);\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`noticeSlider`):\n```javascript\nimport React from 'react';\nimport i18n from '@i18n';\nimport AppList from '@components/Lists/AppList';\nimport { View } from 'react-native';\nimport _ from 'lodash';\nimport NoticeSliderItem from './noticeSliderItem';\nimport NavigationServices from '../../../navigator/navigationServices';\nimport SliderHeader from '../sliderHeader';\nimport EmptySliderItem from '../emptySliderItem';\n\nconst NoticeSlider = ({ list }) => {\n  const { data, isRefresh, currentPage, totalPage } = list;\n\n  const onViewAllNotices = () => {\n    NavigationServices.navigate('Inbox');\n  };\n\n  const renderItem = (item) => (\n    <NoticeSliderItem\n      item={item}\n      onPress={() => {\n        openModalDetail(item.id);\n      }}\n    />\n  );\n\n\n  const listProps = {\n    data,\n    isRefresh,\n    isLoadMore: false,\n    currentPage,\n    totalPage,\n    horizontal: true,\n    directionalLockEnabled: true,\n    showsHorizontalScrollIndicator: false,\n    ListEmptyComponent: <EmptySliderItem title={'NOTICE_LIST_EMPTY_TITLE'} content={'NOTICE_LIST_EMPTY_CONTENT'} />,\n    ItemSeparatorComponent: () => <View style={{ width: 10 }} />,\n    ListHeaderComponent: () => <View style={{ width: 15 }} />,\n    ListFooterComponent: () => <View style={{ width: 15 }} />,\n    emptyMsg: i18n.t('NOTICES_EMPTY_MESSAGE'),\n    loadData: () => {},\n    keyExtractor: (item) => `${item.id}`,\n    renderItem: ({ item }) => renderItem(item),\n    contentContainerStyle: { marginTop: 10 },\n  };\n\n  const openModalDetail = (id) => {\n    NavigationServices.navigate('DetailInbox', { id });\n  };\n\n  return (\n    <SliderHeader title=\"NOTICES\" onViewAll={onViewAllNotices}>\n      <AppList testID=\"notice-list\" {...listProps} />\n    </SliderHeader>\n  );\n};\n\nexport default NoticeSlider;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport NoticeSlider from '../noticeSlider';\n\nconst mockList = {\n  data: [\n    {subject: 'subject 1', content: 'content 1'},\n    {subject: 'subject 2', content: 'content 2'},\n  ],\n  isRefresh: false,\n  isLoadMore: false,\n  currentPage: 1,\n  totalPage: 2,\n};\n\nconst mockOnViewAllNotices = jest.fn();\n\ndescribe('NoticeSlider', () => {\n  const renderNoticeSlider = () => renderScreen(<NoticeSlider list={mockList} onViewAllNotices={mockOnViewAllNotices} />)({});\n\n  it('should render correctly when having data', () => {\n    const { getByText, getByTestId} = renderNoticeSlider();\n    const wraper = getByTestId('notice-list');\n    const title = getByText('NOTICES');\n    expect(wraper).toBeTruthy();\n    expect(title).toBeTruthy();\n  });\n\n  it('should render the list of items when data is available', () => {\n    const { getByTestId } = renderNoticeSlider();\n    const appList = getByTestId('notice-list');\n    expect(appList).toBeTruthy();\n  });\n\n});\n```"}
