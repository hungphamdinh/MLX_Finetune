{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`emptySliderItem`):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { ImageView, Text } from '@components/Commons';\nimport { Colors, Metric } from '@themes';\nimport { icons } from '@resources/icons';\n\nconst Wrapper = styled.View`\n  align-items: center;\n  margin-bottom: 20px;\n  width: ${Metric.ScreenWidth};\n`;\n\nconst Title = styled(Text)`\n  font-size: 18px;\n  color: ${Colors.azure};\n  margin-top: 10px;\n`;\n\nconst Content = styled(Text)`\n  color: ${Colors.azure};\n  margin-top: 10px;\n`;\n\nconst Icon = styled(ImageView)`\n  width: 25px;\n  height: 25px;\n`;\n\nconst EmptySliderItem = ({ title, content, icon }) => (\n  <Wrapper>\n    <Icon testID=\"icon-bell\" resizeMode=\"contain\" source={icon || icons.bell} />\n    {title && <Title preset=\"bold\" text={title} />}\n    {content && <Content text={content} />}\n  </Wrapper>\n);\n\nexport default EmptySliderItem;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport EmptySliderItem from '../emptySliderItem';\n\ndescribe('EmptySliderItem', () => {\n  it('renders correctly', () => {\n    const { getByText, getByTestId } = renderScreen(<EmptySliderItem title={\"NOTICE_LIST_EMPTY_TITLE\"} content={\"NOTICE_LIST_EMPTY_CONTENT\"} />)();\n\n    expect(getByTestId('icon-bell')).toBeTruthy();\n    expect(getByText('NOTICE_LIST_EMPTY_TITLE')).toBeTruthy();\n    expect(getByText('NOTICE_LIST_EMPTY_CONTENT')).toBeTruthy();\n  });\n});\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`momoWebView`):\n```javascript\nimport React from 'react';\nimport { Platform, DeviceEventEmitter } from 'react-native';\nimport { useRoute } from '@react-navigation/native';\nimport { WebView } from 'react-native-webview';\nimport BaseLayout from '@components/Layout/BaseLayout';\nimport navigationServices from '../../../../navigator/navigationServices';\n\nconst MoMoWebView = () => {\n  const {\n    params: { url },\n  } = useRoute();\n\n  const onNavigationStateChange = (newNavState) => {\n    const { url: newUrl } = newNavState;\n    if (newUrl.includes('propertycube.asia')) {\n      navigationServices.popTo('FeePaymentConfirm');\n      DeviceEventEmitter.emit('paymentCallBack');\n    }\n  };\n\n  const baseLayoutProps = {\n    title: 'MOMO_PAYMENT',\n    showBell: false,\n  };\n\n  return (\n    <BaseLayout {...baseLayoutProps}>\n      <WebView\n        testID=\"webview\"\n        originWhitelist={['*']}\n        source={{ uri: url }}\n        scalesPageToFit={Platform.OS === 'android'}\n        automaticallyAdjustContentInsets={false}\n        showsVerticalScrollIndicator={false}\n        onNavigationStateChange={onNavigationStateChange}\n      />\n    </BaseLayout>\n  );\n};\n\nexport default MoMoWebView;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport { DeviceEventEmitter } from 'react-native';\nimport MoMoWebView from '../../momo/momoWebView';\nimport { renderScreen } from '../../../../../__mocks__/mockApp';\nimport navigationServices from '../../../../navigator/navigationServices';\n\ndescribe('MoMoWebView', () => {\n  const render = () =>\n    renderScreen(<MoMoWebView />)({\n      params,\n    });\n\n  const params = {\n    callBack: jest.fn(),\n    url: 'https://example.com',\n  };\n  beforeEach(() => {\n    global.useMockRoute = {\n      params,\n      name: 'MoMoWebView',\n    };\n    emitSpy = jest.spyOn(DeviceEventEmitter, 'emit').mockImplementation(() => {});\n  });\n\n  it('renders the WebView', () => {\n    const { getByTestId } = render();\n\n    expect(getByTestId('webview')).toBeTruthy();\n  });\n\n  it('calls callback on state change', () => {\n    const { getByTestId } = render();\n    const webView = getByTestId('webview');\n\n    fireEvent(webView, 'navigationStateChange', {\n      url: 'https://propertycube.asia',\n    });\n\n    expect(emitSpy).toHaveBeenCalledWith('paymentCallBack');\n  });\n\n  it('pops screen on callback', () => {\n    const { getByTestId } = render();\n    const webView = getByTestId('webview');\n\n    fireEvent(webView, 'navigationStateChange', {\n      url: 'https://propertycube.asia',\n    });\n\n    expect(navigationServices.popTo).toHaveBeenCalledWith('FeePaymentConfirm');\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`postRejected`):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Text, ImageView } from '@components/Commons';\nimport { images } from '@resources/image';\n\nconst PostRejected = ({ detailPost }) => (\n  <Wrapper>\n    <Icon testID=\"postRejectedIcon\" source={images.postRejected} />\n    <Title preset=\"bold\" text=\"POST_REJECTED_TITLE\" />\n    <Content text={detailPost?.reason || 'POST_REJECTED_CONTENT'} />\n  </Wrapper>\n);\n\nconst Wrapper = styled.View`\n  flex: 1;\n  align-items: center;\n  padding-top: 50px;\n  background-color: #fff;\n`;\n\nconst Icon = styled(ImageView)`\n  width: 48px;\n  height: 48px;\n  margin-bottom: 15px;\n`;\n\nconst Title = styled(Text)`\n  margin-bottom: 15px;\n  font-size: 18px;\n`;\n\nconst Content = styled(Text)`\n  padding-horizontal: 15px;\n`;\n\nexport default PostRejected;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp'; // Import your custom renderScreen function\nimport PostRejected from '../detailPost/PostRejected'; // Adjust the import path as necessary\n\ndescribe('PostRejected', () => {\n  it('renders correctly', () => {\n    const { getByText, getByTestId } = renderScreen(<PostRejected />)();\n    expect(getByText('POST_REJECTED_TITLE')).toBeTruthy();\n    expect(getByText('POST_REJECTED_CONTENT')).toBeTruthy();\n\n    const icon = getByTestId('postRejectedIcon');\n    expect(icon).toBeTruthy();\n  });\n});\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`momoPaymentMethod`):\n```javascript\nimport React, { useState } from 'react';\nimport Connect from '@stores';\nimport { useRoute } from '@react-navigation/native';\nimport styled from 'styled-components/native';\nimport BaseLayout from '@components/Layout/BaseLayout';\nimport i18n from '@i18n';\nimport Row from '@components/Layout/Row';\nimport { formatMoney } from '@utils/currencyFormatter';\nimport { Text } from '@components/Commons';\nimport Momo from '@utils/momo';\nimport PaymentMethodItem from './ItemPaymentMethod';\n\nconst Wrapper = styled.View`\n  padding: 16px;\n`;\n\nconst Title = styled(Text)`\n  padding-horizontal: 16px;\n  padding-vertical: 10px;\n  font-size: 16px;\n`;\n\nconst Footer = styled(Row)`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  padding: 16px;\n  justify-content: space-between;\n`;\n\nconst MoMoPaymentMethod = ({\n  app: {\n    settingApp: { allowOnlinePaymentMomo },\n  },\n}) => {\n  const [selectedMethod, setSelectedMethod] = useState(null);\n  const route = useRoute();\n  const routePrams = route.params;\n  const params = routePrams.params;\n  const callback = routePrams.callback;\n\n  const onPayment = () => {\n    callback(selectedMethod);\n  };\n\n  const paymentMethods = Momo.getPaymentMethods(allowOnlinePaymentMomo);\n\n  const bottomButtons = [\n    {\n      title: i18n.t('COMMON_CONFIRM'),\n      type: 'primary',\n      onPress: onPayment,\n      disabled: !selectedMethod,\n    },\n  ];\n  return (\n    <BaseLayout\n      bottomButtons={bottomButtons}\n      containerStyle={{ backgroundColor: 'white' }}\n      title=\"MOMO_PAYMENT_METHODS_TITLE\"\n    >\n      <Title preset=\"bold\" text=\"PAYMENT_ADD_PAYMENT_METHOD\" />\n      <Wrapper>\n        {paymentMethods.map((method) => (\n          <PaymentMethodItem\n            key={method.key}\n            method={method}\n            onSelect={setSelectedMethod}\n            isSelected={selectedMethod === method.key}\n          />\n        ))}\n      </Wrapper>\n\n      <Footer>\n        <Text preset=\"bold\" text=\"FEE_PAYMENT_DETAIL_TOTAL_AMOUNT\" />\n        <Text text={formatMoney(params.totalAmount)} />\n      </Footer>\n    </BaseLayout>\n  );\n};\n\nexport default Connect(MoMoPaymentMethod);\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport MoMoPaymentMethod from '../../momo/momoPaymentMethod';\nimport { renderScreen } from '../../../../../__mocks__/mockApp';\n\nconst store = {\n  app: {\n    settingApp: {\n      allowOnlinePaymentMomo: {\n        viaWallet: true,\n        viaAtm: true,\n        viaCredit: true,\n      },\n    },\n  },\n};\n\nconst mockActions = {\n  account: {\n    visibleAuthModal: jest.fn(),\n    verifyAuthModal: jest.fn(),\n    logout: jest.fn(),\n  },\n};\n\nconst mockCallback = jest.fn();\nconst mockRoute = {\n  name: 'MoMoPaymentMethod',\n  params: {\n    params: {\n      totalAmount: 1000,\n    },\n    callback: mockCallback,\n  },\n};\n\ndescribe('MoMoPaymentMethod', () => {\n  beforeEach(() => {\n    global.useMockRoute = mockRoute;\n  });\n\n  const render = () =>\n    renderScreen(<MoMoPaymentMethod actions={mockActions} />)({\n      store,\n    });\n\n  it('renders payment method options', () => {\n    const { getByText } = render();\n\n    expect(getByText('PAYMENT_METHOD_MOMO')).toBeTruthy();\n    expect(getByText('PAYMENT_METHOD_ATM')).toBeTruthy();\n    expect(getByText('PAYMENT_METHOD_VISA')).toBeTruthy();\n  });\n\n  it('calls callback with selected method on confirm', () => {\n    const { getByText } = render();\n\n    fireEvent.press(getByText('PAYMENT_METHOD_VISA'));\n    fireEvent.press(getByText('COMMON_CONFIRM'));\n\n    expect(mockRoute.params.callback).toHaveBeenCalledWith('payWithCC');\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`withMomoPayment`):\n```javascript\nimport React from 'react';\nimport { Linking, DeviceEventEmitter } from 'react-native';\nimport Connect from '@stores';\nimport { MOMO_REQUEST_TYPE } from '@configs/constants';\nimport Momo from '@utils/momo';\nimport BasePaymentHOC from './basePaymentHOC';\nimport navigationServices from '../../../../navigator/navigationServices';\n\nexport default function withMomoPayment(WrappedComponent) {\n  class HOCComponent extends BasePaymentHOC {\n    constructor(props) {\n      super(props);\n      this.walletCallBackSubscriber = null;\n      this.paymentCallBackSubscriber = null;\n    }\n    componentDidMount() {\n      this.walletCallBackSubscriber = Linking.addEventListener('url', this.handleWalletCallback);\n      this.paymentCallBackSubscriber = DeviceEventEmitter.addListener('paymentCallBack', this.handlePaymentCallback);\n    }\n\n    componentWillUnmount() {\n      this.walletCallBackSubscriber.remove();\n      this.paymentCallBackSubscriber.remove();\n    }\n\n    componentDidUpdate(prevProps) {\n      const {\n        fee: { orderDetail },\n        route: { params },\n      } = this.props;\n      const { onSuccess } = params;\n\n      if (!prevProps.fee.orderDetail && orderDetail) {\n        if (orderDetail.status.code === 'SUCCESS') {\n          navigationServices.popTo('DetailFee');\n          onSuccess();\n          return;\n        }\n        this.showPaymentError(orderDetail.status.description);\n      }\n    }\n\n    handlePaymentCallback = () => {\n      const { momoOrderRequest } = this.props.fee;\n      const { requestId, orderId } = momoOrderRequest;\n      if (requestId && orderId) {\n        this.props.actions.fee.checkMomoResult({ requestId, orderId });\n      }\n    };\n\n    handleWalletCallback = ({ url }) => {\n      if (url && url.indexOf('payment/callback') > -1) {\n        this.handlePaymentCallback();\n      }\n    };\n\n    handlePaymentViaWallet = (listID) => {\n      Momo.ensureExistedMomoApp(() => {\n        this.props.actions.fee.createOrderMomo(listID, MOMO_REQUEST_TYPE.CAPTURE_WALLET);\n      });\n    };\n\n    choosePaymentMethod(params, callback) {\n      navigationServices.navigate('MoMoPaymentMethod', {\n        params,\n        callback,\n      });\n    }\n\n    createOrder = (listID, totalAmount) => {\n      const momoPaymentMethods = Momo.getPaymentMethods(this.props.app.settingApp?.allowOnlinePaymentMomo);\n      if (momoPaymentMethods.length === 1) {\n        this.handleSelectedPaymentMethod(momoPaymentMethods[0].key, listID);\n        return;\n      }\n      this.choosePaymentMethod(\n        {\n          listID,\n          totalAmount,\n        },\n        (method) => {\n          this.handleSelectedPaymentMethod(method, listID);\n        }\n      );\n    };\n\n    handleSelectedPaymentMethod = (method, listID) => {\n      if (method === MOMO_REQUEST_TYPE.CAPTURE_WALLET) {\n        this.handlePaymentViaWallet(listID);\n        return;\n      }\n      this.props.actions.fee.createOrderMomo(listID, method, this.handlePaymentCallback);\n    };\n\n    render() {\n      return <WrappedComponent {...this.getWrappedParams()} />;\n    }\n  }\n  return Connect(HOCComponent);\n}\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport Momo from '@utils/momo';\nimport { Linking, DeviceEventEmitter } from 'react-native';\nimport withMomoPayment from '../../feePaymentConfirm/paymentHOC/withMoMoPayment'; // Adjust the import path\nimport { renderScreen } from '../../../../../__mocks__/mockApp';\n\njest.mock('@utils/momo', () => ({\n  ensureExistedMomoApp: jest.fn(),\n}));\njest.mock('../../../../navigator/navigationServices', () => ({\n  navigate: jest.fn(),\n}));\n\nconst WrappedComponent = () => <></>;\nconst MockComponent = withMomoPayment(WrappedComponent);\n\ndescribe('withMomoPayment HOC', () => {\n  const mockCreateOrderMomo = jest.fn();\n  const mockCheckMomoResult = jest.fn();\n\n  const render = () =>\n    renderScreen(\n      <MockComponent\n        navigation={{ getParam: jest.fn(), goBack: jest.fn() }}\n        actions={{\n          fee: {\n            createOrderMomo: mockCreateOrderMomo,\n            checkMomoResult: mockCheckMomoResult,\n          },\n        }}\n        fee={{ orderDetail: null }}\n      />\n    )({});\n\n  beforeEach(() => {\n    jest.spyOn(Linking, 'addEventListener').mockImplementation(() => ({\n      remove: jest.fn(),\n    }));\n    jest.spyOn(DeviceEventEmitter, 'addListener').mockImplementation(() => ({\n      remove: jest.fn(),\n    }));\n    Momo.ensureExistedMomoApp.mockImplementation((callback) => callback());\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should add and remove event listeners on mount and unmount', () => {\n    const { unmount } = render();\n\n    expect(Linking.addEventListener).toHaveBeenCalledWith('url', expect.any(Function));\n    expect(DeviceEventEmitter.addListener).toHaveBeenCalledWith('paymentCallBack', expect.any(Function));\n\n    unmount();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`hiddenItem`):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Colors } from '@themes';\nimport { deviceTypes } from '@configs/constants';\nimport SwipeableButton from '@components/Commons/SwipeableButton';\n\nconst RowWrapper = styled.View`\n  flex-direction: row;\n  justify-content: center;\n  align-self: flex-end;\n  margin-top: 15px;\n  margin-right: 15px;\n`;\nconst Space = styled.View`\n  margin-horizontal: 5px;\n`;\n\nconst HiddenItem = ({ isCurrentDevice, item, changeDeviceType, removeDevice }) => {\n  const deviceType =\n    item.registerType === deviceTypes.primary ? 'BTN_CHANGE_TO_SECONDARY_DEVCE' : 'BTN_CHANGE_TO_PRIMARY_DEVCE';\n\n  return (\n    <RowWrapper>\n      <SwipeableButton color={Colors.azure} title={deviceType} icon=\"sync-outline\" onPress={() => changeDeviceType(item)} />\n      <Space />\n      <SwipeableButton disabled={isCurrentDevice} color={Colors.bgRed} title=\"BTN_REMOVE_DEVICE\" icon=\"trash-outline\" onPress={() => removeDevice(item)} />\n\n    </RowWrapper>\n  );\n};\n\nexport default HiddenItem;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport HiddenItem from '../../deviceList/hiddenItem';\nimport { deviceTypes } from '../../../../configs/constants';\n\ndescribe('HiddenItem', () => {\n  const changeDeviceType = jest.fn();\n  const removeDevice = jest.fn();\n\n  const renderItem = (item) =>\n    renderScreen(<HiddenItem item={item} changeDeviceType={changeDeviceType} removeDevice={removeDevice} />)();\n\n  it('renders correctly with primary device type', () => {\n    const item = {\n      registerType: deviceTypes.primary,\n    };\n    const { getByText } = renderItem(item);\n\n    fireEvent.press(getByText('BTN_CHANGE_TO_SECONDARY_DEVCE'));\n    expect(changeDeviceType).toHaveBeenCalledWith(item);\n\n    fireEvent.press(getByText('BTN_REMOVE_DEVICE'));\n    expect(removeDevice).toHaveBeenCalledWith(item);\n  });\n\n  it('renders correctly with secondary device type', () => {\n    const secondaryItem = {\n      registerType: deviceTypes.secondary,\n    };\n\n    const { getByText } = renderItem(secondaryItem);\n\n    expect(getByText('BTN_CHANGE_TO_PRIMARY_DEVCE')).toBeTruthy();\n    expect(getByText('BTN_REMOVE_DEVICE')).toBeTruthy();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`itemVisitor`):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport Icon from 'react-native-vector-icons/Ionicons';\nimport i18n from '@i18n';\nimport moment from 'moment';\nimport { Text } from '../../Commons';\nimport { Colors } from '../../../themes';\nimport { icons } from '../../../resources/icons';\nimport Configs from '../../../utils/configs';\nimport { HorizontalLine, VerticalLabelValue, Wrapper } from '../ItemCommon';\n\nconst ID = styled(Text)`\n  font-size: 15px;\n  ${'' /* flex: 1; */}\n  margin-bottom: 12px;\n`;\n\nconst RowWrapper = styled.View`\n  flex-direction: row;\n  align-items: center;\n  margin-top: 5px;\n`;\n\nconst Symbol = styled.Image`\n  width: 15px;\n  height: 22px;\n  tint-color: ${Colors.azure};\n`;\n\nconst LeftValue = styled(Text)`\n  font-size: 12px;\n  margin-left: 12px;\n  flex: 1;\n`;\n\nconst RightValue = styled(Text)`\n  font-size: 12px;\n  margin-left: 12px;\n`;\n\nconst NextWrapper = styled.View`\n  width: 18px;\n  height: 18px;\n  background-color: #648fca;\n  border-radius: 5px;\n  align-items: center;\n  justify-content: center;\n  margin-left: 5px;\n`;\n\nconst ItemVisitor = ({ item, onPress }) => {\n  const date = moment(item.createdAt).format(Configs.DayFormat);\n  const time = moment(item.createdAt).format('LT');\n  const format = 'HH:mm DD/MM/YYYY';\n  const checkInTime = item.registerTime ? moment(item.registerTime).format(format) : undefined;\n  const checkOutTime = item.registerCheckOutTime ? moment(item.registerCheckOutTime).format(format) : undefined;\n\n  return (\n    <Wrapper onPress={onPress} testID=\"item-visitor\">\n      <ID text={`#${item.code}`} preset=\"bold\" />\n      <RowWrapper>\n        <VerticalLabelValue label=\"COMMON_DATE\" value={date} />\n        <VerticalLabelValue label=\"COMMON_TIME\" value={time} />\n      </RowWrapper>\n\n      <HorizontalLine />\n      {item.numberOfVisitors > 0 && (\n        <RowWrapper style={{ marginTop: 0 }}>\n          <Symbol resizeMode=\"contain\" source={icons.visitorAmounts} />\n          <LeftValue text={`${item.numberOfVisitors} ${i18n.t('VS_VISITORS')}`} preset=\"medium\" />\n          <RightValue text={`${item.reasonForVisit.name}`} preset=\"medium\" />\n        </RowWrapper>\n      )}\n      {(checkInTime || checkOutTime) && (\n        <RowWrapper>\n          {checkInTime && (\n            <>\n              <Symbol source={icons.nounTime} resizeMode=\"contain\" />\n              <LeftValue text={`${i18n.t('VS_IN')}: ${checkInTime}`} preset=\"medium\" />\n            </>\n          )}\n          {checkOutTime && (\n            <>\n              <Symbol source={icons.nounTime} resizeMode=\"contain\" />\n              <RightValue text={`${i18n.t('VS_OUT')}: ${checkOutTime}`} preset=\"medium\" />\n            </>\n          )}\n        </RowWrapper>\n      )}\n\n      <RowWrapper>\n        <Symbol source={icons.location} />\n        <LeftValue text={`${item.fullUnitId}`} preset=\"medium\" />\n        <NextWrapper>\n          <Icon size={12} color=\"white\" name=\"chevron-forward\" />\n        </NextWrapper>\n      </RowWrapper>\n    </Wrapper>\n  );\n};\n\nexport default ItemVisitor;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ItemVisitor from '../ItemVisitor';\n\ndescribe('ItemVisitor', () => {\n  const item = {\n    code: '1234',\n    createdAt: '2022-02-01T10:00:00.000Z',\n    numberOfVisitors: 2,\n    reasonForVisit: { name: 'Delivery' },\n    fullUnitId: 'Unit 123',\n    registerTime: '2022-02-01T10:30:00.000Z',\n    registerCheckOutTime: '2022-02-01T11:00:00.000Z',\n  };\n\n  it('renders the item code', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('#1234')).toBeDefined();\n  });\n\n  it('renders the date and time', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('01/02/2022')).toBeDefined();\n    expect(getByText('5:00 PM')).toBeDefined();\n  });\n\n  it('renders the number of visitors and reason for visit', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('2 VS_VISITORS')).toBeDefined();\n    expect(getByText('Delivery')).toBeDefined();\n  });\n\n  it('renders the check-in and check-out times', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('VS_IN: 17:30 01/02/2022')).toBeDefined();\n    expect(getByText('VS_OUT: 18:00 01/02/2022')).toBeDefined();\n  });\n\n  it('renders the unit ID', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('Unit 123')).toBeDefined();\n  });\n\n  it('calls the onPress function when pressed', () => {\n    const onPress = jest.fn();\n    const { getByTestId } = render(<ItemVisitor item={item} onPress={onPress} />);\n    fireEvent.press(getByTestId('item-visitor'));\n    expect(onPress).toHaveBeenCalled();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`ItemNotice`):\n```javascript\nimport React, { useState } from 'react';\nimport styled from 'styled-components/native';\nimport IC_AVATAR_DF from '@resources/icons/avatar-default.png';\nimport LOGO from '@resources/icons/savillsLogo.png';\nimport { decode } from 'html-entities';\nimport i18n from '@i18n';\nimport { ImageView, Text } from '../../Commons';\nimport { Wrapper } from '../ItemCommon';\n\nconst RowWrapper = styled.View`\n  flex-direction: row;\n`;\n\nconst ButtonWrapper = styled(Wrapper)`\n  padding: 0px;\n  padding-top: 16px;\n  padding-bottom: ${({ lines }) => (lines > 1 ? lines * 5 : 0)}px;\n  margin-top: ${({ index }) => (index === 0 ? 5 : 0)}px;\n`;\n\nconst ItemWrapper = styled.View`\n  width: 90%;\n`;\nconst ID = styled(Text)`\n  font-size: 15px;\n  margin-bottom: 5px;\n  margin-top: -3px;\n`;\n\nconst Logo = styled(ImageView)`\n  width: 25px;\n  height: 25px;\n  margin-horizontal: 10px;\n  border-radius: 5px;\n`;\n\nconst Content = styled(Text)`\n  line-height: 18;\n  margin-right: 10px;\n`;\nconst ItemNotice = ({ item, onPress, index }) => {\n  const [textLines, setTextLines] = useState(3);\n  const _onPress = () => {\n    onPress(item.id);\n  };\n  const image = item.fileUrl ? (item.fileUrl?.mimeType !== 'application/pdf' ? item.fileUrl : IC_AVATAR_DF) : LOGO;\n  const plainString = decode(item.content.replace(/(<[^>]+>)|(\\s\\s+)/g, ''));\n\n  const onTextLayout = ({ nativeEvent: { lines } }) => {\n    if (lines.length < 3) {\n      setTextLines(lines.length);\n    }\n  };\n  return (\n    <ButtonWrapper\n      testID=\"item-notice\"\n      index={index}\n      activeOpacity={1}\n      lines={textLines}\n      onPress={_onPress}\n      gestureHandler\n    >\n      <RowWrapper>\n        <Logo testID=\"image-view\" resizeMode=\"cover\" source={image} />\n        <ItemWrapper>\n          <ID text={item.subject ? item.subject : i18n.t('IB_NO_SUBJECT')} preset=\"bold\" />\n          <Content onTextLayout={onTextLayout} numberOfLines={3} text={plainString.length > 0 ? plainString : ''} />\n        </ItemWrapper>\n      </RowWrapper>\n    </ButtonWrapper>\n  );\n};\n\nexport default ItemNotice;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport { images } from '@resources/image';\nimport ItemNotice from '../ItemNotice';\n\nconst EmptyImage = images.emptyImage;\n\ndescribe('ItemNotice', () => {\n  const sampleItem = {\n    id: '1',\n    fileUrl: null,\n    content: 'Sample content',\n    subject: 'Sample Subject',\n  };\n  const onPressMock = jest.fn();\n  const render = (item = sampleItem) => renderScreen(<ItemNotice item={item} onPress={onPressMock} index={0} />)({});\n\n  it('renders correctly', () => {\n    const { getByText } = render();\n\n    expect(getByText('Sample Subject')).toBeTruthy();\n    expect(getByText('Sample content')).toBeTruthy();\n  });\n\n  it('handles onPress', () => {\n    const { getByTestId } = render();\n\n    fireEvent.press(getByTestId('item-notice'));\n    expect(onPressMock).toHaveBeenCalledWith(sampleItem.id);\n  });\n\n  it('handles short content correctly', () => {\n    const shortContentItem = { ...sampleItem, content: 'Short content' };\n    const { getByText } = render(shortContentItem);\n    expect(getByText('Short content')).toBeTruthy();\n  });\n\n  it('handles long content correctly', () => {\n    const longContent = 'L'.repeat(50);\n    const longContentItem = { ...sampleItem, content: longContent };\n    const { getByText } = render(longContentItem);\n    expect(getByText(longContent.substring(0, 50))).toBeTruthy();\n  });\n\n  it('displays the correct image', () => {\n    const { getByTestId } = render();\n    const imageComponent = getByTestId('image-view');\n    expect(imageComponent.props.source).toBe(sampleItem.fileUrl || EmptyImage);\n  });\n\n  it('shows default message when subject is missing', () => {\n    const noSubjectItem = { ...sampleItem, subject: '' };\n    const { getByText } = render(noSubjectItem);\n    expect(getByText('IB_NO_SUBJECT')).toBeTruthy();\n  });\n\n  it('handles HTML content correctly', () => {\n    const htmlContentItem = { ...sampleItem, content: '<b>Bold Content</b><script>evilScript()</script>' };\n    const { getByText } = render(htmlContentItem);\n    expect(getByText('Bold ContentevilScript()')).toBeTruthy();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`scrollDownButton`):\n```javascript\nimport React from 'react';\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native';\nimport { Colors } from '@themes';\n\nconst CircleButton = styled(TouchableOpacity)`\n  align-self: center;\n  background-color: white;\n  box-shadow: 0px 3px 6px #00000029;\n  border-radius: 30px;\n  padding-vertical: 5px;\n  padding-horizontal: 8px;\n  position: absolute;\n  bottom: 30px;\n`;\n\nconst Icon = styled(Ionicons)`\n  margin-top: 3px;\n`;\n\nconst ScrollDownButton = ({ onPress }) => (\n  <CircleButton onPress={onPress}>\n    <Icon\n      testID=\"chevron-down-outline\"\n      color={Colors.azure}\n      name=\"chevron-down-outline\"\n      size={30}\n    />\n  </CircleButton>\n);\n\nexport default ScrollDownButton;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ScrollDownButton from '../scrollDownButton';\n\ndescribe('ScrollDownButton', () => {\n  it('should call onPress when the button is pressed', () => {\n    const mockOnPress = jest.fn();\n\n    const { getByTestId } = render(<ScrollDownButton onPress={mockOnPress} />);\n\n    const button = getByTestId('chevron-down-outline');\n\n    fireEvent.press(button);\n\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\n  });\n});\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`listDeviceSection`):\n```javascript\nimport React, { Fragment } from 'react';\nimport AppSwipeList from '@components/Lists/AppSwipeList';\nimport styled from 'styled-components/native';\nimport { View } from 'react-native';\nimport i18n from '@i18n';\nimport { Text } from '@components/Commons';\n\nconst Title = styled(Text)`\n  text-transform: capitalize;\n  margin-horizontal: 16px;\n  font-weight: bold;\n  margin-vertical: 8px;\n`;\n\nconst ListDeviceSection = ({ title, currentDeviceAmount, maxDeviceAmount, ...deviceProps }) => (\n  <Fragment>\n    <Title>\n      {i18n.t(title)} ({currentDeviceAmount}/{maxDeviceAmount}):\n    </Title>\n    <View>\n      <AppSwipeList {...deviceProps} />\n    </View>\n  </Fragment>\n);\n\nexport default ListDeviceSection;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport ListDeviceSection from '../../deviceList/listDeviceSection';\n\ndescribe('ListDeviceSection', () => {\n  const deviceProps = {\n    devices: [\n      {\n        id: 1,\n        name: 'Device 1',\n      },\n      {\n        id: 2,\n        name: 'Device 2',\n      },\n    ],\n  };\n\n  const renderItem = (currentDeviceAmount, maxDeviceAmount) =>\n    renderScreen(\n      <ListDeviceSection\n        title=\"Device List\"\n        currentDeviceAmount={currentDeviceAmount}\n        maxDeviceAmount={maxDeviceAmount}\n        refreshing={false}\n        {...deviceProps}\n      />\n    )();\n\n  it('renders the component with the correct title and device count', () => {\n    const { getByText } = renderItem(2, 5);\n    expect(getByText('Device List (2/5):')).toBeTruthy();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`librarySlider`):\n```javascript\nimport React from 'react';\nimport AppList from '@components/Lists/AppList';\nimport styled from 'styled-components/native';\nimport { icons } from '@resources/icons';\nimport SliderHeader from '../sliderHeader';\nimport ItemDocument from '../../libraries/itemDocument';\nimport navigationServices from '../../../navigator/navigationServices';\nimport EmptySliderItem from '../emptySliderItem';\n\nconst Wrapper = styled.View`\n  padding-bottom: 10px;\n`;\n\nconst LibrarySlider = ({ list, downloadAndViewDocument }) => {\n  const { data, isRefresh, currentPage, totalPage } = list;\n\n  const onViewAll = () => {\n    navigationServices.navigate('Library');\n  };\n\n  const onOpenDocument = (item) => {\n    const file = item.file || {};\n    downloadAndViewDocument(file.fileUrl, file.fileName);\n  };\n\n  const listProps = {\n    data,\n    isRefresh,\n    isLoadMore: false,\n    currentPage,\n    totalPage,\n    horizontal: true,\n    directionalLockEnabled: true,\n    style: {paddingHorizontal: 10},\n    showsHorizontalScrollIndicator: false,\n    ListEmptyComponent: <EmptySliderItem icon={icons.library} title=\"LIBRARY_EMPTY_LIST\" />,\n    loadData: () => {},\n    keyExtractor: (item) => `${item.id}`,\n    renderItem: ({ item }) => (\n      <Wrapper>\n        <ItemDocument isHomePage item={item} onPress={() => onOpenDocument(item)} />\n      </Wrapper>\n    ),\n  };\n\n  return (\n    <SliderHeader onViewAll={onViewAll} title=\"LB_TITLEHEADER\">\n      <AppList testID=\"library-list\" {...listProps} />\n    </SliderHeader>\n  );\n};\n\nexport default LibrarySlider;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport LibrarySlider from '../librarySlider';\n\nconst mockList = {\n  data: [\n    { documentName: 'subject 1', content: 'libraryName 1' },\n    { documentName: 'subject 2', content: 'libraryName 2' },\n  ],\n  isRefresh: false,\n  isLoadMore: false,\n  currentPage: 1,\n  totalPage: 2,\n};\n\nconst mockOnViewAllNotices = jest.fn();\n\ndescribe('LibrarySlider', () => {\n  const renderNoticeSlider = () =>\n    renderScreen(<LibrarySlider list={mockList} onViewAllNotices={mockOnViewAllNotices} />)({\n      store: {\n        library: {\n          documents: mockList,\n        },\n      },\n    });\n\n  it('should render correctly when having data', () => {\n    const { getByText, getByTestId } = renderNoticeSlider();\n    const wraper = getByTestId('library-list');\n    const title = getByText('LB_TITLEHEADER');\n    expect(wraper).toBeTruthy();\n    expect(title).toBeTruthy();\n  });\n\n  it('should render the list of items when data is available', () => {\n    const { getByTestId } = renderNoticeSlider();\n    const appList = getByTestId('library-list');\n    expect(appList).toBeTruthy();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`visitorScreen`):\n```javascript\nimport React, { useEffect, useState } from 'react';\nimport Connect from '@stores';\nimport i18n from '@i18n';\nimport { DeviceEventEmitter } from 'react-native';\nimport AppList from '@components/Lists/AppList';\nimport BaseLayout from '../../components/Layout/BaseLayout';\nimport FilterView from '../../components/filterView';\nimport ItemVisitor from '../../components/ItemApp/ItemVisitor';\nimport { Modules } from '../../configs/constants';\nimport NavigationServices from '../../navigator/navigationServices';\nimport { icons } from '../../resources/icons';\n\nconst Visitor = ({ actions, visitor }) => {\n  const list = visitor.list;\n\n  const [visibleFilter, setVisibleFilter] = useState(false);\n\n  const [textSearch, setTextSearch] = useState('');\n\n  useEffect(() => {\n    actions.visitor.getListType();\n    getList(1);\n    const subscriber = DeviceEventEmitter.addListener('UpdateListVisitor', () => getList(1));\n    return () => {\n      subscriber.remove();\n    };\n  }, []);\n\n  const { data, isRefresh, isLoadMore, currentPage, totalPage } = list;\n\n  const getList = (page, keyword = textSearch) => {\n    actions.visitor.getListVisitor('', page, keyword);\n  };\n\n  const onBtAddPress = () => {\n    NavigationServices.navigate('AddVisitor');\n  };\n\n  const onTextSearchChange = (text) => {\n    setTextSearch(text);\n    getList(1, text);\n  };\n\n  const gotoDetail = (item) => {\n    NavigationServices.navigate('EditVisitor', {\n      id: item.visitorId,\n    });\n  };\n\n  const renderItem = (item) => <ItemVisitor item={item} onPress={() => gotoDetail(item, 1)} />;\n\n  const listProps = {\n    data,\n    isRefresh,\n    isLoadMore,\n    currentPage,\n    totalPage,\n    emptyMsg: i18n.t('VS_EMPTY_TAB_CHECKIN'),\n    iconName: icons.visitorEmpty,\n    loadData: getList,\n    keyExtractor: (item) => item.visitorId.toString(),\n    renderItem: ({ item }) => renderItem(item),\n  };\n\n  return (\n    <BaseLayout onBtAddPress={onBtAddPress} helpModuleId={Modules.VISITOR} title=\"VS_HEADER_MODULE\">\n      <FilterView\n        onSearch={onTextSearchChange}\n        visibleFilter={visibleFilter}\n        setVisibleFilter={setVisibleFilter}\n        searchPlaceHolder=\"VISITOR_PLACEHOLDER_SEARCH\"\n      />\n      <AppList {...listProps} />\n    </BaseLayout>\n  );\n};\n\nexport default Connect(Visitor);\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { fireEvent, act } from '@testing-library/react-native';\nimport Visitor from '../index';\nimport { renderScreen } from '../../../../__mocks__/mockApp';\nimport NavigationServices from '../../../navigator/navigationServices';\nimport { mockList } from '../../../../__mocks__/mockStore';\n\ndescribe('Visitor screen', () => {\n  const renderVisitor = () => renderScreen(<Visitor />)();\n  it('should render the screen title', () => {\n    const { getByText } = renderVisitor();\n    const title = getByText('VS_HEADER_MODULE');\n    expect(title).toBeDefined();\n  });\n\n  it('should navigate to AddVisitor screen when the add button is pressed', () => {\n    const navigateMock = jest.fn();\n    jest.spyOn(NavigationServices, 'navigate').mockImplementation(navigateMock);\n    const { getByTestId } = renderVisitor();\n    // debug();\n    const addButton = getByTestId('add-button');\n    fireEvent.press(addButton);\n    expect(navigateMock).toHaveBeenCalledWith('AddVisitor');\n  });\n\n  it('should navigate to EditVisitor screen when an item is pressed', () => {\n    const navigateMock = jest.fn();\n    jest.spyOn(NavigationServices, 'navigate').mockImplementation(navigateMock);\n    const mockItem = {\n      visitorId: 1,\n    };\n    const { getByTestId } = renderScreen(<Visitor />)({\n      store: {\n        visitor: {\n          list: mockList([mockItem]),\n        },\n      },\n    });\n    const itemComponent = getByTestId('item-visitor');\n    fireEvent.press(itemComponent);\n    expect(navigateMock).toHaveBeenCalledWith('EditVisitor', { id: mockItem.visitorId });\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`deviceReplaceModal`):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Text } from '@components/Commons';\nimport withAppModal from '../../../../components/appModalHOC';\nimport DeviceItem from '../deviceItem';\n\nconst Wrapper = styled.View`\n  align-items: center;\n`;\n\nconst Title = styled(Text)`\n  margin-bottom: 10px;\n`;\n\nconst DeviceReplaceModal = ({ list, onPressItem, onClosePress }) => {\n  const onPress = (item) => {\n    onClosePress();\n    onPressItem(item);\n  };\n\n  return (\n    <Wrapper>\n      <Title text=\"REGISTER_DEVICE_REPLACE_WARNING\" />\n      {list.map((item, index) => (\n        <DeviceItem key={item.deviceCode} onPressItem={() => onPress(item)} item={item} index={index} />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default withAppModal(DeviceReplaceModal);\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport DeviceReplaceModal from '../../deviceList/deviceReplaceModal';\n\ndescribe('DeviceReplaceModal', () => {\n  const mockList = [\n    {\n      deviceCode: 'device1',\n      deviceName: 'Device 1',\n    },\n    {\n      deviceCode: 'device2',\n      deviceName: 'Device 2',\n    },\n  ];\n\n  it('renders the component with the correct title and devices', () => {\n    const onPressItem = jest.fn();\n    const onClosePress = jest.fn();\n\n    const { getByText } = renderScreen(\n      <DeviceReplaceModal visible list={mockList} onPressItem={onPressItem} onClosePress={onClosePress} />\n    )();\n\n    expect(getByText('REGISTER_DEVICE_REPLACE_WARNING')).toBeTruthy();\n\n    mockList.forEach((item) => {\n      expect(getByText(item.deviceName)).toBeTruthy();\n    });\n\n    const firstDeviceItem = getByText('Device 1');\n    fireEvent.press(firstDeviceItem);\n\n    expect(onPressItem).toHaveBeenCalledWith(mockList[0]);\n    expect(onClosePress).toHaveBeenCalled();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`postSlider`):\n```javascript\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components/native';\nimport i18n from '@i18n';\nimport Connect from '@stores';\nimport AppList from '@components/Lists/AppList';\nimport { View } from 'react-native';\nimport { size } from 'lodash';\nimport ItemPost from '@components/socialCommunity/itemPost';\nimport { Text } from '../../Commons';\nimport NavigationServices from '../../../navigator/navigationServices';\nimport { Metric } from '../../../themes';\nimport PostMoreModal from '../../socialCommunity/postMoreModal';\nimport { useActionModalHook } from '../../actionModal';\nimport SliderHeader from '../sliderHeader';\n\nconst PostWapper = styled(ItemPost)`\n  width: ${Metric.ScreenWidth * 0.8};\n  margin-top: 15px;\n`;\n\nconst PostSlider = ({ actions, socialCommunity: { homePosts } }) => {\n  const moreActionModal = useActionModalHook();\n  const [selectedPost, setSelectedPost] = useState(null);\n  const { data, isRefresh, isLoadMore, currentPage, totalPage } = homePosts;\n\n  useEffect(() => {\n    getList(1);\n  }, []);\n\n  const getList = (page) => {\n    actions.socialCommunity.getListPost(page);\n  };\n\n  const gotoDetail = (item) => {\n    NavigationServices.navigate('DetailPost', {\n      id: item.id,\n    });\n  };\n\n  const onViewAllPost = () => {\n    NavigationServices.navigate('SocialCommunity');\n  };\n\n  const onMorePress = (item) => {\n    moreActionModal.showModal();\n    setSelectedPost(item);\n  };\n\n  const renderItem = (item) => {\n    const postMaxLines = size(item.fileUrls) > 0 ? 1 : 10;\n    return (\n      <PostWapper\n        item={item}\n        onPress={() => gotoDetail(item)}\n        onMorePress={onMorePress}\n        hideSeeMore\n        isHome\n        maxLines={postMaxLines}\n      />\n    );\n  };\n\n  const listProps = {\n    data,\n    isRefresh,\n    isLoadMore,\n    currentPage,\n    totalPage,\n    horizontal: true,\n    directionalLockEnabled: true,\n    showsHorizontalScrollIndicator: false,\n    ListEmptyComponent: (\n      <View>\n        <Text>{i18n.t('POST_EMPTY_LIST')}</Text>\n      </View>\n    ),\n    emptyMsg: i18n.t('POST_EMPTY_LIST'),\n    loadData: getList,\n    keyExtractor: (item) => `${item.id}`,\n    renderItem: ({ item }) => renderItem(item),\n  };\n\n  const moreActionModalProps = {\n    ...moreActionModal,\n    item: selectedPost,\n  };\n\n  return size(data) ? (\n    <SliderHeader title=\"SOCIAL_COMMUNITY_TITLE\" onViewAll={onViewAllPost}>\n      <AppList testID=\"post-list\" {...listProps} />\n      <PostMoreModal {...moreActionModalProps} />\n    </SliderHeader>\n  ) : null;\n};\n\nexport default Connect(PostSlider);\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport SliderHeader from '../sliderHeader';\n\ndescribe('SliderHeader', () => {\n  const mockOnViewAll = jest.fn();\n  const title = 'Test Title';\n\n  it('should render the title correctly', () => {\n    const { getByText } = render(\n      <SliderHeader title={title} onViewAll={mockOnViewAll}>\n        <></>\n      </SliderHeader>\n    );\n\n    expect(getByText(title)).toBeTruthy();\n  });\n\n  it('should render the \"VIEW_ALL\" button and handle press', () => {\n    const { getByTestId } = render(\n      <SliderHeader title={title} onViewAll={mockOnViewAll}>\n        <></>\n      </SliderHeader>\n    );\n\n    const viewAllButton = getByTestId('view-all-btn');\n    fireEvent.press(viewAllButton);\n\n    expect(mockOnViewAll).toHaveBeenCalled();\n  });\n\n  it('should render children correctly', () => {\n    const childText = 'Child Content';\n    const { getByText } = render(\n      <SliderHeader title={title} onViewAll={mockOnViewAll}>\n        <Text>{childText}</Text>\n      </SliderHeader>\n    );\n\n    expect(getByText(childText)).toBeTruthy();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`itemPaymentMethod`):\n```javascript\nimport React from 'react';\nimport { Text } from '@components/Commons';\nimport styled from 'styled-components/native';\n\nconst MethodRow = styled.TouchableOpacity`\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nconst Icon = styled.Image`\n  width: 30px;\n  height: 30px;\n  margin-right: 8px;\n`;\n\nconst MethodText = styled(Text)`\n  font-size: 16px;\n`;\n\nconst RadioOuterCircle = styled.View`\n  width: 18px;\n  height: 18px;\n  border-radius: 9px;\n  border-width: 1px;\n  border-color: #000;\n  margin-right: 10px;\n`;\n\nconst RadioInnerCircle = styled.View`\n  margin: 3px;\n  width: 10px;\n  height: 10px;\n  border-radius: 5px;\n  background-color: #000;\n`;\n\nconst RadioCircle = ({ isSelected }) => <RadioOuterCircle >{isSelected && <RadioInnerCircle testID=\"radio-inner\" />}</RadioOuterCircle>;\n\nconst PaymentMethodItem = ({ method, onSelect, isSelected }) => (\n  <MethodRow onPress={() => onSelect(method.key)}>\n    <RadioCircle isSelected={isSelected} />\n    <Icon source={method.icon} />\n    <MethodText text={method.text} />\n  </MethodRow>\n);\n\nexport default PaymentMethodItem;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { fireEvent, render } from '@testing-library/react-native';\nimport PaymentMethodItem from '../../momo/momoPaymentMethod/ItemPaymentMethod';\n\ndescribe('PaymentMethodItem', () => {\n  const mockMethod = {\n    key: 'mockKey',\n    icon: 'mockIcon',\n    text: 'Mock Payment Method',\n  };\n\n  const mockOnSelect = jest.fn();\n\n  it('renders the payment method text', () => {\n    const { getByText } = render(<PaymentMethodItem method={mockMethod} onSelect={mockOnSelect} />);\n\n    expect(getByText(mockMethod.text)).toBeTruthy();\n  });\n\n  it('calls onSelect when pressed', () => {\n    const { getByText } = render(<PaymentMethodItem method={mockMethod} onSelect={mockOnSelect} />);\n\n    fireEvent.press(getByText(mockMethod.text));\n\n    expect(mockOnSelect).toHaveBeenCalledWith(mockMethod.key);\n  });\n\n  it('renders the radio button unchecked by default', () => {\n    const { queryByTestId } = render(<PaymentMethodItem method={mockMethod} onSelect={mockOnSelect} />);\n\n    expect(queryByTestId('radio-inner')).toBeFalsy();\n  });\n\n  it('renders the radio button checked when selected', () => {\n    const { getByTestId } = render(<PaymentMethodItem method={mockMethod} onSelect={mockOnSelect} isSelected />);\n\n    expect(getByTestId('radio-inner')).toBeTruthy();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`itemSurvey`):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport moment from 'moment';\nimport { Text } from '../../Commons';\nimport { icons } from '../../../resources/icons';\nimport Configs from '../../../utils/configs';\nimport StatusView from '../../statusView';\nimport { HorizontalLine, ID, RowWrapper, VerticalLabelValue, Wrapper } from '../ItemCommon';\nimport { Colors } from '../../../themes';\n\nconst InfoWrapper = styled.View`\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 12px;\n`;\n\nconst UserIcon = styled.Image`\n  width: 15px;\n  height: 22px;\n  tint-color: ${Colors.azure};\n  margin-right: 12px;\n`;\n\nconst LeftValue = styled(Text)`\n  font-size: 12px;\n\n  flex: 1;\n`;\n\nconst RightValue = styled(Text)`\n  font-size: 12px;\n  margin-left: 12px;\n`;\n\nconst ItemSurvey = ({ item, action }) => {\n  const { name, isSubmitted, startDate, endDate, creationTime, creatorUserName } = item;\n  const status = {\n    name: !isSubmitted ? 'SV_TAB_SURVEY' : 'SV_TAB_SURVEYED',\n    colorCode: !isSubmitted ? '#58DECB' : '#FF9E9E',\n  };\n  const from = moment(startDate).format(Configs.DayTimeFormat);\n  const to = moment(endDate).format(Configs.DayTimeFormat);\n  const submittedDate = moment(creationTime).format(Configs.DayTimeFormat);\n  return (\n    <Wrapper onPress={action} testID=\"item-survey\">\n      <ID text={`#${item.surveyId}`} preset=\"bold\" />\n      <RowWrapper>\n        <VerticalLabelValue label=\"COMMON_START_DATE\" value={from} />\n        <VerticalLabelValue label=\"COMMON_END_DATE\" value={to} />\n      </RowWrapper>\n\n      <HorizontalLine />\n      <InfoWrapper>\n        <LeftValue text=\"SURVEY_SUBMITTED_DATE\" preset=\"medium\" />\n        <RightValue text={submittedDate} preset=\"medium\" />\n      </InfoWrapper>\n      <InfoWrapper>\n        <UserIcon source={icons.user} resizeMode=\"contain\" />\n        <LeftValue text={creatorUserName} preset=\"medium\" />\n        <RightValue text={name} preset=\"medium\" />\n      </InfoWrapper>\n\n      <StatusView status={status} />\n    </Wrapper>\n  );\n};\n\nexport default ItemSurvey;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ItemSurvey from '../itemSurvey/index';\nconst mockStore = {\n  getState: jest.fn(() => ({\n    // Define the state object you want to use for testing\n    someValue: 'test value',\n    anotherValue: 123,\n  })),\n  dispatch: jest.fn(),\n};\n\ndescribe('ItemSurvey', () => {\n  const item = {\n    surveyId: 1,\n    name: 'Survey 1',\n    isSubmitted: false,\n    startDate: '2022-01-01T00:00:00.000Z',\n    endDate: '2022-01-31T00:00:00.000Z',\n    creationTime: '2022-01-15T00:00:00.000Z',\n    creatorUserName: 'John Doe',\n  };\n\n  it('renders survey information correctly', () => {\n    const { getByText } = render(<ItemSurvey item={item} />);\n    expect(getByText(`#${item.surveyId}`)).toBeDefined();\n    expect(getByText('COMMON_START_DATE')).toBeDefined();\n    expect(getByText('COMMON_END_DATE')).toBeDefined();\n    expect(getByText('SURVEY_SUBMITTED_DATE')).toBeDefined();\n    expect(getByText(item.creatorUserName)).toBeDefined();\n    expect(getByText(item.name)).toBeDefined();\n  });\n\n  it('calls action when pressed', () => {\n    const mockAction = jest.fn();\n    const { getByTestId } = render(<ItemSurvey item={item} action={mockAction} />);\n    fireEvent.press(getByTestId('item-survey'));\n    expect(mockAction).toHaveBeenCalled();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`AddPost`):\n```javascript\nimport React, { useRef, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { KeyboardAvoidingView, Platform } from 'react-native';\nimport Connect from '@stores';\nimport _ from 'lodash';\nimport Icon from 'react-native-vector-icons/Ionicons';\nimport BaseLayout from '@components/Layout/BaseLayout';\nimport { Colors } from '@themes';\nimport ImageAttachment from '@components/socialCommunity/ImageAttachment';\nimport i18n from '@i18n';\nimport SelectImageOptionsModal from '@components/SelectImageOptionsModal';\nimport Avatar from '@components/socialCommunity/avatar';\nimport { Text } from '@components/Commons';\nimport toast from '@utils/toast';\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: white;\n`;\n\nconst PostContainer = styled.ScrollView`\n  flex: 1;\n  background-color: white;\n  padding: 10px;\n`;\n\nconst UserInfo = styled.View`\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nconst Username = styled(Text)`\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst PostInput = styled.TextInput`\n  font-size: 16px;\n  margin-bottom: 16px;\n  min-height: 100px;\n`;\n\nconst BottomBar = styled.View`\n  flex-direction: row;\n  justify-content: space-around;\n  background-color: #fff;\n  padding: 8px;\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n  box-shadow: 0px 3px 6px #00000029;\n  elevation: 3;\n`;\n\nconst BottomBarButton = styled.TouchableOpacity`\n  padding: 8px;\n`;\n\nconst BottomSafeArea = styled.SafeAreaView`\n  background-color: white;\n`;\n\nconst AddPost = ({ actions, userProfile: { user }, units: { unitActive } }) => {\n  const [content, setContent] = useState('');\n  const [images, setImages] = useState([]);\n  const pickerRef = useRef();\n\n  const btImagePress = () => {\n    pickerRef.current?.showLibraryPicker();\n  };\n\n  const onSelectedImage = (newImages) => {\n    setImages([...images, ...newImages]);\n  };\n\n  const btCameraPress = () => {\n    pickerRef.current?.openCamera();\n  };\n\n  const onDeleteImage = (index) => {\n    const newImages = _.cloneDeep(images);\n    newImages.splice(index, 1);\n    setImages(newImages);\n  };\n\n  const onSubmit = () => {\n    if (images.length > 10) {\n      toast.showError('POST_CREATE_IMAGE_LIMIT');\n      return;\n    }\n    actions.socialCommunity.createPost({\n      content,\n      images,\n      unitId: unitActive.unitId,\n      memberRole: unitActive.memberRole,\n    });\n  };\n\n  const baseLayoutProps = {\n    title: 'POST_CREATE_TITLE',\n    showBell: false,\n    rightBtn: {\n      text: 'SOCIAL_COMMUNITY_POST_CREATE_BUTTON',\n      disabled: _.isEmpty(content) && _.isEmpty(images),\n      onPress: onSubmit,\n      testID: 'btCreate',\n    },\n  };\n\n  return (\n    <BaseLayout {...baseLayoutProps}>\n      <Container>\n        <PostContainer>\n          <UserInfo>\n            <Avatar size={40} />\n            <Username text={user?.displayName} />\n          </UserInfo>\n          <PostInput\n            multiline\n            maxLength={4000}\n            scrollEnabled={false}\n            placeholder={i18n.t('POST_CREATE_PLACEHOLDER')}\n            value={content}\n            onChangeText={setContent}\n            placeholderTextColor=\"gray\"\n          />\n          <ImageAttachment images={images} onDeleteImage={onDeleteImage} />\n        </PostContainer>\n        <KeyboardAvoidingView\n          behavior={Platform.OS === 'ios' ? 'padding' : null}\n          keyboardVerticalOffset={Platform.select({ ios: 130, android: 0 })}\n        >\n          <BottomBar>\n            <BottomBarButton onPress={btImagePress}>\n              <Icon name=\"image-outline\" size={24} color={Colors.azure} />\n            </BottomBarButton>\n            <BottomBarButton onPress={btCameraPress}>\n              <Icon name=\"camera\" size={24} color={Colors.azure} />\n            </BottomBarButton>\n          </BottomBar>\n        </KeyboardAvoidingView>\n      </Container>\n      <BottomSafeArea />\n      <SelectImageOptionsModal ref={pickerRef} allowSelectFile onSelectedImage={onSelectedImage} />\n    </BaseLayout>\n  );\n};\n\nexport default Connect(AddPost);\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport AddPost from '../addPost';\n\njest.mock('@utils/toast', () => ({\n  showError: jest.fn(),\n}));\n\nconst mockUser = { displayName: 'John Doe' };\nconst mockUnitActive = { unitId: 1, memberRole: 'member' };\nconst mockActions = {\n  socialCommunity: {\n    createPost: jest.fn(),\n  },\n};\n\ndescribe('AddPost', () => {\n  const renderComponent = (props = {}) =>\n    renderScreen(<AddPost />)({\n      store: {\n        userProfile: {\n          user: mockUser,\n          ...props.userProfile,\n        },\n        units: { unitActive: mockUnitActive, ...props.units },\n      },\n      actions: mockActions,\n    });\n\n  it('renders the component correctly', () => {\n    const { getByPlaceholderText, getByText } = renderComponent();\n\n    expect(getByPlaceholderText('POST_CREATE_PLACEHOLDER')).toBeTruthy();\n    expect(getByText('John Doe')).toBeTruthy();\n  });\n\n  it('updates the post content when typing', () => {\n    const { getByPlaceholderText } = renderComponent();\n    const input = getByPlaceholderText('POST_CREATE_PLACEHOLDER');\n    fireEvent.changeText(input, 'Hello, world!');\n\n    expect(input.props.value).toBe('Hello, world!');\n  });\n\n  it('shows an error when more than 10 images are selected', () => {\n    const { getByText } = renderComponent();\n    const createButton = getByText('SOCIAL_COMMUNITY_POST_CREATE_BUTTON');\n    fireEvent.press(createButton);\n\n    expect(mockActions.socialCommunity.createPost).not.toHaveBeenCalled();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`deviceItem`):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport deviceIcon from '@resources/icons/phone.png';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { ImageView, Text } from '../../../../components/Commons';\n\nconst RowWrapper = styled.View`\n  flex-direction: row;\n  margin-top: 10px;\n`;\n\nconst Wrapper = styled(TouchableOpacity)`\n  background-color: white;\n  border-radius: 14px;\n  margin-bottom: 20px;\n  box-shadow: 0px 3px 6px #00000029;\n  elevation: 6;\n  padding-top: 16px;\n  padding-bottom: ${({ lines }) => (lines > 1 ? lines * 5 : 0)}px;\n  margin-top: ${({ index }) => (index === 0 ? 5 : 0)}px;\n  margin-horizontal: 15px;\n`;\n\nconst ItemWrapper = styled.View`\n  width: 90%;\n`;\n\nconst Device = styled(Text)`\n  font-size: 15px;\n  margin-top: 3px;\n`;\n\nconst CurrentDevice = styled(Text)`\n  text-align: right;\n  margin-right: 15px;\n  color: gray;\n`;\n\nconst DeviceIcon = styled(ImageView)`\n  width: 25px;\n  height: 25px;\n  margin-horizontal: 10px;\n  border-radius: 5px;\n`;\n\nconst DeviceItem = ({ item, index, isCurrentDevice, onPressItem }) => {\n  const textLines = 3;\n\n  return (\n    <Wrapper onPress={onPressItem} index={index} activeOpacity={onPressItem ? 0 : 1} lines={textLines}>\n      <RowWrapper>\n        <DeviceIcon resizeMode=\"cover\" source={deviceIcon} />\n        <ItemWrapper>\n          <Device text={item.deviceName} preset=\"bold\" />\n          <CurrentDevice text={isCurrentDevice ? 'CURRENT_DEVICE' : ''} />\n        </ItemWrapper>\n      </RowWrapper>\n    </Wrapper>\n  );\n};\n\nexport default DeviceItem;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport DeviceItem from '../../deviceList/deviceItem';\n\ndescribe('DeviceItem', () => {\n  const item = {\n    deviceName: 'Test Device',\n  };\n  const renderItem = (isCurrentDevice) =>\n    renderScreen(<DeviceItem item={item} index={0} isCurrentDevice={isCurrentDevice} />)();\n\n  it('renders correctly', () => {\n    const isCurrentDevice = false;\n    const { getByText, queryByText } = renderItem(isCurrentDevice);\n\n    expect(getByText('Test Device')).toBeTruthy();\n    expect(queryByText('CURRENT_DEVICE')).toBeNull();\n  });\n\n  it('renders as current device', () => {\n    const isCurrentDevice = true;\n    const { getByText } = renderItem(isCurrentDevice);\n\n    expect(getByText('Test Device')).toBeTruthy();\n    expect(getByText('CURRENT_DEVICE')).toBeTruthy();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`selfRegistration`):\n```javascript\nimport React, { Fragment } from 'react';\nimport Connect from '@stores';\nimport { DeviceEventEmitter } from 'react-native';\nimport BaseLayout from '@components/Layout/BaseLayout';\nimport { icons } from '@resources/icons';\nimport ItemSetting from '@components/settings/settingItem';\nimport AwareScrollView from '@components/Layout/AwareScrollView';\nimport navigationServices from '../../../../navigator/navigationServices';\nimport { REGISTRATION_TYPE } from '../../../../configs/constants';\n\nconst data = [\n  {\n    icon: icons.addResidents,\n    title: 'PROFILE_BTN_ADD_MORE_MEMBERS',\n    type: REGISTRATION_TYPE.MORE_MEMBER,\n  },\n  {\n    icon: icons.home,\n    title: 'PROFILE_BTN_ADD_MORE_UNITS',\n    type: REGISTRATION_TYPE.MORE_UNIT,\n  },\n  {\n    icon: icons.uac,\n    title: 'UNIT_AUTH_CODE',\n    screen: 'UnitAuthCode',\n  },\n];\n\nconst SelfRegistrationSettings = ({\n  actions,\n  selfRegistration: { curUnitAuthenticationCode },\n  userProfile: { user },\n}) => {\n  const onItemPress = (item) => {\n    actions.selfRegistration.setRegistrationType(item?.type);\n    if (item.title === 'PROFILE_BTN_ADD_MORE_MEMBERS') {\n      DeviceEventEmitter.addListener('CheckUnitAuthCodeSuccess', () => {\n        navigationServices.navigate('ListRegisterMember');\n      });\n      actions.selfRegistration.verifyEmailCodeForMembers({\n        code: curUnitAuthenticationCode,\n        email: user.emailAddress,\n      });\n      return;\n    }\n\n    if (item.title === 'PROFILE_BTN_ADD_MORE_UNITS') {\n      navigationServices.navigate('VerifyCodeAndEmailForUnits', {\n        emailAddress: user.emailAddress,\n      });\n      return;\n    }\n\n    navigationServices.navigate(item.screen);\n  };\n\n  const renderSettingItem = (item) => {\n    if (item.screen === 'SetupPinCode' && hasPinCode) {\n      item.screen = 'ChangePinCode';\n      item.title = 'BTN_CHANGE_PIN';\n    }\n\n    if (item.screen === 'ForgotPinCode' && !hasPinCode) {\n      return null;\n    }\n\n    return <ItemSetting key={item.title} title={item.title} icon={item.icon} onPress={() => onItemPress(item)} />;\n  };\n\n  return (\n    <BaseLayout showBell={false} title=\"PROFILE_BTN_SELF_REGISTRATION\">\n      <AwareScrollView>\n        {data.map((item) => (\n          <Fragment key={item.title}>{renderSettingItem(item)}</Fragment>\n        ))}\n      </AwareScrollView>\n    </BaseLayout>\n  );\n};\n\nexport default Connect(SelfRegistrationSettings);\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport SelfRegistrationSetting from '../../../subSetting/selfRegistration';\nimport { renderScreen } from '../../../../../../__mocks__/mockApp';\nimport navigationServices from '../../../../../navigator/navigationServices';\n\nconst mockStore = {\n  selfRegistration: { curUnitAuthenticationCode: '123456' },\n  userProfile: { user: { emailAddress: 'test@example.com' } },\n};\n\nconst mockActions = {\n  selfRegistration: {\n    verifyEmailCodeForMembers: jest.fn(),\n  },\n};\n\nconst render = () =>\n  renderScreen(<SelfRegistrationSetting />)({\n    store: mockStore,\n    actions: mockActions,\n  });\n\ndescribe('Setting', () => {\n  it('renders Setting correctly', () => {\n    const { getByText } = render();\n\n    expect(getByText('PROFILE_BTN_SELF_REGISTRATION')).toBeTruthy();\n    expect(getByText('PROFILE_BTN_ADD_MORE_MEMBERS')).toBeTruthy();\n  });\n\n  it('navigates to UnitAuthCode screen on pressing Unit Auth Code', () => {\n    const { getByText } = render();\n    fireEvent.press(getByText('UNIT_AUTH_CODE'));\n    expect(navigationServices.navigate).toHaveBeenCalledWith('UnitAuthCode');\n  });\n\n  it('navigates to VerifyCodeAndEmailForUnits screen on pressing Add More Unit', () => {\n    const { getByText } = render();\n    fireEvent.press(getByText('PROFILE_BTN_ADD_MORE_UNITS'));\n    expect(navigationServices.navigate).toHaveBeenCalledWith('VerifyCodeAndEmailForUnits', {\n      emailAddress: 'test@example.com',\n    });\n  });\n\n  it('enable to press Add More Member', () => {\n    const { getByText } = render();\n    fireEvent.press(getByText('PROFILE_BTN_ADD_MORE_MEMBERS'));\n  });\n});\n\n```"}
