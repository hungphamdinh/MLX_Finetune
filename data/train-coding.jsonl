{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ItemJR from '../ItemJR';\nimport { JR_STATUS_ID } from '../../../Config/Constants';\n\ndescribe('ItemJR', () => {\n  const mockItem = { id: 123, startDate: '2023-06-30T09:00:00.000Z', targetResponseDate: '2023-07-01T09:00:00.000Z', fullUnitCode: 'ABC123', haveOfficeSigning: true, haveMaintenanceSigning: false, statusId: JR_STATUS_ID.RESOLVED, isQuickCreate: false, description: 'Lorem ipsum dolor sit amet', teamUser: { displayName: 'John Doe' }, creatorUser: { displayName: 'Jane Smith' } };\n  const onPressMock = jest.fn();\n  const onPressSignMock = jest.fn();\n  const onPressPreviewMock = jest.fn();\n  afterEach(() => { jest.clearAllMocks(); });\n  it('should render the component correctly', () => {\n    const { getByText } = render(<ItemJR item={mockItem} onPress={onPressMock} onPressSign={onPressSignMock} onPressPreview={onPressPreviewMock} />);\n    expect(getByText(`#${mockItem.id}`)).toBeTruthy();\n    expect(getByText('John Doe')).toBeTruthy();\n    expect(getByText('ABC123')).toBeTruthy();\n    expect(getByText('Lorem ipsum dolor sit amet')).toBeTruthy();\n    expect(getByText('COMMON_CREATION_TIME')).toBeTruthy();\n    expect(getByText('JR_TARGET_RESPONSE_DATE')).toBeTruthy();\n  });\n  it('should call the onPress function when the item is pressed', () => {\n    const { getByTestId } = render(<ItemJR item={mockItem} onPress={onPressMock} onPressSign={onPressSignMock} onPressPreview={onPressPreviewMock} />);\n    fireEvent.press(getByTestId('item-wrapper'));\n    expect(onPressMock).toHaveBeenCalledTimes(1);\n  });\n  it('should call the onPressSign function when the sign button is pressed', () => {\n    const { getByTestId } = render(<ItemJR item={mockItem} onPress={onPressMock} onPressSign={onPressSignMock} onPressPreview={onPressPreviewMock} />);\n    fireEvent.press(getByTestId('sign-button'));\n    expect(onPressSignMock).toHaveBeenCalledTimes(1);\n  });\n  it('should call the onPressPreview function when the preview button is pressed', () => {\n    const { getByTestId } = render(<ItemJR item={mockItem} onPress={onPressMock} onPressSign={onPressSignMock} onPressPreview={onPressPreviewMock} />);\n    fireEvent.press(getByTestId('preview-button'));\n    expect(onPressPreviewMock).toHaveBeenCalledTimes(1);\n  });\n});\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport MyReportItem from '../MyReportItem';\nimport { formatDate } from '../../../Utils/transformData';\nimport LocaleConfig from '../../../Config/LocaleConfig';\n\ndescribe('MyReportItem', () => {\n  const mockItem = { id: '123', fileName: 'Report.pdf', creationTime: '2022-01-01T10:00:00.000Z', completionDate: '2022-01-02T10:00:00.000Z', file: { uri: 'path/to/file' }, statusId: 1 };\n  const mockOnItemPress = jest.fn();\n  const renderComponent = (item) => render(<MyReportItem item={item} onItemPress={mockOnItemPress} />);\n  it('renders correctly with a file', () => {\n    const { getByText } = renderComponent(mockItem);\n    expect(getByText(`#${mockItem.id}`)).toBeTruthy();\n    expect(getByText(mockItem.fileName)).toBeTruthy();\n    expect(getByText(formatDate(mockItem.creationTime, LocaleConfig.fullDateTimeFormat))).toBeTruthy();\n    expect(getByText(formatDate(mockItem.completionDate, LocaleConfig.fullDateTimeFormat))).toBeTruthy();\n    expect(getByText('COMPLETED')).toBeTruthy();\n  });\n  it('renders correctly without a file', () => {\n    const itemWithoutFile = { ...mockItem, file: null, statusId: 2 };\n    const { getByText } = renderComponent(itemWithoutFile);\n    expect(getByText(`#${mockItem.id}`)).toBeTruthy();\n    expect(getByText(mockItem.fileName)).toBeTruthy();\n    expect(getByText(formatDate(mockItem.creationTime, LocaleConfig.fullDateTimeFormat))).toBeTruthy();\n    expect(getByText(formatDate(mockItem.completionDate, LocaleConfig.fullDateTimeFormat))).toBeTruthy();\n    expect(getByText('FAILED')).toBeTruthy();\n  });\n  it('calls onItemPress when pressed and file is present', () => {\n    const { getByTestId } = renderComponent(mockItem);\n    fireEvent.press(getByTestId('report-item-button'));\n    expect(mockOnItemPress).toHaveBeenCalledWith(mockItem);\n  });\n  it('does not call onItemPress when file is null and TouchableOpacity is disabled', () => {\n    const itemWithoutFile = { ...mockItem, file: null };\n    const { getByTestId } = renderComponent(itemWithoutFile);\n    const reportItemButton = getByTestId('report-item');\n    expect(reportItemButton.props.disabled).toBe(true);\n  });\n});\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { fireEvent, waitFor } from '@testing-library/react-native';\nimport MyReport from '../MyReport';\nimport useInspection from '@Context/Inspection/Hooks/UseInspection';\nimport MyReportItem from '@Components/InnovatorInspection/MyReportItem';\nimport { renderScreen } from '@Mock/mockApp';\nimport { TouchableOpacity, Text } from 'react-native';\n\njest.mock('@Context/Inspection/Hooks/UseInspection');\n\njest.mock('@Components/InnovatorInspection/MyReportItem', () => jest.fn(() => null));\n\nconst mockGetMyReports = jest.fn();\nconst mockViewMyReport = jest.fn();\nconst myReports = { data: [ { id: '1', fileName: 'Report1.pdf', creationTime: '2022-01-01T10:00:00.000Z', completionDate: '2022-01-02T10:00:00.000Z', file: { uri: 'path/to/file1' } }, { id: '2', fileName: 'Report2.pdf', creationTime: '2022-02-01T10:00:00.000Z', completionDate: '2022-02-02T10:00:00.000Z', file: { uri: 'path/to/file2' } } ], isLoadMore: false, isRefresh: false, currentPage: 1, totalPage: 1 };\n\nbeforeEach(() => {\n  useInspection.mockReturnValue({ getMyReports: mockGetMyReports, viewMyReport: mockViewMyReport, inspection: { myReports } });\n  mockGetMyReports.mockClear();\n  mockViewMyReport.mockClear();\n});\n\nconst render = () => renderScreen(<MyReport />)();\n\ndescribe('MyReport', () => {\n  it('renders correctly', () => {\n    render();\n  });\n  it('calls getMyReports on search', async () => {\n    const { getByPlaceholderText } = render();\n    const searchInput = getByPlaceholderText('MY_REPORT_SEARCH');\n    fireEvent.changeText(searchInput, 'test');\n    await waitFor(() => {\n      expect(mockGetMyReports).toHaveBeenCalledWith({ page: 1, keyword: 'test' });\n    });\n  });\n  it('calls viewMyReport when an item is pressed', () => {\n    MyReportItem.mockImplementation(({ item, onItemPress }) => (\n      <TouchableOpacity onPress={() => onItemPress(item)} testID={`report-item-${item.id}`}>\n        <Text>{item.fileName}</Text>\n      </TouchableOpacity>\n    ));\n    const { getByTestId } = render();\n    fireEvent.press(getByTestId('report-item-1'));\n    expect(mockViewMyReport).toHaveBeenCalledWith(myReports.data[0]);\n  });\n});\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { renderScreen } from '@Mock/mockApp';\nimport Sections from '../Sections';\n\ndescribe('Sections', () => {\n  const list = [ { id: '1', name: 'Section 1', formPages: [] }, { id: '2', name: 'Section 2', formPages: [] } ];\n  const props = { list, updateField: jest.fn(), onRemoveSection: jest.fn(), formPages: [] };\n  it('renders sections correctly', () => {\n    const { getByText } = renderScreen(<Sections {...props} />)();\n    expect(getByText('Section 1')).toBeTruthy();\n    expect(getByText('Section 2')).toBeTruthy();\n  });\n});``` -CodeGPT\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport SelectBottomTab from '../../../Inspection/AttachImageScreen/SelectBottomTab';\n\ndescribe('SelectBottomTab Component', () => {\n  const count = 2;\n  const onPressDelete = jest.fn();\n  const onSelectAll = jest.fn();\n  const renderBottomTab = (count = 2) => {\n    return render(<SelectBottomTab count={count} onPressDelete={onPressDelete} onSelectAll={onSelectAll} />);\n  };\n  it('renders correctly', () => {\n    render(<SelectBottomTab />);\n  });\n  it('calls onSelectAll when pressed', () => {\n    const { getByText } = renderBottomTab();\n    fireEvent.press(getByText('COMMON_SELECT_ALL'));\n    expect(onSelectAll).toHaveBeenCalledTimes(1);\n  });\n  it('calls onPressDelete when pressed', () => {\n    const { getByTestId } = renderBottomTab();\n    const deleteButton = getByTestId('delete-button');\n    fireEvent.press(deleteButton);\n    expect(onPressDelete).toHaveBeenCalledTimes(1);\n  });\n  it('renders correct text when count is 0', () => {\n    const { getByText } = renderBottomTab(0);\n    expect(getByText('COMMON_SELECT')).toBeTruthy();\n  });\n  it('renders correct text when count is greater than 0', () => {\n    const { getByText } = renderBottomTab();\n    expect(getByText('INSPECTION_PHOTO_SELECTED'.toUpperCase())).toBeTruthy();\n  });\n});``` -CodeGPT\n-CodeGPT</s>"}
