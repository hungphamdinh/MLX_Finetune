{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`RootChecker`):\n```javascript\nimport React, { useEffect } from 'react';\nimport JailMonkey from 'jail-monkey';\nimport styled from 'styled-components/native';\nimport { Text } from '@Elements';\nimport { withModal } from '../../HOC';\n\nconst Container = styled.View``;\n\nconst Content = styled(Text)`\n  margin-bottom: 20px;\n`;\n\nconst DisclaimerContent = () => (\n  <Container>\n    <Content text=\"ROOT_DISCLAIMER_CONTENT\" />\n  </Container>\n);\n\nconst DisclaimerModal = withModal(DisclaimerContent, 'ROOT_DISCLAIMER_TITLE');\n\nfunction RootChecker({ onCompleted }) {\n  const isRooted = JailMonkey.isJailBroken();\n  useEffect(() => {\n    if (!isRooted) {\n      onCompleted();\n    }\n  }, [isRooted]);\n\n  const visible = isRooted;\n  if (visible) {\n    return <DisclaimerModal visible />;\n  }\n\n  return null;\n}\n\nexport default RootChecker;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport RootChecker from '../RootChecker/index';\nimport { renderScreen } from '../../../__mock__/mockApp';\n\njest.mock('jail-monkey', () => ({\n  isJailBroken: jest.fn(),\n}));\n\nrenderRootChecker = () =>\n  renderScreen(<RootChecker onCompleted={() => {}} />)({\n    store: {},\n    dispatch: jest.fn(),\n  });\n\ndescribe('RootChecker', () => {\n  it('should render disclaimer modal if device is rooted and user has not agreed to disclaimer', () => {\n    require('jail-monkey').isJailBroken.mockReturnValueOnce(true);\n\n    const { getByText, debug } = renderRootChecker();\n    debug();\n    expect(getByText('ROOT_DISCLAIMER_CONTENT')).toBeDefined();\n  });\n  it('should not render disclaimer modal if device is not rooted', () => {\n    require('jail-monkey').isJailBroken.mockReturnValueOnce(false);\n\n    const { queryByText } = renderRootChecker();\n\n    expect(queryByText('ROOT_DISCLAIMER_CONTENT')).toBeNull();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`sections`):\n```javascript\nimport React from 'react';\nimport AwareScrollView from '@Components/Layout/AwareScrollView';\nimport Section from './Section';\n\nconst Sections = ({ list, onPressItem, ...props }) => (\n  <AwareScrollView>\n    {list.map((item, index) => (\n      <Section key={item.id} index={index} item={item} list={list} onPress={onPressItem} {...props} />\n    ))}\n  </AwareScrollView>\n);\n\nexport default Sections;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen } from '@Mock/mockApp';\nimport Sections from '../Sections';\n\nconst list = [\n  { id: '1', name: 'Section 1', formPages: [] },\n  { id: '2', name: 'Section 2', formPages: [] },\n];\n\nconst props = {\n  list,\n  updateField: jest.fn(),\n  onRemoveSection: jest.fn(),\n  formPages: [],\n};\n\nconst renderSections = () => renderScreen(<Sections {...props} />)();\n\ndescribe('Sections', () => {\n  it('renders sections correctly', () => {\n    const { getByText } = renderSections();\n\n    expect(getByText('Section 1')).toBeTruthy();\n    expect(getByText('Section 2')).toBeTruthy();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`emptyList`):\n```javascript\nimport React from 'react';\nimport { Image, Text } from '@Elements';\nimport { ImageResource } from '@Themes';\nimport styled from 'styled-components/native';\n\nconst Wrapper = styled.View`\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n  margin-top: 80px;\n`;\n\nconst Content = styled(Text)`\n  color: #505e75;\n  font-weight: bold;\n  font-size: 13px;\n`;\n\nconst EmptyList = () => (\n  <Wrapper>\n    <Image testID=\"image\" source={ImageResource.IMG_LIBRARY_EMPTY} />\n    <Content testID=\"text\" text=\"AD_EFORM_NO_IMAGES_AVAILABLE\" />\n  </Wrapper>\n);\n\nexport default EmptyList;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { render } from '@testing-library/react-native';\nimport EmptyList from '../../../Inspection/AttachImageScreen/EmptyList';\nimport { ImageResource } from '../../../../../Themes';\n\ndescribe('EmptyList Component', () => {\n  it('renders correctly', () => {\n    render(<EmptyList />);\n  });\n\n  it('renders image correctly', () => {\n    const { getByTestId } = render(<EmptyList />);\n    const image = getByTestId('image');\n    expect(image.props.source).toBe(ImageResource.IMG_LIBRARY_EMPTY);\n  });\n\n  it('renders text correctly', () => {\n    const { getByTestId } = render(<EmptyList />);\n    const text = getByTestId('text');\n    expect(text.props.children).toBe('AD_EFORM_NO_IMAGES_AVAILABLE');\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`section`):\n```javascript\nimport React, { Fragment } from 'react';\nimport styled from 'styled-components/native';\nimport { FormDropdown } from '@Components/Forms';\nimport SectionName from '../SectionName';\n\nconst SectionItem = styled.TouchableOpacity`\n  padding: 10px;\n  background-color: white;\n  border-radius: 20px;\n  margin-bottom: 10px;\n  align-items: center;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst SectionDropdown = styled.View`\n  padding-horizontal: 10px;\n`;\n\nconst Section = ({ item, onRemoveSection, index, name, list, updateField, formPages }) => {\n  const [sectionVisible, setSectionVisible] = React.useState(false);\n  const [disabledFormPages, setDisabledFormPages] = React.useState([]);\n\n  const fieldName = `${name}.${index}`;\n  const formPagesSelectedName = `${fieldName}.formPages`;\n\n  const onSelectSection = (val) => {\n    updateField(index, {\n      formPages: val,\n    });\n  };\n\n  const changeSectionVisible = () => {\n    setSectionVisible(!sectionVisible);\n  };\n\n  const onDropdownVisible = () => {\n    let allSelectedFormPages = [];\n    const selectedFormPages = [];\n    list.forEach((child) => {\n      child.formPages.forEach((pageSelected) => {\n        const currentPage = item.formPages.find((page) => page.id === pageSelected.id);\n        if (!currentPage) {\n          selectedFormPages.push(pageSelected);\n        }\n      });\n      allSelectedFormPages = allSelectedFormPages.concat([...selectedFormPages.map((page) => page.id)]);\n    });\n    setDisabledFormPages(allSelectedFormPages);\n  };\n\n  const commonProps = {\n    item,\n    updateField,\n    index,\n    name,\n  };\n\n  return (\n    <Fragment>\n      <SectionItem testID=\"sectionButton\" onPress={changeSectionVisible}>\n        <SectionName testID=\"sectionName\" onRemoveSection={onRemoveSection} {...commonProps} />\n      </SectionItem>\n      {sectionVisible && (\n        <SectionDropdown>\n          <FormDropdown\n            showSearchBar\n            showCheckAll={false}\n            multiple\n            name={formPagesSelectedName}\n            options={formPages}\n            onChange={onSelectSection}\n            lockValues={disabledFormPages}\n            showValue={false}\n            onDropdownVisible={onDropdownVisible}\n            valKey=\"id\"\n            testID=\"formDropdown\"\n          />\n        </SectionDropdown>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Section;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { renderScreen, mockFormProvider } from '@Mock/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport Section from '../Sections/Section'; // Adjust the import path as necessary\n\njest.mock(\n  '@Components/Forms/FormDropdown',\n  () => 'FormDropdown',\n  () => ({\n    onChange: jest.fn(),\n  })\n);\n\nconst formPages = [\n  {\n    id: '1',\n    name: 'section 1',\n  },\n  {\n    id: '2',\n    name: 'section 2',\n  },\n  {\n    id: '3',\n    name: 'section 3',\n  },\n];\n\nconst props = {\n  updateField: jest.fn(),\n  onRemoveSection: jest.fn(),\n  item: { id: '1', formPages },\n  list: [{ id: '1', formPages }],\n  formPages: [{ id: 'page1', name: 'Page 1' }],\n  name: 'sections',\n  index: 0,\n};\nconst SectionProvider = () => mockFormProvider(<Section {...props} />)({});\n\nconst renderSection = () => renderScreen(<SectionProvider />)();\ndescribe('Section', () => {\n  it('renders correctly', () => {\n    renderSection();\n  });\n\n  it('Dropdown visible when click section button', () => {\n    const { getByTestId } = renderSection();\n    const sectionButton = getByTestId('sectionButton');\n    fireEvent.press(sectionButton);\n    expect(getByTestId('formDropdown')).toBeTruthy();\n  });\n\n  it('calls updateField with correct parameters on section select', () => {\n    const { getByTestId } = renderSection();\n    const sectionButton = getByTestId('sectionButton');\n    fireEvent.press(sectionButton);\n    fireEvent(getByTestId('formDropdown'), 'onChange', ['page1']);\n\n    expect(props.updateField).toHaveBeenCalledWith(0, { formPages: ['page1'] });\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`selectBottomTab`):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components';\nimport { TouchableOpacity } from 'react-native';\nimport { RowWrapper } from '../../../../../Components/ItemApp/ItemCommon';\nimport { Text, IconButton } from '../../../../../Elements';\nimport I18n from '../../../../../I18n';\nimport { Metric, Colors } from '../../../../../Themes';\n\nconst Wrapper = styled(RowWrapper)`\n  background-color: white;\n  justify-content: space-between;\n  position: absolute;\n  bottom: 0px;\n  padding-top: 20px;\n  padding-horizontal: 20px;\n  padding-bottom: 30px;\n  width: ${Metric.ScreenWidth}px;\n`;\n\nconst SelectBottomTab = ({ count, onPressDelete, onSelectAll }) => (\n  <Wrapper>\n    <TouchableOpacity onPress={onSelectAll}>\n      <Text preset=\"bold\" text=\"COMMON_SELECT_ALL\" />\n    </TouchableOpacity>\n    <Text\n      preset=\"bold\"\n      text={count === 0 ? I18n.t('COMMON_SELECT') : I18n.t('INSPECTION_PHOTO_SELECTED'.toUpperCase(), null, count)}\n    />\n    <IconButton testID=\"delete-button\" size={25} color={Colors.azure} name=\"trash-sharp\" onPress={onPressDelete} />\n  </Wrapper>\n);\n\nexport default SelectBottomTab;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport SelectBottomTab from '../../../Inspection/AttachImageScreen/SelectBottomTab';\n\ndescribe('SelectBottomTab Component', () => {\n  const count = 2;\n  const onPressDelete = jest.fn();\n  const onSelectAll = jest.fn();\n\n  const renderBottomTab = (count = 2) => {\n    return render(<SelectBottomTab count={count} onPressDelete={onPressDelete} onSelectAll={onSelectAll} />);\n  };\n\n  it('renders correctly', () => {\n    render(<SelectBottomTab />);\n  });\n\n  it('calls onSelectAll when pressed', () => {\n    const { getByText } = renderBottomTab();\n    const selectAllButton = getByText('COMMON_SELECT_ALL');\n    fireEvent.press(selectAllButton);\n    expect(onSelectAll).toHaveBeenCalledTimes(1);\n  });\n\n  it('calls onPressDelete when pressed', () => {\n    const { getByTestId } = renderBottomTab();\n    const deleteButton = getByTestId('delete-button');\n    fireEvent.press(deleteButton);\n    expect(onPressDelete).toHaveBeenCalledTimes(1);\n  });\n\n  it('renders correct text when count is 0', () => {\n    const { getByText } = renderBottomTab(0);\n    const text = getByText('COMMON_SELECT');\n    expect(text).toBeTruthy();\n  });\n\n  it('renders correct text when count is greater than 0', () => {\n    const { getByText } = renderBottomTab();\n    const text = getByText('INSPECTION_PHOTO_SELECTED'.toUpperCase());\n    expect(text).toBeTruthy();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`TermAndConditions`):\n```javascript\nimport React, { useRef } from 'react';\nimport styled from 'styled-components/native';\nimport { Platform, StyleSheet } from 'react-native';\nimport { WebView } from 'react-native-webview';\nimport BaseLayout from '../../../../Components/Layout/BaseLayout';\nimport Button from '../../../../Elements/Button';\nimport { Text } from '../../../../Elements';\nimport useApp from '../../../../Context/App/Hooks/UseApp';\n\nconst TermView = styled(WebView)`\n  flex: 1;\n  margin-bottom: 10;\n`;\n\nconst ButtonWrapper = styled.View`\n  background-color: white;\n  padding-bottom: 30px;\n  padding-top: 10px;\n`;\n\nconst Hint = styled(Text)`\n  font-size: 12px;\n  padding-bottom: 10px;\n  margin-left: 5px;\n`;\n\nconst BiometricTermAndConditions = ({ navigation }) => {\n  const {\n    app: { biometricTermConditions },\n  } = useApp();\n\n  const [disabledAgree, setDisabledAgree] = React.useState(true);\n  const onAgree = navigation.getParam('onAgree');\n  const onGoBack = navigation.getParam('onGoBack');\n  const webViewRef = useRef();\n\n  const onWebViewLoad = () => {\n    webViewRef.current.injectJavaScript(`\n      const contentHeight = document.body.scrollHeight;\n      const viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n      const isScrollable = contentHeight > viewportHeight;\n      window.ReactNativeWebView.postMessage(isScrollable ? \"scrollable\" : \"scrollToEnd\");\n    `);\n  };\n\n  const goBack = (callBack) => {\n    navigation.goBack();\n    callBack();\n  };\n\n  const onClose = () => {\n    goBack(onGoBack);\n  };\n\n  const onAgreeTerms = () => {\n    goBack(onAgree);\n  };\n\n  const injectedJavaScript = `window.onscroll = function(ev) {\n      if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n         window.ReactNativeWebView.postMessage(\"scrollToEnd\")\n      }};`;\n\n  const onMessageReceived = ({ nativeEvent: { data } }) => {\n    if (data === 'scrollToEnd' && disabledAgree) {\n      setDisabledAgree(false);\n    }\n  };\n\n  return (\n    <BaseLayout onLeftPress={onClose} title=\"COMMON_TERM_CONDITIONS\" navigation={navigation} showBell={false}>\n      <TermView\n        testID=\"termConditionView\"\n        ref={webViewRef}\n        style={styles.webview}\n        originWhitelist={['*']}\n        onLoad={onWebViewLoad}\n        source={{ html: biometricTermConditions }}\n        scalesPageToFit={Platform.OS === 'android'}\n        automaticallyAdjustContentInsets={false}\n        injectedJavaScript={injectedJavaScript}\n        onMessage={onMessageReceived}\n      />\n      <Hint text=\"TERM_CONDITIONS_SCROLL_TO_AGREE\" />\n      <ButtonWrapper>\n        <Button disabled={disabledAgree} title=\"SE_BTN_ACCEPT_CONFIRM\" primary rounded onPress={onAgreeTerms} />\n      </ButtonWrapper>\n    </BaseLayout>\n  );\n};\n\nexport default BiometricTermAndConditions;\n\nconst styles = StyleSheet.create({\n  webview: {\n    flex: 1,\n    marginBottom: 10,\n  },\n});\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { render } from '@testing-library/react-native';\nimport BiometricTermAndConditions from '../../Biometric/TermAndConditions';\n\nconst mockNavigation = {\n  getParam: jest.fn(),\n  goBack: jest.fn(),\n};\nconst renderTerm = () => render(<BiometricTermAndConditions navigation={mockNavigation} />);\n\ndescribe('BiometricTermAndConditions', () => {\n  test('renders the component and button interaction', () => {\n    const { getByText, getByTestId } = renderTerm();\n    expect(getByTestId('termConditionView')).toBeTruthy();\n    expect(getByText('TERM_CONDITIONS_SCROLL_TO_AGREE')).toBeTruthy();\n    expect(getByText('SE_BTN_ACCEPT_CONFIRM')).toBeTruthy();\n  });\n\n  test('button should be disabled initially', () => {\n    const { getByText } = renderTerm();\n\n    const button = getByText('SE_BTN_ACCEPT_CONFIRM');\n    expect(button).toBeDisabled();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`Biometric`):\n```javascript\nimport React from 'react';\nimport NavigationService from '@NavigationService';\nimport styled from 'styled-components/native';\nimport { Button, Text } from '@Elements';\nimport AuthLayout from '../../../Components/Auths/AuthLayout';\n\nimport { BIOMETRIC_STATUS } from '../../../Config/Constants';\nimport useUser from '../../../Context/User/Hooks/UseUser';\n\nconst Title = styled(Text)`\n  color: black;\n  font-weight: bold;\n  font-size: 30px;\n  margin-top: 50px;\n  width: 80%;\n`;\n\nconst Subtitle = styled(Text)`\n  color: black;\n  margin-top: 26px;\n`;\n\nconst SettingButton = styled(Button).attrs(() => ({\n  containerStyle: {\n    height: 50,\n    borderRadius: 25,\n    marginTop: 32,\n    alignSelf: 'center',\n  },\n}))``;\n\nconst SkipButton = styled(Button)`\n  margin-top: 10px;\n  text-decoration-line: underline;\n  color: gray;\n  font-weight: bold;\n`;\n\nconst Wrapper = styled.View`\n  padding-horizontal: 40px;\n`;\nconst BiometricScreen = () => {\n  const { saveBiometricSetting } = useUser();\n\n  const onGoToSettings = () => {\n    NavigationService.replace('Setting');\n  };\n\n  const onSkip = () => {\n    NavigationService.goBack();\n  };\n\n  const submit = (callBack) => {\n    saveBiometricSetting(BIOMETRIC_STATUS.SKIP);\n    callBack();\n  };\n\n  return (\n    <AuthLayout onRightButtonPress={() => submit(onSkip)} showRightButton showLeftButton={false}>\n      <Wrapper>\n        <Title text=\"BIOMETRIC_TITLE\" />\n        <Subtitle text=\"BIOMETRIC_SUB_TITLE\" />\n      </Wrapper>\n\n      <SettingButton title=\"GO_TO_SETTINGS\" primary rounded onPress={() => submit(onGoToSettings)} />\n      <SkipButton title=\"SKIP_FOR_NOW\" transparent onPress={() => submit(onSkip)} />\n    </AuthLayout>\n  );\n};\n\nexport default BiometricScreen;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport NavigationService from '@NavigationService';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport BiometricScreen from '../../Biometric';\n\n// Mock the NavigationService.replace method\njest.mock('@NavigationService', () => ({\n  replace: jest.fn(),\n  goBack: jest.fn(),\n}));\n\ndescribe('BiometricScreen', () => {\n  it('render BiometricScreen', () => {\n    const { getByText } = render(<BiometricScreen />);\n\n    expect(getByText('GO_TO_SETTINGS')).toBeTruthy();\n    expect(getByText('SKIP_FOR_NOW')).toBeTruthy();\n    expect(getByText('BIOMETRIC_TITLE')).toBeTruthy();\n    expect(getByText('BIOMETRIC_SUB_TITLE')).toBeTruthy();\n  });\n  it('should navigate to Profile screen when \"GO_TO_SETTINGS\" button is pressed', () => {\n    const { getByText } = render(<BiometricScreen />);\n    const goToSettingsButton = getByText('GO_TO_SETTINGS');\n\n    fireEvent.press(goToSettingsButton);\n\n    expect(NavigationService.replace).toHaveBeenCalledWith('Setting');\n  });\n\n  it('should go back when \"SKIP_FOR_NOW\" button is pressed', () => {\n    const { getByText } = render(<BiometricScreen />);\n    const skipButton = getByText('SKIP_FOR_NOW');\n\n    fireEvent.press(skipButton);\n\n    expect(NavigationService.goBack).toHaveBeenCalled();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`CredentialsModal`):\n```javascript\nimport React from 'react';\nimport { FormProvider } from 'react-hook-form';\nimport I18n from '@I18n';\nimport * as Yup from 'yup';\nimport styled from 'styled-components/native';\nimport { Button } from '../../../Elements';\nimport { FormInput } from '../../Forms';\nimport { withModal } from '../../../HOC';\nimport { useCompatibleForm, useYupValidationResolver } from '../../../Utils/hook';\nimport { icons } from '../../../Resources/icon';\nimport useUser from '../../../Context/User/Hooks/UseUser';\nimport { BIOMETRIC_STATUS } from '../../../Config/Constants';\n\nconst ButtonWrapper = styled.View`\n  align-items: center;\n  margin-top: 10px;\n`;\n\nconst Wrapper = styled.View`\n  padding-horizontal: 10px;\n`;\n\nconst InputIcon = styled.Image`\n  margin-right: 10px;\n`;\n\nconst CredentialsModal = ({ onSuccess }) => {\n  const {\n    user: { user },\n    checkAuthenticate,\n    updateUserBiometric,\n  } = useUser();\n\n  const requiredQuestion = I18n.t('AUTH_REQUIRED_FIELD');\n  const validationSchema = Yup.object().shape({\n    password: Yup.string().required(requiredQuestion),\n  });\n  const formMethods = useCompatibleForm({\n    resolver: useYupValidationResolver(validationSchema),\n    defaultValues: {\n      username: user.emailAddress,\n      password: '',\n    },\n  });\n\n  const onSubmit = async (values) => {\n    const response = await checkAuthenticate(values);\n    if (response) {\n      updateUserBiometric(BIOMETRIC_STATUS.ON);\n      onSuccess();\n    }\n  };\n\n  return (\n    <Wrapper>\n      <FormProvider {...formMethods}>\n        <FormInput\n          name=\"username\"\n          mode=\"small\"\n          keyboardType=\"email-address\"\n          label=\"LOGIN_USERNAME\"\n          editable={false}\n          placeholder=\"LOGIN_USERNAME\"\n        />\n        <FormInput\n          name=\"password\"\n          secureTextEntry\n          mode=\"small\"\n          label=\"LOGIN_PASSWORD\"\n          placeholder=\"LOGIN_PASSWORD\"\n          leftIcon={<InputIcon source={icons.password} />}\n        />\n        <ButtonWrapper center>\n          <Button\n            block\n            primary\n            rounded\n            title={I18n.t('ENABLE_BIOMETRIC')}\n            onPress={formMethods.handleSubmit(onSubmit)}\n          />\n        </ButtonWrapper>\n      </FormProvider>\n    </Wrapper>\n  );\n};\n\nexport default withModal(CredentialsModal, 'CREDENTIALS_TITLE');\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { render, fireEvent, act } from '@testing-library/react-native';\nimport CredentialsModal from '../CredentialsModal';\n\ndescribe('BiometricScreen', () => {\n  test('render', () => {\n    const { getByText } = render(<CredentialsModal />);\n\n    expect(getByText('LOGIN_PASSWORD')).toBeTruthy();\n    expect(getByText('LOGIN_USERNAME')).toBeTruthy();\n    expect(getByText('ENABLE_BIOMETRIC')).toBeTruthy();\n  });\n  test('submit button triggers onSubmit function with correct values', () => {\n    const onClosePress = jest.fn();\n    const { getByText } = render(<CredentialsModal onClosePress={onClosePress} />);\n\n    const passwordInput = getByText('LOGIN_PASSWORD');\n    const submitButton = getByText('ENABLE_BIOMETRIC');\n    act(() => {\n      fireEvent.changeText(passwordInput, 'password123');\n    });\n\n    fireEvent.press(submitButton);\n    expect(onClosePress).toBeTruthy();\n  });\n});\n\n```"}
{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`useFeatureFlag`):\n```javascript\nimport useApp from './App/Hooks/UseApp';\n\nconst useFeatureFlag = () => {\n  const {\n    app: {\n      allSettings: { general },\n    },\n  } = useApp();\n  const isEnableLiveThere = general?.isEnableLiveThere;\n  return {\n    isEnableLiveThere,\n  };\n};\n\nexport default useFeatureFlag;\n\n```\n\nUnit Test:\n```javascript\nimport { renderHook } from '@testing-library/react-hooks';\nimport useFeatureFlag from '@Context/useFeatureFlag';\nimport useApp from '@Context/App/Hooks/UseApp';\n\ndescribe('useFeatureFlag', () => {\n  it('should return isEnableLiveThere flag from general settings', () => {\n    // Mock the implementation of useApp\n    useApp.mockReturnValue({\n      app: {\n        allSettings: {\n          general: {\n            isEnableLiveThere: true,\n          },\n        },\n      },\n    });\n\n    // Render the hook\n    const { result } = renderHook(() => useFeatureFlag());\n\n    // Assert the result\n    expect(result.current.isEnableLiveThere).toBe(true);\n  });\n\n  it('should handle case when general settings are undefined', () => {\n    // Mock the implementation of useApp with undefined general settings\n    useApp.mockReturnValue({\n      app: {\n        allSettings: {},\n      },\n    });\n\n    // Render the hook\n    const { result } = renderHook(() => useFeatureFlag());\n\n    // Assert the result\n    expect(result.current.isEnableLiveThere).toBeUndefined();\n  });\n});\n\n```"}
