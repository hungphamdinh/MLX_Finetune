{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (postSlider - Part 1 - Code):\n```javascript\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components/native';\nimport i18n from '@i18n';\nimport Connect from '@stores';\nimport AppList from '@components/Lists/AppList';\nimport { View } from 'react-native';\nimport { size } from 'lodash';\nimport ItemPost from '@components/socialCommunity/itemPost';\nimport { Text } from '../../Commons';\nimport NavigationServices from '../../../navigator/navigationServices';\nimport { Metric } from '../../../themes';\nimport PostMoreModal from '../../socialCommunity/postMoreModal';\nimport { useActionModalHook } from '../../actionModal';\nimport SliderHeader from '../sliderHeader';\n\nconst PostWapper = styled(ItemPost)`\n  width: ${Metric.ScreenWidth * 0.8};\n  margin-top: 15px;\n`;\n\nconst PostSlider = ({ actions, socialCommunity: { homePosts } }) => {\n  const moreActionModal = useActionModalHook();\n  const [selectedPost, setSelectedPost] = useState(null);\n  const { data, isRefresh, isLoadMore, currentPage, totalPage } = homePosts;\n\n  useEffect(() => {\n    getList(1);\n  }, []);\n\n  const getList = (page) => {\n    actions.socialCommunity.getListPost(page);\n  };\n\n  const gotoDetail = (item) => {\n    NavigationServices.navigate('DetailPost', {\n      id: item.id,\n    });\n  };\n\n  const onViewAllPost = () => {\n    NavigationServices.navigate('SocialCommunity');\n  };\n\n  const onMorePress = (item) => {\n    moreActionModal.showModal();\n    setSelectedPost(item);\n  };\n\n  const renderItem = (item) => {\n    const postMaxLines = size(item.fileUrls) > 0 ? 1 : 10;\n    return (\n      <PostWapper\n        item={item}\n        onPress={() => gotoDetail(item)}\n        onMorePress={onMore\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (addOrEditVisitor - Part 1 - Unit Test):\n```javascript\n// BEGIN: 6f7d8a2fj3d1\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { Provider } from 'react-redux';\nimport AddOrEditVisitor from '../addOrEditVisitor/index';\nimport mockStore from '../../../../__mocks__/mockStore';\n\nconst detailVisitor = {\n  visitorInformations: [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'johndoe@example.com',\n    },\n  ],\n  numberOfVisitors: 2,\n  registerTime: '2022-01-01T00:00:00',\n  registerCheckOutTime: '2022-01-01T01:00:00',\n  description: 'Test Description',\n  reasonForVisit: { id: 1, name: 'Test Reason' },\n};\n\nconst store = mockStore({ visitor: { detailVisitor } });\nconst renderAddOrEditVisitor = () =>\n  render(\n    <Provider store={store}>\n      <AddOrEditVisitor />\n    </Provider>\n  );\n\ndescribe('AddOrEditVisitor', () => {\n  beforeEach(() => {\n    global.useMockRoute = {\n      params: {},\n      name: 'AddVisitor',\n    };\n  });\n\n  it('renders the add visitor', () => {\n    const { getByText } = renderAddOrEditVisitor();\n    expect(getByText('VS_NEW')).toBeDefined();\n  });\n\n  it('does not render the visitor pass tab when adding a new visitor', () => {\n    const { queryByText } = renderAddOrEditVisitor();\n    expect(queryByText('VISITOR_PASS')).toBeNull();\n  });\n\n  it('changes the title to \"VS_NEW\" when adding a new visitor', () => {\n    const { getByText } = renderAddOrEditVisitor();\n    expect(getByText('VS_NEW')).toBeDefined();\n  });\n\n  afterEach(() => {\n    global.useMock\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (momoPaymentMethod - Part 1 - Code):\n```javascript\nimport React, { useState } from 'react';\nimport Connect from '@stores';\nimport { useRoute } from '@react-navigation/native';\nimport styled from 'styled-components/native';\nimport BaseLayout from '@components/Layout/BaseLayout';\nimport i18n from '@i18n';\nimport Row from '@components/Layout/Row';\nimport { formatMoney } from '@utils/currencyFormatter';\nimport { Text } from '@components/Commons';\nimport Momo from '@utils/momo';\nimport PaymentMethodItem from './ItemPaymentMethod';\n\nconst Wrapper = styled.View`\n  padding: 16px;\n`;\n\nconst Title = styled(Text)`\n  padding-horizontal: 16px;\n  padding-vertical: 10px;\n  font-size: 16px;\n`;\n\nconst Footer = styled(Row)`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  padding: 16px;\n  justify-content: space-between;\n`;\n\nconst MoMoPaymentMethod = ({\n  app: {\n    settingApp: { allowOnlinePaymentMomo },\n  },\n}) => {\n  const [selectedMethod, setSelectedMethod] = useState(null);\n  const route = useRoute();\n  const routePrams = route.params;\n  const params = routePrams.params;\n  const callback = routePrams.callback;\n\n  const onPayment = () => {\n    callback(selectedMethod);\n  };\n\n  const paymentMethods = Momo.getPaymentMethods(allowOnlinePaymentMomo);\n\n  const bottomButtons = [\n    {\n      title: i18n.t('COMMON_CONFIRM'),\n      type: 'primary',\n      onPress: onPayment,\n      disabled: !selectedMethod,\n    },\n  ];\n  return (\n    <BaseLayout\n      bottomButtons={bottomButtons}\n      containerStyle={{ backgroundColor: 'white' }}\n      title=\"MOMO_PAYMENT_METHODS_TITLE\"\n    >\n      <Title preset=\"bold\" text=\"PAYMENT_ADD\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (AddPost - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport AddPost from '../addPost';\n\njest.mock('@utils/toast', () => ({\n  showError: jest.fn(),\n}));\n\nconst mockUser = { displayName: 'John Doe' };\nconst mockUnitActive = { unitId: 1, memberRole: 'member' };\nconst mockActions = {\n  socialCommunity: {\n    createPost: jest.fn(),\n  },\n};\n\ndescribe('AddPost', () => {\n  const renderComponent = (props = {}) =>\n    renderScreen(<AddPost />)({\n      store: {\n        userProfile: {\n          user: mockUser,\n          ...props.userProfile,\n        },\n        units: { unitActive: mockUnitActive, ...props.units },\n      },\n      actions: mockActions,\n    });\n\n  it('renders the component correctly', () => {\n    const { getByPlaceholderText, getByText } = renderComponent();\n\n    expect(getByPlaceholderText('POST_CREATE_PLACEHOLDER')).toBeTruthy();\n    expect(getByText('John Doe')).toBeTruthy();\n  });\n\n  it('updates the post content when typing', () => {\n    const { getByPlaceholderText } = renderComponent();\n    const input = getByPlaceholderText('POST_CREATE_PLACEHOLDER');\n    fireEvent.changeText(input, 'Hello, world!');\n\n    expect(input.props.value).toBe('Hello, world!');\n  });\n\n  it('shows an error when more than 10 images are selected', () => {\n    const { getByText } = renderComponent();\n    const createButton = getByText('SOCIAL_COMMUNITY_POST_CREATE_BUTTON');\n    fireEvent.press(createButton);\n\n    expect(mockActions.socialCommunity.createPost).not.toHaveBeenCalled();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (tabDetailInfo - Part 3 - Unit Test):\n```javascript\nrenderAddVisitor();\n    const addVisitorButton = getByTestId('add-visitor-button');\n    fireEvent.press(addVisitorButton);\n    const removeVisitorButton = getByTestId('remove-visitor-button');\n    fireEvent.press(removeVisitorButton);\n    const visitorInformations = getByTestId('visitor-informations');\n    expect(visitorInformations.children.length).toBe(1);\n  });\n\n  test('should update the visitor name when the name input is changed', () => {\n    const { getByTestId } = renderAddVisitor();\n    const visitorInformations = getByTestId('visitor-informations');\n    const firstVisitor = visitorInformations.children[0];\n    const nameInput = getByTestId('visitor-name', { container: firstVisitor });\n    const phoneInput = getByTestId('visitor-phone', { container: firstVisitor });\n    const idInput = getByTestId('visitor-id', { container: firstVisitor });\n    fireEvent.changeText(nameInput, 'John Doe');\n    fireEvent.changeText(phoneInput, '123-456-7890');\n    fireEvent.changeText(idInput, '1234567890');\n    expect(nameInput.props.value).toBe('John Doe');\n    expect(phoneInput.props.value).toBe('123-456-7890');\n    expect(idInput.props.value).toBe('1234567890');\n  });\n\n  it('should show submit button', () => {\n    const { getByTestId } = renderAddVisitor();\n    const submitButton = getByTestId('submit-button');\n    expect(submitButton).toBeDefined();\n  });\n\n  afterEach(() => {\n    global.useMockRoute = {};\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (selfRegistration - Part 2 - Unit Test):\n```javascript\nMore Member', () => {\n    const { getByText } = render();\n    fireEvent.press(getByText('PROFILE_BTN_ADD_MORE_MEMBERS'));\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (detailPost - Part 3 - Code):\n```javascript\nreferenceId && _.size(data) > 0 && listRef.current && readyToScroll) {\n      scrollToComment(referenceId);\n      setReadyToScroll(false);\n    }\n  }, [referenceId, _.size(data), listRef.current]);\n\n  const getComments = (page = 1) => {\n    actions.socialCommunity.getPostComments({\n      page,\n      postId: id,\n      pageSize: !referenceId ? 20 : 1000,\n    });\n  };\n\n  const baseLayoutProps = {\n    navigation,\n    title: 'POST_DETAIL_TITLE',\n    containerStyle: { backgroundColor: 'white' },\n  };\n\n  const itemPostProps = {\n    item: detailPost,\n    isDetail: true,\n    onMorePress: () => {\n      moreActionModal.showModal();\n    },\n    onComment: () => {\n      inputRef.current.focus();\n    },\n  };\n\n  const moreActionModalProps = {\n    ...moreActionModal,\n    item: detailPost,\n  };\n\n  const commentActionModalProps = {\n    visible: commentActionModal.visible,\n    setVisible: commentActionModal.showModal,\n    onCloseModal: commentActionModal.hideModal,\n    options: [\n      {\n        title: 'POST_COPY',\n        icon: 'copy-outline',\n        onPress: () => {\n          Clipboard.setString(commentSelected.content);\n          toast.showSuccess('COPY_SUCCESSFULLY');\n        },\n      },\n    ],\n  };\n  if (isPostOwner || isCommentOwner) {\n    commentActionModalProps.options.push({\n      title: 'POST_DELETE',\n      icon: 'trash-outline',\n      onPress: () => {\n        AlertNative(\n          '',\n          i18n.t('SC_DELETE_COMMENT_ASK'),\n          () => actions.socialCommunity.deleteComment(commentSelected.id),\n          i18n.t('AD_COMMON_YES'),\n          i18n.t('AD_COMMON_\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (hiddenItem - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport HiddenItem from '../../deviceList/hiddenItem';\nimport { deviceTypes } from '../../../../configs/constants';\n\ndescribe('HiddenItem', () => {\n  const changeDeviceType = jest.fn();\n  const removeDevice = jest.fn();\n\n  const renderItem = (item) =>\n    renderScreen(<HiddenItem item={item} changeDeviceType={changeDeviceType} removeDevice={removeDevice} />)();\n\n  it('renders correctly with primary device type', () => {\n    const item = {\n      registerType: deviceTypes.primary,\n    };\n    const { getByText } = renderItem(item);\n\n    fireEvent.press(getByText('BTN_CHANGE_TO_SECONDARY_DEVCE'));\n    expect(changeDeviceType).toHaveBeenCalledWith(item);\n\n    fireEvent.press(getByText('BTN_REMOVE_DEVICE'));\n    expect(removeDevice).toHaveBeenCalledWith(item);\n  });\n\n  it('renders correctly with secondary device type', () => {\n    const secondaryItem = {\n      registerType: deviceTypes.secondary,\n    };\n\n    const { getByText } = renderItem(secondaryItem);\n\n    expect(getByText('BTN_CHANGE_TO_PRIMARY_DEVCE')).toBeTruthy();\n    expect(getByText('BTN_REMOVE_DEVICE')).toBeTruthy();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (itemSurvey - Part 2 - Unit Test):\n```javascript\nEvent.press(getByTestId('item-survey'));\n    expect(mockAction).toHaveBeenCalled();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (momoPaymentMethod - Part 2 - Unit Test):\n```javascript\nparams.callback).toHaveBeenCalledWith('payWithCC');\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (momoWebView - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport { DeviceEventEmitter } from 'react-native';\nimport MoMoWebView from '../../momo/momoWebView';\nimport { renderScreen } from '../../../../../__mocks__/mockApp';\nimport navigationServices from '../../../../navigator/navigationServices';\n\ndescribe('MoMoWebView', () => {\n  const render = () =>\n    renderScreen(<MoMoWebView />)({\n      params,\n    });\n\n  const params = {\n    callBack: jest.fn(),\n    url: 'https://example.com',\n  };\n  beforeEach(() => {\n    global.useMockRoute = {\n      params,\n      name: 'MoMoWebView',\n    };\n    emitSpy = jest.spyOn(DeviceEventEmitter, 'emit').mockImplementation(() => {});\n  });\n\n  it('renders the WebView', () => {\n    const { getByTestId } = render();\n\n    expect(getByTestId('webview')).toBeTruthy();\n  });\n\n  it('calls callback on state change', () => {\n    const { getByTestId } = render();\n    const webView = getByTestId('webview');\n\n    fireEvent(webView, 'navigationStateChange', {\n      url: 'https://propertycube.asia',\n    });\n\n    expect(emitSpy).toHaveBeenCalledWith('paymentCallBack');\n  });\n\n  it('pops screen on callback', () => {\n    const { getByTestId } = render();\n    const webView = getByTestId('webview');\n\n    fireEvent(webView, 'navigationStateChange', {\n      url: 'https://propertycube.asia',\n    });\n\n    expect(navigationServices.popTo).toHaveBeenCalledWith('FeePaymentConfirm');\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (tabDetailInfo - Part 1 - Code):\n```javascript\nimport React, { useEffect, useRef, useState, Fragment } from 'react';\nimport * as Yup from 'yup';\nimport { Formik, FieldArray } from 'formik';\nimport { View } from 'react-native';\nimport i18n from '@i18n';\nimport Connect from '@stores';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport styled from 'styled-components/native';\nimport { Form, FormDate, FormDropdown, FormInput, FormDocumentPicker, FormRadioGroup } from '../../../../components/Forms';\nimport AwareScrollView from '../../../../components/Layout/AwareScrollView';\nimport BaseLayout from '../../../../components/Layout/BaseLayout';\nimport { Card, Text } from '../../../../components/Commons';\nimport Button from '../../../../components/button';\nimport { Colors } from '../../../../themes';\nimport Row from '../../../../components/Layout/Row';\nimport ButtonExpand from '../../../../components/buttonExpand';\nimport { useRoute } from '@react-navigation/native';\n\nconst CardWrapper = styled(Card)``;\n\nconst ButtonAdd = styled(Button)`\n  margin-right: 2px;\n  margin-left: -2px;\n`;\n\nconst ButtonClose = styled(Button)``;\n\nconst VisitorWrapper = styled(Row)`\n  margin-bottom: 10px;\n  justify-content: space-between;\n`;\n\nconst BtnAddWrapper = styled(Row)`\n  margin-bottom: 10px;\n`;\n\nconst phoneInputStyles = {\n  flex: 1,\n};\n\nconst IDInputStyles = {\n  flex: 1,\n  marginLeft: 10,\n};\n\nconst visitorTypes = [\n  {\n    label: i18n.t('VISITOR_TYPE_VISITOR'),\n    value: 0,\n  },\n  {\n    label: i18n.t('VISITOR_TYPE_CONTRACTOR'),\n    value: 1,\n  },\n];\n\nconst TabDetailInfo =\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (deviceItem - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport DeviceItem from '../../deviceList/deviceItem';\n\ndescribe('DeviceItem', () => {\n  const item = {\n    deviceName: 'Test Device',\n  };\n  const renderItem = (isCurrentDevice) =>\n    renderScreen(<DeviceItem item={item} index={0} isCurrentDevice={isCurrentDevice} />)();\n\n  it('renders correctly', () => {\n    const isCurrentDevice = false;\n    const { getByText, queryByText } = renderItem(isCurrentDevice);\n\n    expect(getByText('Test Device')).toBeTruthy();\n    expect(queryByText('CURRENT_DEVICE')).toBeNull();\n  });\n\n  it('renders as current device', () => {\n    const isCurrentDevice = true;\n    const { getByText } = renderItem(isCurrentDevice);\n\n    expect(getByText('Test Device')).toBeTruthy();\n    expect(getByText('CURRENT_DEVICE')).toBeTruthy();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (postSlider - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { Text } from 'react-native';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport SliderHeader from '../sliderHeader';\n\ndescribe('SliderHeader', () => {\n  const mockOnViewAll = jest.fn();\n  const title = 'Test Title';\n\n  it('should render the title correctly', () => {\n    const { getByText } = render(\n      <SliderHeader title={title} onViewAll={mockOnViewAll}>\n        <></>\n      </SliderHeader>\n    );\n\n    expect(getByText(title)).toBeTruthy();\n  });\n\n  it('should render the \"VIEW_ALL\" button and handle press', () => {\n    const { getByTestId } = render(\n      <SliderHeader title={title} onViewAll={mockOnViewAll}>\n        <></>\n      </SliderHeader>\n    );\n\n    const viewAllButton = getByTestId('view-all-btn');\n    fireEvent.press(viewAllButton);\n\n    expect(mockOnViewAll).toHaveBeenCalled();\n  });\n\n  it('should render children correctly', () => {\n    const childText = 'Child Content';\n    const { getByText } = render(\n      <SliderHeader title={title} onViewAll={mockOnViewAll}>\n        <Text>{childText}</Text>\n      </SliderHeader>\n    );\n\n    expect(getByText(childText)).toBeTruthy();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (noticeSliderItem - Part 2 - Code):\n```javascript\n0.25,\n    shadowRadius: 3.84,\n    width: 300,\n  },\n  image: {\n    width: '100%',\n    height: 80,\n    borderTopLeftRadius: 14,\n    borderTopRightRadius: 14,\n    overflow: 'hidden',\n  },\n  contentContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    margin: 8,\n    minHeight: 35,\n  },\n  subject: {\n    fontWeight: '600',\n    fontSize: 13,\n    color: 'white',\n  },\n  contentWrapper: {\n    flexDirection: 'column',\n    paddingLeft: 10,\n    flex: 1,\n  },\n  content: {\n    color: '#878787',\n  },\n  subjectBackground: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n    zIndex: 1,\n    paddingHorizontal: 18,\n    paddingVertical: 13,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    flex: 1,\n  },\n};\n\nexport default NoticeSliderItem;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (scrollDownButton - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ScrollDownButton from '../scrollDownButton';\n\ndescribe('ScrollDownButton', () => {\n  it('should call onPress when the button is pressed', () => {\n    const mockOnPress = jest.fn();\n\n    const { getByTestId } = render(<ScrollDownButton onPress={mockOnPress} />);\n\n    const button = getByTestId('chevron-down-outline');\n\n    fireEvent.press(button);\n\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\n  });\n});\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (postRejected - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Text, ImageView } from '@components/Commons';\nimport { images } from '@resources/image';\n\nconst PostRejected = ({ detailPost }) => (\n  <Wrapper>\n    <Icon testID=\"postRejectedIcon\" source={images.postRejected} />\n    <Title preset=\"bold\" text=\"POST_REJECTED_TITLE\" />\n    <Content text={detailPost?.reason || 'POST_REJECTED_CONTENT'} />\n  </Wrapper>\n);\n\nconst Wrapper = styled.View`\n  flex: 1;\n  align-items: center;\n  padding-top: 50px;\n  background-color: #fff;\n`;\n\nconst Icon = styled(ImageView)`\n  width: 48px;\n  height: 48px;\n  margin-bottom: 15px;\n`;\n\nconst Title = styled(Text)`\n  margin-bottom: 15px;\n  font-size: 18px;\n`;\n\nconst Content = styled(Text)`\n  padding-horizontal: 15px;\n`;\n\nexport default PostRejected;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (nextButton - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { Colors } from '@themes';\nimport { fireEvent } from '@testing-library/react-native';\nimport NextTermButton from '../nextButton';\nimport { renderScreen } from '../../../../__mocks__/mockApp';\n\nconst onPressNextTerm = jest.fn();\n\nconst renderButton = (disabled) =>\n  renderScreen(<NextTermButton disabled={disabled} onPressNextTerm={onPressNextTerm} />)();\n\ndescribe('NextTermButton', () => {\n  it('renders the button correctly when enabled', () => {\n    const { getByTestId } = renderButton();\n\n    const buttonText = getByTestId('chevron-forward-outline');\n\n    expect(buttonText).toBeTruthy();\n    expect(buttonText).toHaveStyle({ color: Colors.azure });\n  });\n\n  it('renders the button correctly when disabled', () => {\n    const { getByTestId } = renderButton(true);\n    const buttonText = getByTestId('chevron-forward-outline');\n\n    expect(buttonText).toBeTruthy();\n    expect(buttonText).toHaveStyle({ color: Colors.textSemiGray });\n  });\n\n  it('calls onPressNextTerm when the button is pressed', () => {\n    const { getByTestId } = renderButton();\n    const buttonText = getByTestId('chevron-forward-outline');\n    fireEvent.press(buttonText);\n\n    expect(onPressNextTerm).toHaveBeenCalledTimes(1);\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (visitorScreen - Part 2 - Code):\n```javascript\nlistProps = {\n    data,\n    isRefresh,\n    isLoadMore,\n    currentPage,\n    totalPage,\n    emptyMsg: i18n.t('VS_EMPTY_TAB_CHECKIN'),\n    iconName: icons.visitorEmpty,\n    loadData: getList,\n    keyExtractor: (item) => item.visitorId.toString(),\n    renderItem: ({ item }) => renderItem(item),\n  };\n\n  return (\n    <BaseLayout onBtAddPress={onBtAddPress} helpModuleId={Modules.VISITOR} title=\"VS_HEADER_MODULE\">\n      <FilterView\n        onSearch={onTextSearchChange}\n        visibleFilter={visibleFilter}\n        setVisibleFilter={setVisibleFilter}\n        searchPlaceHolder=\"VISITOR_PLACEHOLDER_SEARCH\"\n      />\n      <AppList {...listProps} />\n    </BaseLayout>\n  );\n};\n\nexport default Connect(Visitor);\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (termAndConditions - Part 2 - Code):\n```javascript\n const isLastTab = filter.groupIndex === _.size(termAndConditions) - 1;\n  const disabledButton = disabledAgree.find((_item, index) => index === filter.groupIndex);\n  const allowAgree = _.size(selectedItems) === _.size(termAndConditions);\n\n  const onWebViewLoad = () => {\n    webViewRef.current.injectJavaScript(`\n      const contentHeight = document.body.scrollHeight;\n      const viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n      const isScrollable = contentHeight > viewportHeight;\n      window.ReactNativeWebView.postMessage(isScrollable ? \"scrollable\" : \"scrollToEnd\");\n    `);\n  };\n\n  const onTabChange = (groupIndex) => {\n    setFilter({\n      groupIndex,\n    });\n  };\n\n  const onPressNextTerm = () => {\n    setFilter({\n      groupIndex: filter.groupIndex + 1,\n    });\n  };\n\n  const onPressScrollToBottom = () => {\n    webViewRef.current.injectJavaScript(`window.scrollTo(0, document.body.scrollHeight);`);\n  };\n\n  const onMessageReceived = ({ nativeEvent: { data } }) => {\n    if (data === 'scrollToEnd' && disabledAgree) {\n      const disabled = disabledAgree.map((child, idx) => (idx === filter.groupIndex ? false : child));\n      setDisabledAgree(disabled);\n    }\n  };\n\n  const checkItem = (item) => {\n    const isExist = selectedItems.find((parcel) => parcel.id === item.id);\n    if (isExist) {\n      const newSelectedItems = selectedItems.filter((parcel) => parcel.id !== item.id);\n      setSelectedItems(newSelectedItems);\n      return;\n    }\n    setSelectedItems([...selectedItems, item]);\n  };\n\n  const baseLayoutProps = {\n    containerStyle: { backgroundColor: 'white' },\n    showLeftButton: !hideLeftButton,\n    title: 'COMMON_TERM_CONDITIONS',\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (selfRegistration - Part 1 - Code):\n```javascript\nimport React, { Fragment } from 'react';\nimport Connect from '@stores';\nimport { DeviceEventEmitter } from 'react-native';\nimport BaseLayout from '@components/Layout/BaseLayout';\nimport { icons } from '@resources/icons';\nimport ItemSetting from '@components/settings/settingItem';\nimport AwareScrollView from '@components/Layout/AwareScrollView';\nimport navigationServices from '../../../../navigator/navigationServices';\nimport { REGISTRATION_TYPE } from '../../../../configs/constants';\n\nconst data = [\n  {\n    icon: icons.addResidents,\n    title: 'PROFILE_BTN_ADD_MORE_MEMBERS',\n    type: REGISTRATION_TYPE.MORE_MEMBER,\n  },\n  {\n    icon: icons.home,\n    title: 'PROFILE_BTN_ADD_MORE_UNITS',\n    type: REGISTRATION_TYPE.MORE_UNIT,\n  },\n  {\n    icon: icons.uac,\n    title: 'UNIT_AUTH_CODE',\n    screen: 'UnitAuthCode',\n  },\n];\n\nconst SelfRegistrationSettings = ({\n  actions,\n  selfRegistration: { curUnitAuthenticationCode },\n  userProfile: { user },\n}) => {\n  const onItemPress = (item) => {\n    actions.selfRegistration.setRegistrationType(item?.type);\n    if (item.title === 'PROFILE_BTN_ADD_MORE_MEMBERS') {\n      DeviceEventEmitter.addListener('CheckUnitAuthCodeSuccess', () => {\n        navigationServices.navigate('ListRegisterMember');\n      });\n      actions.selfRegistration.verifyEmailCodeForMembers({\n        code: curUnitAuthenticationCode,\n        email: user.emailAddress,\n      });\n      return;\n    }\n\n    if (item.title === 'PROFILE_BTN_ADD_MORE_UNITS') {\n      navigationServices.navigate('VerifyCodeAndEmailForUnits', {\n        emailAddress: user.emailAddress,\n      });\n      return;\n    }\n\n    navigationServices.navigate(item.screen);\n  };\n\n  const renderSettingItem\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (itemVisitor - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport Icon from 'react-native-vector-icons/Ionicons';\nimport i18n from '@i18n';\nimport moment from 'moment';\nimport { Text } from '../../Commons';\nimport { Colors } from '../../../themes';\nimport { icons } from '../../../resources/icons';\nimport Configs from '../../../utils/configs';\nimport { HorizontalLine, VerticalLabelValue, Wrapper } from '../ItemCommon';\n\nconst ID = styled(Text)`\n  font-size: 15px;\n  ${'' /* flex: 1; */}\n  margin-bottom: 12px;\n`;\n\nconst RowWrapper = styled.View`\n  flex-direction: row;\n  align-items: center;\n  margin-top: 5px;\n`;\n\nconst Symbol = styled.Image`\n  width: 15px;\n  height: 22px;\n  tint-color: ${Colors.azure};\n`;\n\nconst LeftValue = styled(Text)`\n  font-size: 12px;\n  margin-left: 12px;\n  flex: 1;\n`;\n\nconst RightValue = styled(Text)`\n  font-size: 12px;\n  margin-left: 12px;\n`;\n\nconst NextWrapper = styled.View`\n  width: 18px;\n  height: 18px;\n  background-color: #648fca;\n  border-radius: 5px;\n  align-items: center;\n  justify-content: center;\n  margin-left: 5px;\n`;\n\nconst ItemVisitor = ({ item, onPress }) => {\n  const date = moment(item.createdAt).format(Configs.DayFormat);\n  const time = moment(item.createdAt).format('LT');\n  const format = 'HH:mm DD/MM/YYYY';\n  const checkInTime = item.registerTime ? moment(item.registerTime).format(format) : undefined;\n  const checkOutTime = item.\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (ItemNotice - Part 2 - Unit Test):\n```javascript\ncorrect image', () => {\n    const { getByTestId } = render();\n    const imageComponent = getByTestId('image-view');\n    expect(imageComponent.props.source).toBe(sampleItem.fileUrl || EmptyImage);\n  });\n\n  it('shows default message when subject is missing', () => {\n    const noSubjectItem = { ...sampleItem, subject: '' };\n    const { getByText } = render(noSubjectItem);\n    expect(getByText('IB_NO_SUBJECT')).toBeTruthy();\n  });\n\n  it('handles HTML content correctly', () => {\n    const htmlContentItem = { ...sampleItem, content: '<b>Bold Content</b><script>evilScript()</script>' };\n    const { getByText } = render(htmlContentItem);\n    expect(getByText('Bold ContentevilScript()')).toBeTruthy();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (itemVisitor - Part 3 - Code):\n```javascript\n>\n      )}\n\n      <RowWrapper>\n        <Symbol source={icons.location} />\n        <LeftValue text={`${item.fullUnitId}`} preset=\"medium\" />\n        <NextWrapper>\n          <Icon size={12} color=\"white\" name=\"chevron-forward\" />\n        </NextWrapper>\n      </RowWrapper>\n    </Wrapper>\n  );\n};\n\nexport default ItemVisitor;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (itemSurvey - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ItemSurvey from '../itemSurvey/index';\nconst mockStore = {\n  getState: jest.fn(() => ({\n    // Define the state object you want to use for testing\n    someValue: 'test value',\n    anotherValue: 123,\n  })),\n  dispatch: jest.fn(),\n};\n\ndescribe('ItemSurvey', () => {\n  const item = {\n    surveyId: 1,\n    name: 'Survey 1',\n    isSubmitted: false,\n    startDate: '2022-01-01T00:00:00.000Z',\n    endDate: '2022-01-31T00:00:00.000Z',\n    creationTime: '2022-01-15T00:00:00.000Z',\n    creatorUserName: 'John Doe',\n  };\n\n  it('renders survey information correctly', () => {\n    const { getByText } = render(<ItemSurvey item={item} />);\n    expect(getByText(`#${item.surveyId}`)).toBeDefined();\n    expect(getByText('COMMON_START_DATE')).toBeDefined();\n    expect(getByText('COMMON_END_DATE')).toBeDefined();\n    expect(getByText('SURVEY_SUBMITTED_DATE')).toBeDefined();\n    expect(getByText(item.creatorUserName)).toBeDefined();\n    expect(getByText(item.name)).toBeDefined();\n  });\n\n  it('calls action when pressed', () => {\n    const mockAction = jest.fn();\n    const { getByTestId } = render(<ItemSurvey item={item} action={mockAction} />);\n    fireEvent.press(getByTestId('item-survey'));\n    expect(mockAction).toHaveBeenCalled();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (momoPaymentMethod - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport MoMoPaymentMethod from '../../momo/momoPaymentMethod';\nimport { renderScreen } from '../../../../../__mocks__/mockApp';\n\nconst store = {\n  app: {\n    settingApp: {\n      allowOnlinePaymentMomo: {\n        viaWallet: true,\n        viaAtm: true,\n        viaCredit: true,\n      },\n    },\n  },\n};\n\nconst mockActions = {\n  account: {\n    visibleAuthModal: jest.fn(),\n    verifyAuthModal: jest.fn(),\n    logout: jest.fn(),\n  },\n};\n\nconst mockCallback = jest.fn();\nconst mockRoute = {\n  name: 'MoMoPaymentMethod',\n  params: {\n    params: {\n      totalAmount: 1000,\n    },\n    callback: mockCallback,\n  },\n};\n\ndescribe('MoMoPaymentMethod', () => {\n  beforeEach(() => {\n    global.useMockRoute = mockRoute;\n  });\n\n  const render = () =>\n    renderScreen(<MoMoPaymentMethod actions={mockActions} />)({\n      store,\n    });\n\n  it('renders payment method options', () => {\n    const { getByText } = render();\n\n    expect(getByText('PAYMENT_METHOD_MOMO')).toBeTruthy();\n    expect(getByText('PAYMENT_METHOD_ATM')).toBeTruthy();\n    expect(getByText('PAYMENT_METHOD_VISA')).toBeTruthy();\n  });\n\n  it('calls callback with selected method on confirm', () => {\n    const { getByText } = render();\n\n    fireEvent.press(getByText('PAYMENT_METHOD_VISA'));\n    fireEvent.press(getByText('COMMON_CONFIRM'));\n\n    expect(mockRoute.params.callback).toHaveBeenCalledWith('payWithCC');\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (scrollDownButton - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native';\nimport { Colors } from '@themes';\n\nconst CircleButton = styled(TouchableOpacity)`\n  align-self: center;\n  background-color: white;\n  box-shadow: 0px 3px 6px #00000029;\n  border-radius: 30px;\n  padding-vertical: 5px;\n  padding-horizontal: 8px;\n  position: absolute;\n  bottom: 30px;\n`;\n\nconst Icon = styled(Ionicons)`\n  margin-top: 3px;\n`;\n\nconst ScrollDownButton = ({ onPress }) => (\n  <CircleButton onPress={onPress}>\n    <Icon\n      testID=\"chevron-down-outline\"\n      color={Colors.azure}\n      name=\"chevron-down-outline\"\n      size={30}\n    />\n  </CircleButton>\n);\n\nexport default ScrollDownButton;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (librarySlider - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport LibrarySlider from '../librarySlider';\n\nconst mockList = {\n  data: [\n    { documentName: 'subject 1', content: 'libraryName 1' },\n    { documentName: 'subject 2', content: 'libraryName 2' },\n  ],\n  isRefresh: false,\n  isLoadMore: false,\n  currentPage: 1,\n  totalPage: 2,\n};\n\nconst mockOnViewAllNotices = jest.fn();\n\ndescribe('LibrarySlider', () => {\n  const renderNoticeSlider = () =>\n    renderScreen(<LibrarySlider list={mockList} onViewAllNotices={mockOnViewAllNotices} />)({\n      store: {\n        library: {\n          documents: mockList,\n        },\n      },\n    });\n\n  it('should render correctly when having data', () => {\n    const { getByText, getByTestId } = renderNoticeSlider();\n    const wraper = getByTestId('library-list');\n    const title = getByText('LB_TITLEHEADER');\n    expect(wraper).toBeTruthy();\n    expect(title).toBeTruthy();\n  });\n\n  it('should render the list of items when data is available', () => {\n    const { getByTestId } = renderNoticeSlider();\n    const appList = getByTestId('library-list');\n    expect(appList).toBeTruthy();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (termAndConditions - Part 1 - Code):\n```javascript\nimport React, { Fragment, useRef } from 'react';\nimport _ from 'lodash';\nimport styled from 'styled-components/native';\nimport { Platform, StyleSheet } from 'react-native';\nimport { WebView } from 'react-native-webview';\nimport { useRoute } from '@react-navigation/native';\nimport SegmentControl from '@components/segmentControl';\nimport { CheckBox } from '@components/Forms/FormCheckBox';\nimport BaseLayout from '@components/Layout/BaseLayout';\nimport { Colors } from '@themes';\nimport { Text } from '@components/Commons';\nimport NextTermButton from './nextButton';\nimport ScrollDownButton from './scrollDownButton';\n\nconst ButtonWrapper = styled.View`\n  background-color: white;\n  padding-bottom: 30px;\n  margin-top: 15px;\n`;\nconst CheckBoxTerm = styled(CheckBox).attrs(() => ({\n  containerStyle: {\n    marginLeft: 10,\n    marginRight: 15,\n  },\n}))``;\n\nconst Hint = styled(Text)`\n  font-size: 12px;\n  padding-vertical: 5px;\n  padding-horizontal: 10px;\n  background-color: ${Colors.default};\n`;\n\nconst TermAndConditions = ({ navigation }) => {\n  const { params } = useRoute();\n  const termAndConditions = params?.termAndConditions || [];\n  const hideLeftButton = params?.hideLeftButton;\n  const onAgree = params?.onAgree;\n\n  const [filter, setFilter] = React.useState({\n    groupIndex: 0,\n  });\n  const webViewRef = useRef();\n  const [selectedItems, setSelectedItems] = React.useState([]);\n  const [disabledAgree, setDisabledAgree] = React.useState(termAndConditions.map(() => true));\n\n  const isLastTab = filter.groupIndex === _.size(termAndConditions) - 1;\n  const disabledButton = disabledAgree.find((_item, index) => index === filter.groupIndex);\n \n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (detailPost - Part 1 - Code):\n```javascript\nimport React, { useState, useEffect, Fragment, useRef } from 'react';\nimport Connect from '@stores';\nimport _ from 'lodash';\nimport AppList from '@components/Lists/AppList';\nimport styled from 'styled-components/native';\nimport { DeviceEventEmitter, KeyboardAvoidingView, View } from 'react-native';\nimport BaseLayout from '@components/Layout/BaseLayout';\nimport ItemPost from '@components/socialCommunity/itemPost';\nimport CommentInput from '@components/socialCommunity/commentInput';\nimport ItemPostComment from '@components/socialCommunity/itemPostComment';\nimport ActionModal, { useActionModalHook } from '@components/actionModal';\nimport PostMoreModal from '@components/socialCommunity/postMoreModal';\nimport AlertNative from '@components/AlertNative';\nimport i18n from '@i18n';\nimport Clipboard from '@react-native-clipboard/clipboard';\nimport toast from '@utils/toast';\nimport { SOCIAL_COMMUNITY_POST_STATUS } from '@configs/constants';\nimport PostRejected from './PostRejected';\nimport { useRoute } from '@react-navigation/native';\nimport { Text } from '@components/Commons';\n\nconst BottomSafeArea = styled.SafeAreaView`\n  background-color: white;\n  padding-top: 10px;\n  padding-horizontal: 10px;\n`;\n\nconst Input = styled(CommentInput)`\n  margin-horizontal: 10px;\n`;\n\nconst CommentWrapper = styled.View`\n  padding-horizontal: 10px;\n`;\n\nconst BlockView = styled.View`\n  align-items: center;\n  font-size: 15px;\n`;\n\nconst DetailPost = ({ navigation, actions, userProfile: { user }, socialCommunity: { detailPost, comments } }) => {\n  const moreActionModal = useActionModalHook();\n  const commentActionModal = useActionModalHook();\n  const {params} = useRoute();\n\n  const [comment, setComment] = useState('');\n  const [commentSelected, setCommentSelected] = useState\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (itemVisitor - Part 2 - Unit Test):\n```javascript\n:30 01/02/2022')).toBeDefined();\n    expect(getByText('VS_OUT: 18:00 01/02/2022')).toBeDefined();\n  });\n\n  it('renders the unit ID', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('Unit 123')).toBeDefined();\n  });\n\n  it('calls the onPress function when pressed', () => {\n    const onPress = jest.fn();\n    const { getByTestId } = render(<ItemVisitor item={item} onPress={onPress} />);\n    fireEvent.press(getByTestId('item-visitor'));\n    expect(onPress).toHaveBeenCalled();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (emptySliderItem - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { ImageView, Text } from '@components/Commons';\nimport { Colors, Metric } from '@themes';\nimport { icons } from '@resources/icons';\n\nconst Wrapper = styled.View`\n  align-items: center;\n  margin-bottom: 20px;\n  width: ${Metric.ScreenWidth};\n`;\n\nconst Title = styled(Text)`\n  font-size: 18px;\n  color: ${Colors.azure};\n  margin-top: 10px;\n`;\n\nconst Content = styled(Text)`\n  color: ${Colors.azure};\n  margin-top: 10px;\n`;\n\nconst Icon = styled(ImageView)`\n  width: 25px;\n  height: 25px;\n`;\n\nconst EmptySliderItem = ({ title, content, icon }) => (\n  <Wrapper>\n    <Icon testID=\"icon-bell\" resizeMode=\"contain\" source={icon || icons.bell} />\n    {title && <Title preset=\"bold\" text={title} />}\n    {content && <Content text={content} />}\n  </Wrapper>\n);\n\nexport default EmptySliderItem;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (deviceItem - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport deviceIcon from '@resources/icons/phone.png';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { ImageView, Text } from '../../../../components/Commons';\n\nconst RowWrapper = styled.View`\n  flex-direction: row;\n  margin-top: 10px;\n`;\n\nconst Wrapper = styled(TouchableOpacity)`\n  background-color: white;\n  border-radius: 14px;\n  margin-bottom: 20px;\n  box-shadow: 0px 3px 6px #00000029;\n  elevation: 6;\n  padding-top: 16px;\n  padding-bottom: ${({ lines }) => (lines > 1 ? lines * 5 : 0)}px;\n  margin-top: ${({ index }) => (index === 0 ? 5 : 0)}px;\n  margin-horizontal: 15px;\n`;\n\nconst ItemWrapper = styled.View`\n  width: 90%;\n`;\n\nconst Device = styled(Text)`\n  font-size: 15px;\n  margin-top: 3px;\n`;\n\nconst CurrentDevice = styled(Text)`\n  text-align: right;\n  margin-right: 15px;\n  color: gray;\n`;\n\nconst DeviceIcon = styled(ImageView)`\n  width: 25px;\n  height: 25px;\n  margin-horizontal: 10px;\n  border-radius: 5px;\n`;\n\nconst DeviceItem = ({ item, index, isCurrentDevice, onPressItem }) => {\n  const textLines = 3;\n\n  return (\n    <Wrapper onPress={onPressItem} index={index} activeOpacity={onPressItem ? 0 : 1} lines={textLines}>\n      <RowWrapper>\n        <DeviceIcon resizeMode=\"cover\" source={deviceIcon} />\n        <ItemWrapper>\n          <Device text={item.deviceName} pres\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (tabDetailInfo - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { View } from 'react-native';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { Provider } from 'react-redux';\nimport TabDetailInfo from '../addOrEditVisitor/tabDetailInfo/index';\nimport mockStore from '../../../../__mocks__/mockStore';\n\nconst detailVisitor = {\n  visitorInformations: [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'johndoe@example.com',\n    },\n  ],\n  numberOfVisitors: 2,\n  registerTime: '2022-01-01T00:00:00',\n  registerCheckOutTime: '2022-01-01T01:00:00',\n  description: 'Test Description',\n  reasonForVisit: { id: 1, name: 'Test Reason' },\n};\n\nconst store = mockStore({\n  visitor: { detailVisitor, listType: [] },\n  file: { files: [] },\n});\n\n\ndescribe('TabDetailInfo', () => {\n  beforeEach(() => {\n    global.useMockRoute = {\n      params: {\n        id: '123',\n      },\n      name: 'EditVisitor',\n    };\n  });\n\n  const renderTabDetailInfo = () =>\n    render(\n      <Provider store={store}>\n        <View>\n          <TabDetailInfo {...commonProps} />\n        </View>\n      </Provider>\n    );\n\n  it('should render TabDetailInfo component', () => {\n    const { getByTestId } = renderTabDetailInfo();\n    const addOrEditVisitor = getByTestId('add-or-edit-visitor');\n    expect(addOrEditVisitor).toBeDefined();\n  });\n\n  it('should render visistors information', () => {\n    const { getByTestId } = renderTabDetailInfo();\n    const visitorInformation = getByTestId('visitor-informations');\n    expect(visitorInformation).toBeDefined();\n  });\n\n  it\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (noticeSlider - Part 2 - Code):\n```javascript\n('DetailInbox', { id });\n  };\n\n  return (\n    <SliderHeader title=\"NOTICES\" onViewAll={onViewAllNotices}>\n      <AppList testID=\"notice-list\" {...listProps} />\n    </SliderHeader>\n  );\n};\n\nexport default NoticeSlider;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (ItemNotice - Part 2 - Code):\n```javascript\n: LOGO;\n  const plainString = decode(item.content.replace(/(<[^>]+>)|(\\s\\s+)/g, ''));\n\n  const onTextLayout = ({ nativeEvent: { lines } }) => {\n    if (lines.length < 3) {\n      setTextLines(lines.length);\n    }\n  };\n  return (\n    <ButtonWrapper\n      testID=\"item-notice\"\n      index={index}\n      activeOpacity={1}\n      lines={textLines}\n      onPress={_onPress}\n      gestureHandler\n    >\n      <RowWrapper>\n        <Logo testID=\"image-view\" resizeMode=\"cover\" source={image} />\n        <ItemWrapper>\n          <ID text={item.subject ? item.subject : i18n.t('IB_NO_SUBJECT')} preset=\"bold\" />\n          <Content onTextLayout={onTextLayout} numberOfLines={3} text={plainString.length > 0 ? plainString : ''} />\n        </ItemWrapper>\n      </RowWrapper>\n    </ButtonWrapper>\n  );\n};\n\nexport default ItemNotice;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (itemVisitor - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ItemVisitor from '../ItemVisitor';\n\ndescribe('ItemVisitor', () => {\n  const item = {\n    code: '1234',\n    createdAt: '2022-02-01T10:00:00.000Z',\n    numberOfVisitors: 2,\n    reasonForVisit: { name: 'Delivery' },\n    fullUnitId: 'Unit 123',\n    registerTime: '2022-02-01T10:30:00.000Z',\n    registerCheckOutTime: '2022-02-01T11:00:00.000Z',\n  };\n\n  it('renders the item code', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('#1234')).toBeDefined();\n  });\n\n  it('renders the date and time', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('01/02/2022')).toBeDefined();\n    expect(getByText('5:00 PM')).toBeDefined();\n  });\n\n  it('renders the number of visitors and reason for visit', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('2 VS_VISITORS')).toBeDefined();\n    expect(getByText('Delivery')).toBeDefined();\n  });\n\n  it('renders the check-in and check-out times', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('VS_IN: 17:30 01/02/2022')).toBeDefined();\n    expect(getByText('VS_OUT: 18:00 01/02/2022')).toBe\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (tabDetailInfo - Part 4 - Code):\n```javascript\ndetailVisitor.visitorInformations,\n      numberOfVisitors: detailVisitor.numberOfVisitors,\n      registerTime: formatVisitorDateTime(detailVisitor.registerTime),\n      registerCheckOutTime: formatVisitorDateTime(detailVisitor.registerCheckOutTime),\n      description: detailVisitor.description,\n      reasonForVisit: detailVisitor.reasonForVisit.id,\n      visitorType: detailVisitor.visitorType,\n      images: files || [],\n    };\n  };\n\n  const baseLayoutProps = {\n    showBell: false,\n    title: isAddNew ? 'VS_NEW' : 'VS_EDIT',\n  };\n\n  if (!isAddNew && !detailVisitor) return <BaseLayout {...baseLayoutProps} />;\n\n  return (\n    <Formik\n      initialValues={{\n        registerTime: undefined,\n        registerCheckOutTime: undefined,\n        description: '',\n        reasonForVisit: 1,\n        numberOfVisitors: 0,\n        visitorInformations: [{}],\n        visitorType: 0,\n        images: [],\n        ...getInitialValuesForUpdate(),\n      }}\n      innerRef={formikRef}\n      enableReinitialize\n      validationSchema={validationSchema}\n      onSubmit={(values) => {\n        onSubmit(values);\n      }}\n    >\n      {(props) => {\n        const {\n          values: { visitorInformations },\n          handleSubmit,\n        } = props;\n\n        return (\n          <Form testID=\"add-or-edit-visitor\">\n            <AwareScrollView>\n              <CardWrapper>\n                <FormInput\n                  required\n                  editable={isAddNew}\n                  label=\"VS_NUM_OF_VISITOR\"\n                  placeholder=\"VS_NUM_OF_VISITOR\"\n                  name=\"numberOfVisitors\"\n                  keyboardType=\"number-pad\"\n                />\n                <FormRadioGroup\n                  required\n                  label=\"VISITOR_TYPE\"\n                  labelFirst={false}\n                  name=\"visitorType\"\n                  options={visitorTypes}\n                  editable={isAddNew}\n               \n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (detailPost - Part 4 - Code):\n```javascript\n'),\n          () => actions.socialCommunity.deleteComment(commentSelected.id),\n          i18n.t('AD_COMMON_YES'),\n          i18n.t('AD_COMMON_CANCEL')\n        );\n      },\n    });\n  }\n\n  const scrollToComment = (commentId) => {\n    const index = listData.findIndex((item) => item.id === Number(commentId));\n    if (index !== -1 && listRef.current) {\n      listRef.current.scrollToIndex({ index, animated: true });\n    }\n  };\n\n  const commentInputProps = {\n    value: comment,\n    onChangeText: setComment,\n    onSubmit: () => {\n      actions.socialCommunity.postComment({\n        postId: id,\n        content: comment,\n        // handle Local Item\n        creationTime: new Date(),\n        creatorUser: user,\n      });\n      setComment('');\n    },\n    inputRef,\n  };\n\n  const renderItem = (item) => (\n    <CommentWrapper>\n      <ItemPostComment\n        item={item}\n        onLongPress={() => {\n          commentActionModal.showModal();\n          setCommentSelected(item);\n        }}\n      />\n    </CommentWrapper>\n  );\n  const listHeaderComponent = React.useMemo(() => <ItemPost {...itemPostProps} />, [itemPostProps]);\n\n  const onScrollToIndexFailed = (info) => {\n    const wait = new Promise((resolve) => setTimeout(resolve, 500));\n    wait.then(() => {\n      listRef.current?.scrollToIndex({ index: info.index, animated: true });\n    });\n  };\n\n  const listProps = {\n    data: listData,\n    isRefresh: false,\n    isLoadMore,\n    currentPage,\n    totalPage,\n    loadData: getComments,\n    keyExtractor: (item) => item.id,\n    renderItem: ({ item }) => renderItem(item),\n    ListEmptyComponent: <View />,\n    ListHeaderComponent: listHeaderComponent,\n    listRef,\n    onScrollTo\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (librarySlider - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport AppList from '@components/Lists/AppList';\nimport styled from 'styled-components/native';\nimport { icons } from '@resources/icons';\nimport SliderHeader from '../sliderHeader';\nimport ItemDocument from '../../libraries/itemDocument';\nimport navigationServices from '../../../navigator/navigationServices';\nimport EmptySliderItem from '../emptySliderItem';\n\nconst Wrapper = styled.View`\n  padding-bottom: 10px;\n`;\n\nconst LibrarySlider = ({ list, downloadAndViewDocument }) => {\n  const { data, isRefresh, currentPage, totalPage } = list;\n\n  const onViewAll = () => {\n    navigationServices.navigate('Library');\n  };\n\n  const onOpenDocument = (item) => {\n    const file = item.file || {};\n    downloadAndViewDocument(file.fileUrl, file.fileName);\n  };\n\n  const listProps = {\n    data,\n    isRefresh,\n    isLoadMore: false,\n    currentPage,\n    totalPage,\n    horizontal: true,\n    directionalLockEnabled: true,\n    style: {paddingHorizontal: 10},\n    showsHorizontalScrollIndicator: false,\n    ListEmptyComponent: <EmptySliderItem icon={icons.library} title=\"LIBRARY_EMPTY_LIST\" />,\n    loadData: () => {},\n    keyExtractor: (item) => `${item.id}`,\n    renderItem: ({ item }) => (\n      <Wrapper>\n        <ItemDocument isHomePage item={item} onPress={() => onOpenDocument(item)} />\n      </Wrapper>\n    ),\n  };\n\n  return (\n    <SliderHeader onViewAll={onViewAll} title=\"LB_TITLEHEADER\">\n      <AppList testID=\"library-list\" {...listProps} />\n    </SliderHeader>\n  );\n};\n\nexport default LibrarySlider;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (noticeSlider - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport i18n from '@i18n';\nimport AppList from '@components/Lists/AppList';\nimport { View } from 'react-native';\nimport _ from 'lodash';\nimport NoticeSliderItem from './noticeSliderItem';\nimport NavigationServices from '../../../navigator/navigationServices';\nimport SliderHeader from '../sliderHeader';\nimport EmptySliderItem from '../emptySliderItem';\n\nconst NoticeSlider = ({ list }) => {\n  const { data, isRefresh, currentPage, totalPage } = list;\n\n  const onViewAllNotices = () => {\n    NavigationServices.navigate('Inbox');\n  };\n\n  const renderItem = (item) => (\n    <NoticeSliderItem\n      item={item}\n      onPress={() => {\n        openModalDetail(item.id);\n      }}\n    />\n  );\n\n\n  const listProps = {\n    data,\n    isRefresh,\n    isLoadMore: false,\n    currentPage,\n    totalPage,\n    horizontal: true,\n    directionalLockEnabled: true,\n    showsHorizontalScrollIndicator: false,\n    ListEmptyComponent: <EmptySliderItem title={'NOTICE_LIST_EMPTY_TITLE'} content={'NOTICE_LIST_EMPTY_CONTENT'} />,\n    ItemSeparatorComponent: () => <View style={{ width: 10 }} />,\n    ListHeaderComponent: () => <View style={{ width: 15 }} />,\n    ListFooterComponent: () => <View style={{ width: 15 }} />,\n    emptyMsg: i18n.t('NOTICES_EMPTY_MESSAGE'),\n    loadData: () => {},\n    keyExtractor: (item) => `${item.id}`,\n    renderItem: ({ item }) => renderItem(item),\n    contentContainerStyle: { marginTop: 10 },\n  };\n\n  const openModalDetail = (id) => {\n    NavigationServices.navigate('DetailInbox', { id });\n  };\n\n  return (\n    <SliderHeader title=\"NOTICES\" onViewAll={onViewAllNotices}>\n      <AppList testID=\"notice-list\" {...\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (emptySliderItem - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport EmptySliderItem from '../emptySliderItem';\n\ndescribe('EmptySliderItem', () => {\n  it('renders correctly', () => {\n    const { getByText, getByTestId } = renderScreen(<EmptySliderItem title={\"NOTICE_LIST_EMPTY_TITLE\"} content={\"NOTICE_LIST_EMPTY_CONTENT\"} />)();\n\n    expect(getByTestId('icon-bell')).toBeTruthy();\n    expect(getByText('NOTICE_LIST_EMPTY_TITLE')).toBeTruthy();\n    expect(getByText('NOTICE_LIST_EMPTY_CONTENT')).toBeTruthy();\n  });\n});\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (ItemNotice - Part 1 - Code):\n```javascript\nimport React, { useState } from 'react';\nimport styled from 'styled-components/native';\nimport IC_AVATAR_DF from '@resources/icons/avatar-default.png';\nimport LOGO from '@resources/icons/savillsLogo.png';\nimport { decode } from 'html-entities';\nimport i18n from '@i18n';\nimport { ImageView, Text } from '../../Commons';\nimport { Wrapper } from '../ItemCommon';\n\nconst RowWrapper = styled.View`\n  flex-direction: row;\n`;\n\nconst ButtonWrapper = styled(Wrapper)`\n  padding: 0px;\n  padding-top: 16px;\n  padding-bottom: ${({ lines }) => (lines > 1 ? lines * 5 : 0)}px;\n  margin-top: ${({ index }) => (index === 0 ? 5 : 0)}px;\n`;\n\nconst ItemWrapper = styled.View`\n  width: 90%;\n`;\nconst ID = styled(Text)`\n  font-size: 15px;\n  margin-bottom: 5px;\n  margin-top: -3px;\n`;\n\nconst Logo = styled(ImageView)`\n  width: 25px;\n  height: 25px;\n  margin-horizontal: 10px;\n  border-radius: 5px;\n`;\n\nconst Content = styled(Text)`\n  line-height: 18;\n  margin-right: 10px;\n`;\nconst ItemNotice = ({ item, onPress, index }) => {\n  const [textLines, setTextLines] = useState(3);\n  const _onPress = () => {\n    onPress(item.id);\n  };\n  const image = item.fileUrl ? (item.fileUrl?.mimeType !== 'application/pdf' ? item.fileUrl : IC_AVATAR_DF) : LOGO;\n  const plainString = decode(item.content.replace(/(<[^>]+>)|(\\s\\s+)/g, ''));\n\n  const onTextLayout = ({ nativeEvent: { lines\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (postSlider - Part 2 - Code):\n```javascript\nUrls) > 0 ? 1 : 10;\n    return (\n      <PostWapper\n        item={item}\n        onPress={() => gotoDetail(item)}\n        onMorePress={onMorePress}\n        hideSeeMore\n        isHome\n        maxLines={postMaxLines}\n      />\n    );\n  };\n\n  const listProps = {\n    data,\n    isRefresh,\n    isLoadMore,\n    currentPage,\n    totalPage,\n    horizontal: true,\n    directionalLockEnabled: true,\n    showsHorizontalScrollIndicator: false,\n    ListEmptyComponent: (\n      <View>\n        <Text>{i18n.t('POST_EMPTY_LIST')}</Text>\n      </View>\n    ),\n    emptyMsg: i18n.t('POST_EMPTY_LIST'),\n    loadData: getList,\n    keyExtractor: (item) => `${item.id}`,\n    renderItem: ({ item }) => renderItem(item),\n  };\n\n  const moreActionModalProps = {\n    ...moreActionModal,\n    item: selectedPost,\n  };\n\n  return size(data) ? (\n    <SliderHeader title=\"SOCIAL_COMMUNITY_TITLE\" onViewAll={onViewAllPost}>\n      <AppList testID=\"post-list\" {...listProps} />\n      <PostMoreModal {...moreActionModalProps} />\n    </SliderHeader>\n  ) : null;\n};\n\nexport default Connect(PostSlider);\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (nextButton - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport styled from 'styled-components/native';\nimport { TouchableOpacity } from 'react-native';\nimport { Text } from '@components/Commons';\nimport { Colors } from '@themes';\n\nconst NextButton = styled(TouchableOpacity)`\n  margin-bottom: 15px;\n  align-self: flex-end;\n  flex-direction: row;\n  margin-right: 10px;\n`;\n\nconst NextText = styled(Text)`\n  color: ${({ color }) => color};\n  margin-top: 2px;\n`;\n\nconst Icon = styled(Ionicons)`\n  margin-top: 3px;\n`\n\nconst NextTermButton = ({ disabled, onPressNextTerm, title, showIcon = true }) => (\n  <NextButton disabled={disabled} onPress={onPressNextTerm}>\n    <NextText showIcon preset=\"bold\" color={disabled ? Colors.textSemiGray : Colors.azure} text={title} />\n    {showIcon && (\n      <Icon\n        testID=\"chevron-forward-outline\"\n        color={disabled ? Colors.textSemiGray : Colors.azure}\n        name=\"chevron-forward-outline\"\n        size={14}\n      />\n    )}\n  </NextButton>\n);\n\nexport default NextTermButton;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (termAndConditions - Part 4 - Code):\n```javascript\n) : (\n          <Fragment>\n            {termAndConditions.map((item, index) => {\n              const checked = selectedItems.findIndex((child) => child.id === item.id) > -1;\n              const disabledCheckBox = disabledAgree.find((_item, checkBoxIdx) => index === checkBoxIdx);\n\n              return (\n                <CheckBoxTerm\n                  {...item}\n                  key={item.id}\n                  testID={`checkbox-${item.id}`}\n                  disabled={disabledCheckBox}\n                  labelFirst={false}\n                  label={item.checkboxLabel}\n                  value={checked}\n                  showRequiredMark\n                  onCheckBoxPress={() => checkItem(item)}\n                />\n              );\n            })}\n            <NextTermButton\n              showIcon={false}\n              title=\"TERM_CONDITION_BUTTON_AGREE\"\n              disabled={!allowAgree}\n              onPressNextTerm={onAgree}\n            />\n          </Fragment>\n        )}\n        <ScrollDownButton onPress={onPressScrollToBottom} />\n      </ButtonWrapper>\n    </BaseLayout>\n  );\n};\n\nexport default TermAndConditions;\n\nconst styles = StyleSheet.create({\n  webview: {\n    flex: 1,\n    marginHorizontal: 10,\n    marginTop: 10,\n  },\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (visitorScreen - Part 1 - Code):\n```javascript\nimport React, { useEffect, useState } from 'react';\nimport Connect from '@stores';\nimport i18n from '@i18n';\nimport { DeviceEventEmitter } from 'react-native';\nimport AppList from '@components/Lists/AppList';\nimport BaseLayout from '../../components/Layout/BaseLayout';\nimport FilterView from '../../components/filterView';\nimport ItemVisitor from '../../components/ItemApp/ItemVisitor';\nimport { Modules } from '../../configs/constants';\nimport NavigationServices from '../../navigator/navigationServices';\nimport { icons } from '../../resources/icons';\n\nconst Visitor = ({ actions, visitor }) => {\n  const list = visitor.list;\n\n  const [visibleFilter, setVisibleFilter] = useState(false);\n\n  const [textSearch, setTextSearch] = useState('');\n\n  useEffect(() => {\n    actions.visitor.getListType();\n    getList(1);\n    const subscriber = DeviceEventEmitter.addListener('UpdateListVisitor', () => getList(1));\n    return () => {\n      subscriber.remove();\n    };\n  }, []);\n\n  const { data, isRefresh, isLoadMore, currentPage, totalPage } = list;\n\n  const getList = (page, keyword = textSearch) => {\n    actions.visitor.getListVisitor('', page, keyword);\n  };\n\n  const onBtAddPress = () => {\n    NavigationServices.navigate('AddVisitor');\n  };\n\n  const onTextSearchChange = (text) => {\n    setTextSearch(text);\n    getList(1, text);\n  };\n\n  const gotoDetail = (item) => {\n    NavigationServices.navigate('EditVisitor', {\n      id: item.visitorId,\n    });\n  };\n\n  const renderItem = (item) => <ItemVisitor item={item} onPress={() => gotoDetail(item, 1)} />;\n\n  const listProps = {\n    data,\n    isRefresh,\n    isLoadMore,\n    currentPage,\n    totalPage,\n    emptyMsg: i18n.t('VS_EMPTY_TAB_CHECKIN\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (deviceReplaceModal - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Text } from '@components/Commons';\nimport withAppModal from '../../../../components/appModalHOC';\nimport DeviceItem from '../deviceItem';\n\nconst Wrapper = styled.View`\n  align-items: center;\n`;\n\nconst Title = styled(Text)`\n  margin-bottom: 10px;\n`;\n\nconst DeviceReplaceModal = ({ list, onPressItem, onClosePress }) => {\n  const onPress = (item) => {\n    onClosePress();\n    onPressItem(item);\n  };\n\n  return (\n    <Wrapper>\n      <Title text=\"REGISTER_DEVICE_REPLACE_WARNING\" />\n      {list.map((item, index) => (\n        <DeviceItem key={item.deviceCode} onPressItem={() => onPress(item)} item={item} index={index} />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default withAppModal(DeviceReplaceModal);\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (tabDetailInfo - Part 5 - Code):\n```javascript\n\n                  label=\"VISITOR_TYPE\"\n                  labelFirst={false}\n                  name=\"visitorType\"\n                  options={visitorTypes}\n                  editable={isAddNew}\n                />\n                {visitorInformations.length > 0 && (\n                  <>\n                    <VisitorWrapper center>\n                      <Text preset=\"bold\" text={i18n.t('VS_INFORMATION')} />\n                      <ButtonExpand expanded={expanded} onPress={setExpand} />\n                    </VisitorWrapper>\n                    <View>\n                      {visitorInformations.length > 0 && !expanded ? (\n                        <FieldArray\n                          name=\"visitorInformations\"\n                          render={() => (\n                            <View testID=\"visitor-informations\">\n                              {visitorInformations.map((_item, index) => {\n                                const firstItem = index === 0;\n                                return (\n                                  <View key={index.toString()}>\n                                    <FormInput\n                                      testID=\"visitor-name\"\n                                      required={firstItem}\n                                      editable={isAddNew}\n                                      rightButton={\n                                        !firstItem && isAddNew ? (\n                                          <ButtonClose\n                                            testID=\"remove-visitor-button\"\n                                            onPress={() => onPressRemoveVisitor(index)}\n                                          >\n                                            <Ionicons name=\"close-outline\" color={Colors.azure} size={20} />\n                                          </ButtonClose>\n                                        ) : null\n                                      }\n                                      label={i18n.t('VS_NEW_INFO_NAME', undefined, index + 1)}\n                                      placeholder=\"VS_NEW_INFO_NAME_HOLDER\"\n                                      name={`visitorInformations.${index}.name`}\n                                    />\n                                    <Row>\n                                      <FormInput\n                                        testID=\"visitor-phone\"\n                                        containerStyle={phoneInputStyles}\n                                        required={firstItem\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (momoPaymentMethod - Part 2 - Code):\n```javascript\n}\n      containerStyle={{ backgroundColor: 'white' }}\n      title=\"MOMO_PAYMENT_METHODS_TITLE\"\n    >\n      <Title preset=\"bold\" text=\"PAYMENT_ADD_PAYMENT_METHOD\" />\n      <Wrapper>\n        {paymentMethods.map((method) => (\n          <PaymentMethodItem\n            key={method.key}\n            method={method}\n            onSelect={setSelectedMethod}\n            isSelected={selectedMethod === method.key}\n          />\n        ))}\n      </Wrapper>\n\n      <Footer>\n        <Text preset=\"bold\" text=\"FEE_PAYMENT_DETAIL_TOTAL_AMOUNT\" />\n        <Text text={formatMoney(params.totalAmount)} />\n      </Footer>\n    </BaseLayout>\n  );\n};\n\nexport default Connect(MoMoPaymentMethod);\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (AddPost - Part 1 - Code):\n```javascript\nimport React, { useRef, useState } from 'react';\nimport styled from 'styled-components/native';\nimport { KeyboardAvoidingView, Platform } from 'react-native';\nimport Connect from '@stores';\nimport _ from 'lodash';\nimport Icon from 'react-native-vector-icons/Ionicons';\nimport BaseLayout from '@components/Layout/BaseLayout';\nimport { Colors } from '@themes';\nimport ImageAttachment from '@components/socialCommunity/ImageAttachment';\nimport i18n from '@i18n';\nimport SelectImageOptionsModal from '@components/SelectImageOptionsModal';\nimport Avatar from '@components/socialCommunity/avatar';\nimport { Text } from '@components/Commons';\nimport toast from '@utils/toast';\n\nconst Container = styled.View`\n  flex: 1;\n  background-color: white;\n`;\n\nconst PostContainer = styled.ScrollView`\n  flex: 1;\n  background-color: white;\n  padding: 10px;\n`;\n\nconst UserInfo = styled.View`\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nconst Username = styled(Text)`\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst PostInput = styled.TextInput`\n  font-size: 16px;\n  margin-bottom: 16px;\n  min-height: 100px;\n`;\n\nconst BottomBar = styled.View`\n  flex-direction: row;\n  justify-content: space-around;\n  background-color: #fff;\n  padding: 8px;\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n  box-shadow: 0px 3px 6px #00000029;\n  elevation: 3;\n`;\n\nconst BottomBarButton = styled.TouchableOpacity`\n  padding: 8px;\n`;\n\nconst BottomSafe\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (withMomoPayment - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport { Linking, DeviceEventEmitter } from 'react-native';\nimport Connect from '@stores';\nimport { MOMO_REQUEST_TYPE } from '@configs/constants';\nimport Momo from '@utils/momo';\nimport BasePaymentHOC from './basePaymentHOC';\nimport navigationServices from '../../../../navigator/navigationServices';\n\nexport default function withMomoPayment(WrappedComponent) {\n  class HOCComponent extends BasePaymentHOC {\n    constructor(props) {\n      super(props);\n      this.walletCallBackSubscriber = null;\n      this.paymentCallBackSubscriber = null;\n    }\n    componentDidMount() {\n      this.walletCallBackSubscriber = Linking.addEventListener('url', this.handleWalletCallback);\n      this.paymentCallBackSubscriber = DeviceEventEmitter.addListener('paymentCallBack', this.handlePaymentCallback);\n    }\n\n    componentWillUnmount() {\n      this.walletCallBackSubscriber.remove();\n      this.paymentCallBackSubscriber.remove();\n    }\n\n    componentDidUpdate(prevProps) {\n      const {\n        fee: { orderDetail },\n        route: { params },\n      } = this.props;\n      const { onSuccess } = params;\n\n      if (!prevProps.fee.orderDetail && orderDetail) {\n        if (orderDetail.status.code === 'SUCCESS') {\n          navigationServices.popTo('DetailFee');\n          onSuccess();\n          return;\n        }\n        this.showPaymentError(orderDetail.status.description);\n      }\n    }\n\n    handlePaymentCallback = () => {\n      const { momoOrderRequest } = this.props.fee;\n      const { requestId, orderId } = momoOrderRequest;\n      if (requestId && orderId) {\n        this.props.actions.fee.checkMomoResult({ requestId, orderId });\n      }\n    };\n\n    handleWalletCallback = ({ url }) => {\n      if (url && url.indexOf('payment/callback') > -1) {\n        this.handlePaymentCallback();\n      }\n    };\n\n    handlePaymentViaWallet = (listID) =>\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (postRejected - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp'; // Import your custom renderScreen function\nimport PostRejected from '../detailPost/PostRejected'; // Adjust the import path as necessary\n\ndescribe('PostRejected', () => {\n  it('renders correctly', () => {\n    const { getByText, getByTestId } = renderScreen(<PostRejected />)();\n    expect(getByText('POST_REJECTED_TITLE')).toBeTruthy();\n    expect(getByText('POST_REJECTED_CONTENT')).toBeTruthy();\n\n    const icon = getByTestId('postRejectedIcon');\n    expect(icon).toBeTruthy();\n  });\n});\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (visitorScreen - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { fireEvent, act } from '@testing-library/react-native';\nimport Visitor from '../index';\nimport { renderScreen } from '../../../../__mocks__/mockApp';\nimport NavigationServices from '../../../navigator/navigationServices';\nimport { mockList } from '../../../../__mocks__/mockStore';\n\ndescribe('Visitor screen', () => {\n  const renderVisitor = () => renderScreen(<Visitor />)();\n  it('should render the screen title', () => {\n    const { getByText } = renderVisitor();\n    const title = getByText('VS_HEADER_MODULE');\n    expect(title).toBeDefined();\n  });\n\n  it('should navigate to AddVisitor screen when the add button is pressed', () => {\n    const navigateMock = jest.fn();\n    jest.spyOn(NavigationServices, 'navigate').mockImplementation(navigateMock);\n    const { getByTestId } = renderVisitor();\n    // debug();\n    const addButton = getByTestId('add-button');\n    fireEvent.press(addButton);\n    expect(navigateMock).toHaveBeenCalledWith('AddVisitor');\n  });\n\n  it('should navigate to EditVisitor screen when an item is pressed', () => {\n    const navigateMock = jest.fn();\n    jest.spyOn(NavigationServices, 'navigate').mockImplementation(navigateMock);\n    const mockItem = {\n      visitorId: 1,\n    };\n    const { getByTestId } = renderScreen(<Visitor />)({\n      store: {\n        visitor: {\n          list: mockList([mockItem]),\n        },\n      },\n    });\n    const itemComponent = getByTestId('item-visitor');\n    fireEvent.press(itemComponent);\n    expect(navigateMock).toHaveBeenCalledWith('EditVisitor', { id: mockItem.visitorId });\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (withMomoPayment - Part 2 - Unit Test):\n```javascript\n('url', expect.any(Function));\n    expect(DeviceEventEmitter.addListener).toHaveBeenCalledWith('paymentCallBack', expect.any(Function));\n\n    unmount();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (hiddenItem - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport { Colors } from '@themes';\nimport { deviceTypes } from '@configs/constants';\nimport SwipeableButton from '@components/Commons/SwipeableButton';\n\nconst RowWrapper = styled.View`\n  flex-direction: row;\n  justify-content: center;\n  align-self: flex-end;\n  margin-top: 15px;\n  margin-right: 15px;\n`;\nconst Space = styled.View`\n  margin-horizontal: 5px;\n`;\n\nconst HiddenItem = ({ isCurrentDevice, item, changeDeviceType, removeDevice }) => {\n  const deviceType =\n    item.registerType === deviceTypes.primary ? 'BTN_CHANGE_TO_SECONDARY_DEVCE' : 'BTN_CHANGE_TO_PRIMARY_DEVCE';\n\n  return (\n    <RowWrapper>\n      <SwipeableButton color={Colors.azure} title={deviceType} icon=\"sync-outline\" onPress={() => changeDeviceType(item)} />\n      <Space />\n      <SwipeableButton disabled={isCurrentDevice} color={Colors.bgRed} title=\"BTN_REMOVE_DEVICE\" icon=\"trash-outline\" onPress={() => removeDevice(item)} />\n\n    </RowWrapper>\n  );\n};\n\nexport default HiddenItem;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (itemSurvey - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport styled from 'styled-components/native';\nimport moment from 'moment';\nimport { Text } from '../../Commons';\nimport { icons } from '../../../resources/icons';\nimport Configs from '../../../utils/configs';\nimport StatusView from '../../statusView';\nimport { HorizontalLine, ID, RowWrapper, VerticalLabelValue, Wrapper } from '../ItemCommon';\nimport { Colors } from '../../../themes';\n\nconst InfoWrapper = styled.View`\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 12px;\n`;\n\nconst UserIcon = styled.Image`\n  width: 15px;\n  height: 22px;\n  tint-color: ${Colors.azure};\n  margin-right: 12px;\n`;\n\nconst LeftValue = styled(Text)`\n  font-size: 12px;\n\n  flex: 1;\n`;\n\nconst RightValue = styled(Text)`\n  font-size: 12px;\n  margin-left: 12px;\n`;\n\nconst ItemSurvey = ({ item, action }) => {\n  const { name, isSubmitted, startDate, endDate, creationTime, creatorUserName } = item;\n  const status = {\n    name: !isSubmitted ? 'SV_TAB_SURVEY' : 'SV_TAB_SURVEYED',\n    colorCode: !isSubmitted ? '#58DECB' : '#FF9E9E',\n  };\n  const from = moment(startDate).format(Configs.DayTimeFormat);\n  const to = moment(endDate).format(Configs.DayTimeFormat);\n  const submittedDate = moment(creationTime).format(Configs.DayTimeFormat);\n  return (\n    <Wrapper onPress={action} testID=\"item-survey\">\n      <ID text={`#${item.surveyId}`} preset=\"bold\" />\n      <RowWrapper>\n        <VerticalLabelValue label=\"COMMON_START_DATE\" value={from} />\n        <VerticalLabelValue label=\"\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (termAndConditions - Part 2 - Unit Test):\n```javascript\n setParams({\n    termAndConditions: mockOneTerm,\n  });\n  it('renders last T&C', () => {\n    const { getByTestId, getByText } = renderTerm();\n    expect(getByTestId('termConditionView')).toBeTruthy();\n    expect(getByText('TERM_CONDITIONS_SCROLL_TO_AGREE')).toBeTruthy();\n    expect(getByTestId('checkbox')).toBeTruthy();\n    expect(getByText('TERM_CONDITION_BUTTON_AGREE')).toBeTruthy();\n  });\n\n  setParams({\n    termAndConditions: mockOneTerm,\n    onAgree,\n  });\n  it('renders last T&C & turn on CheckBox Agree', () => {\n    const { getByTestId, getByText } = renderTerm();\n    expect(getByTestId('termConditionView')).toBeTruthy();\n    expect(getByText('TERM_CONDITIONS_SCROLL_TO_AGREE')).toBeTruthy();\n    const buttonAgree = getByText('TERM_CONDITION_BUTTON_AGREE');\n\n    const checkBox = getByTestId('checkbox');\n\n    expect(checkBox).toBeTruthy();\n    fireEvent.press(checkBox);\n    fireEvent.press(buttonAgree);\n  });\n\n  clearParams();\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (withMomoPayment - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport Momo from '@utils/momo';\nimport { Linking, DeviceEventEmitter } from 'react-native';\nimport withMomoPayment from '../../feePaymentConfirm/paymentHOC/withMoMoPayment'; // Adjust the import path\nimport { renderScreen } from '../../../../../__mocks__/mockApp';\n\njest.mock('@utils/momo', () => ({\n  ensureExistedMomoApp: jest.fn(),\n}));\njest.mock('../../../../navigator/navigationServices', () => ({\n  navigate: jest.fn(),\n}));\n\nconst WrappedComponent = () => <></>;\nconst MockComponent = withMomoPayment(WrappedComponent);\n\ndescribe('withMomoPayment HOC', () => {\n  const mockCreateOrderMomo = jest.fn();\n  const mockCheckMomoResult = jest.fn();\n\n  const render = () =>\n    renderScreen(\n      <MockComponent\n        navigation={{ getParam: jest.fn(), goBack: jest.fn() }}\n        actions={{\n          fee: {\n            createOrderMomo: mockCreateOrderMomo,\n            checkMomoResult: mockCheckMomoResult,\n          },\n        }}\n        fee={{ orderDetail: null }}\n      />\n    )({});\n\n  beforeEach(() => {\n    jest.spyOn(Linking, 'addEventListener').mockImplementation(() => ({\n      remove: jest.fn(),\n    }));\n    jest.spyOn(DeviceEventEmitter, 'addListener').mockImplementation(() => ({\n      remove: jest.fn(),\n    }));\n    Momo.ensureExistedMomoApp.mockImplementation((callback) => callback());\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should add and remove event listeners on mount and unmount', () => {\n    const { unmount } = render();\n\n    expect(Linking.addEventListener).toHaveBeenCalledWith('url', expect.any(Function));\n    expect(DeviceEventEmitter.addListener).toHaveBeenCalledWith('paymentCallBack', expect.any(Function));\n\n    unmount();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (AddPost - Part 3 - Code):\n```javascript\n>\n        <PostContainer>\n          <UserInfo>\n            <Avatar size={40} />\n            <Username text={user?.displayName} />\n          </UserInfo>\n          <PostInput\n            multiline\n            maxLength={4000}\n            scrollEnabled={false}\n            placeholder={i18n.t('POST_CREATE_PLACEHOLDER')}\n            value={content}\n            onChangeText={setContent}\n            placeholderTextColor=\"gray\"\n          />\n          <ImageAttachment images={images} onDeleteImage={onDeleteImage} />\n        </PostContainer>\n        <KeyboardAvoidingView\n          behavior={Platform.OS === 'ios' ? 'padding' : null}\n          keyboardVerticalOffset={Platform.select({ ios: 130, android: 0 })}\n        >\n          <BottomBar>\n            <BottomBarButton onPress={btImagePress}>\n              <Icon name=\"image-outline\" size={24} color={Colors.azure} />\n            </BottomBarButton>\n            <BottomBarButton onPress={btCameraPress}>\n              <Icon name=\"camera\" size={24} color={Colors.azure} />\n            </BottomBarButton>\n          </BottomBar>\n        </KeyboardAvoidingView>\n      </Container>\n      <BottomSafeArea />\n      <SelectImageOptionsModal ref={pickerRef} allowSelectFile onSelectedImage={onSelectedImage} />\n    </BaseLayout>\n  );\n};\n\nexport default Connect(AddPost);\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (noticeSliderItem - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport { renderScreen } from '../../../../../__mocks__/mockApp';\nimport NoticeSliderItem from '../../noticeSlider/noticeSliderItem';\n\nconst mockItem = {\n  fileUrl: 'exampleImageUrl',\n  content: '<p>Sample content</p>',\n  subject: 'Sample Subject',\n};\n\nconst mockOnPress = jest.fn();\n\ndescribe('NoticeSliderItem', () => {\n  const renderItem = () => renderScreen(<NoticeSliderItem item={mockItem} onPress={mockOnPress} />)({ });\n\n  it('should render correctly', () => {\n    const { getByText } = renderItem();\n    const itemSubject = getByText('Sample Subject');\n    const itemContent = getByText('Sample content');\n    expect(itemSubject).toBeTruthy();\n    expect(itemContent).toBeTruthy();\n  });\n\n  it('should call onPress when notice is pressed', () => {\n    const { getByTestId } = renderItem();\n    const noticeOverlay = getByTestId('notice-overlay');\n    fireEvent.press(noticeOverlay);\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (tabDetailInfo - Part 6 - Code):\n```javascript\n\n                                    />\n                                    <Row>\n                                      <FormInput\n                                        testID=\"visitor-phone\"\n                                        containerStyle={phoneInputStyles}\n                                        required={firstItem}\n                                        editable={isAddNew}\n                                        label=\"VS_NEW_INFO_PHONE\"\n                                        keyboardType=\"number-pad\"\n                                        placeholder=\"VS_NEW_INFO_PHONE_HOLDER\"\n                                        name={`visitorInformations.${index}.phone`}\n                                      />\n                                      <FormInput\n                                        testID=\"visitor-id\"\n                                        containerStyle={IDInputStyles}\n                                        editable={isAddNew}\n                                        keyboardType=\"number-pad\"\n                                        label=\"VS_NEW_INFO_ID\"\n                                        maxLength={4}\n                                        placeholder=\"VS_NEW_INFO_ID_HOLDER\"\n                                        name={`visitorInformations.${index}.identityCardNumber`}\n                                      />\n                                    </Row>\n                                  </View>\n                                );\n                              })}\n                            </View>\n                          )}\n                        />\n                      ) : null}\n                    </View>\n                  </>\n                )}\n                {isAddNew && !expanded ? (\n                  <>\n                    <BtnAddWrapper center>\n                      <ButtonAdd testID=\"add-visitor-button\" onPress={onPressAddVisitor}>\n                        <Ionicons name=\"add-circle\" color={Colors.azure} size={20} />\n                      </ButtonAdd>\n                      <Text preset=\"bold\" text={i18n.t('VISITOR_ADD')} />\n                    </BtnAddWrapper>\n                  </>\n                ) : null}\n\n                <FormDate\n                  disabled={!isAddNew}\n                  label=\"VS_NEW_INFO_TIME1\"\n                  placeholder=\"VS_NEW_INFO_TIME1\"\n                  name=\"registerTime\"\n                  mode=\"datetime\"\n                />\n                <FormDate\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (addOrEditVisitor - Part 2 - Unit Test):\n```javascript\n=> {\n    const { getByText } = renderAddOrEditVisitor();\n    expect(getByText('VS_NEW')).toBeDefined();\n  });\n\n  afterEach(() => {\n    global.useMockRoute = {};\n  });\n});\n\ndescribe('AddOrEditVisitor', () => {\n  beforeEach(() => {\n    global.useMockRoute = {\n      params: {\n        visitorId: '123',\n      },\n      name: 'EditVisitor',\n    };\n  });\n\n  it('renders the visitor pass tab when editing an existing visitor', () => {\n    const { getByText } = renderAddOrEditVisitor();\n    expect(getByText('VISITOR_PASS')).toBeDefined();\n  });\n\n  it('changes the title to \"VS_EDIT\" when editing an existing visitor', () => {\n    const { getByText } = renderAddOrEditVisitor();\n    expect(getByText('VS_EDIT')).toBeDefined();\n  });\n\n  it('navigates to the visitor pass tab when clicking on the \"Visitor Pass\" tab', () => {\n    const { getByText } = renderAddOrEditVisitor();\n    fireEvent.press(getByText('VISITOR_PASS'));\n    expect(getByText('VISITOR_PASS')).toBeDefined();\n  });\n\n  afterEach(() => {\n    global.useMockRoute = {};\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (tabDetailInfo - Part 2 - Code):\n```javascript\n0,\n  },\n  {\n    label: i18n.t('VISITOR_TYPE_CONTRACTOR'),\n    value: 1,\n  },\n];\n\nconst TabDetailInfo = ({\n  actions,\n  visitor: { detailVisitor, listType },\n  file: { files },\n  units: { unitActive },\n  userProfile: { tenant },\n  app: {\n    settingApp: { dateTimeFormat },\n  },\n}) => {\n  const formikRef = useRef();\n\n  const route = useRoute();\n  const id = route.params?.id;\n  const isAddNew = route.name === 'AddVisitor';\n  const [expanded, setExpand] = useState(false);\n\n  useEffect(() => {\n    if (id) {\n      actions.visitor.detailVisitor(id);\n    }\n  }, [id]);\n\n  const requiredMessage = i18n.t('FORM_THIS_FIELD_IS_REQUIRED');\n\n  const validateVisitorInfo = (key, array, path, createError) => {\n    const data = array.filter((item, index) => array.length > 0 && index === 0 && !item.key)[0];\n    const haveData = data ? data[key] : false;\n    return haveData || createError({ path: `${path}.${0}.${key}`, message: requiredMessage });\n  };\n\n  const validationSchema = Yup.object().shape({\n    reasonForVisit: Yup.string().required(requiredMessage),\n    numberOfVisitors: Yup.number().required(requiredMessage).min(1, i18n.t('COMMON_VALIDATE_POSITIVE')),\n    visitorInformations: Yup.array()\n      .test('visitorInformations', requiredMessage, function () {\n        return validateVisitorInfo('name', this.parent.visitorInformations, this.path, this.createError);\n      })\n      .test('visitorInformations', requiredMessage, function () {\n        return validateVisitorInfo('phone', this.parent.visitorInformations, this.path, this.createError);\n      }),\n  });\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (itemPaymentMethod - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { fireEvent, render } from '@testing-library/react-native';\nimport PaymentMethodItem from '../../momo/momoPaymentMethod/ItemPaymentMethod';\n\ndescribe('PaymentMethodItem', () => {\n  const mockMethod = {\n    key: 'mockKey',\n    icon: 'mockIcon',\n    text: 'Mock Payment Method',\n  };\n\n  const mockOnSelect = jest.fn();\n\n  it('renders the payment method text', () => {\n    const { getByText } = render(<PaymentMethodItem method={mockMethod} onSelect={mockOnSelect} />);\n\n    expect(getByText(mockMethod.text)).toBeTruthy();\n  });\n\n  it('calls onSelect when pressed', () => {\n    const { getByText } = render(<PaymentMethodItem method={mockMethod} onSelect={mockOnSelect} />);\n\n    fireEvent.press(getByText(mockMethod.text));\n\n    expect(mockOnSelect).toHaveBeenCalledWith(mockMethod.key);\n  });\n\n  it('renders the radio button unchecked by default', () => {\n    const { queryByTestId } = render(<PaymentMethodItem method={mockMethod} onSelect={mockOnSelect} />);\n\n    expect(queryByTestId('radio-inner')).toBeFalsy();\n  });\n\n  it('renders the radio button checked when selected', () => {\n    const { getByTestId } = render(<PaymentMethodItem method={mockMethod} onSelect={mockOnSelect} isSelected />);\n\n    expect(getByTestId('radio-inner')).toBeTruthy();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (itemSurvey - Part 2 - Code):\n```javascript\n`#${item.surveyId}`} preset=\"bold\" />\n      <RowWrapper>\n        <VerticalLabelValue label=\"COMMON_START_DATE\" value={from} />\n        <VerticalLabelValue label=\"COMMON_END_DATE\" value={to} />\n      </RowWrapper>\n\n      <HorizontalLine />\n      <InfoWrapper>\n        <LeftValue text=\"SURVEY_SUBMITTED_DATE\" preset=\"medium\" />\n        <RightValue text={submittedDate} preset=\"medium\" />\n      </InfoWrapper>\n      <InfoWrapper>\n        <UserIcon source={icons.user} resizeMode=\"contain\" />\n        <LeftValue text={creatorUserName} preset=\"medium\" />\n        <RightValue text={name} preset=\"medium\" />\n      </InfoWrapper>\n\n      <StatusView status={status} />\n    </Wrapper>\n  );\n};\n\nexport default ItemSurvey;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (itemVisitor - Part 2 - Code):\n```javascript\nconst format = 'HH:mm DD/MM/YYYY';\n  const checkInTime = item.registerTime ? moment(item.registerTime).format(format) : undefined;\n  const checkOutTime = item.registerCheckOutTime ? moment(item.registerCheckOutTime).format(format) : undefined;\n\n  return (\n    <Wrapper onPress={onPress} testID=\"item-visitor\">\n      <ID text={`#${item.code}`} preset=\"bold\" />\n      <RowWrapper>\n        <VerticalLabelValue label=\"COMMON_DATE\" value={date} />\n        <VerticalLabelValue label=\"COMMON_TIME\" value={time} />\n      </RowWrapper>\n\n      <HorizontalLine />\n      {item.numberOfVisitors > 0 && (\n        <RowWrapper style={{ marginTop: 0 }}>\n          <Symbol resizeMode=\"contain\" source={icons.visitorAmounts} />\n          <LeftValue text={`${item.numberOfVisitors} ${i18n.t('VS_VISITORS')}`} preset=\"medium\" />\n          <RightValue text={`${item.reasonForVisit.name}`} preset=\"medium\" />\n        </RowWrapper>\n      )}\n      {(checkInTime || checkOutTime) && (\n        <RowWrapper>\n          {checkInTime && (\n            <>\n              <Symbol source={icons.nounTime} resizeMode=\"contain\" />\n              <LeftValue text={`${i18n.t('VS_IN')}: ${checkInTime}`} preset=\"medium\" />\n            </>\n          )}\n          {checkOutTime && (\n            <>\n              <Symbol source={icons.nounTime} resizeMode=\"contain\" />\n              <RightValue text={`${i18n.t('VS_OUT')}: ${checkOutTime}`} preset=\"medium\" />\n            </>\n          )}\n        </RowWrapper>\n      )}\n\n      <RowWrapper>\n        <Symbol source={icons.location} />\n        <LeftValue text={`${item.fullUnitId}`} preset=\"medium\" />\n        <NextWrapper\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (AddPost - Part 2 - Unit Test):\n```javascript\ncreateButton);\n\n    expect(mockActions.socialCommunity.createPost).not.toHaveBeenCalled();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (detailPost - Part 2 - Code):\n```javascript\n();\n  const commentActionModal = useActionModalHook();\n  const {params} = useRoute();\n\n  const [comment, setComment] = useState('');\n  const [commentSelected, setCommentSelected] = useState(null);\n  const [readyToScroll, setReadyToScroll] = useState(true);\n\n  const listRef = useRef(null);\n  const inputRef = useRef();\n\n  const id = params?.id;\n  const referenceId = params?.referenceId;\n  const fromComment = params?.fromComment;\n\n  const isPostOwner = user.id === detailPost?.creatorUserId;\n  const isCommentOwner = user.id === commentSelected?.creatorUser?.id;\n  let isPostRejected = true;\n  if (detailPost) {\n    isPostRejected = detailPost.statusId === SOCIAL_COMMUNITY_POST_STATUS.REJECTED;\n  }\n\n  const { data, isLoadMore, currentPage, totalPage } = comments;\n\n  const combineLocalAndRemoteComment = () =>\n    Object.values(\n      data.reduce((acc, item) => {\n        acc[item.id] = item; // last same id will overwrite the previous one\n        return acc;\n      }, {})\n    );\n\n  const listData = combineLocalAndRemoteComment();\n\n  useEffect(() => {\n    if (id) {\n      actions.socialCommunity.detailPost(id);\n      getComments();\n    }\n    const subscription = DeviceEventEmitter.addListener('ReloadListComment', getComments);\n    return () => {\n      subscription.remove();\n      actions.socialCommunity.clearDetailPost();\n    };\n  }, [id]);\n\n  useEffect(() => {\n    if (fromComment) {\n      inputRef.current?.focus();\n    }\n  }, [inputRef.current]);\n\n  useEffect(() => {\n    // Scroll to comment when navigate from Notification\n    if (referenceId && _.size(data) > 0 && listRef.current && readyToScroll) {\n      scrollToComment(referenceId);\n      setReadyToScroll(false);\n    }\n  }, [referenceId,\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (termAndConditions - Part 3 - Code):\n```javascript\n };\n\n  const baseLayoutProps = {\n    containerStyle: { backgroundColor: 'white' },\n    showLeftButton: !hideLeftButton,\n    title: 'COMMON_TERM_CONDITIONS',\n    navigation,\n    showBell: false,\n  };\n\n  const injectedJavaScript = `window.onscroll = function(ev) {\n    if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n       window.ReactNativeWebView.postMessage(\"scrollToEnd\")\n    }};`;\n\n  return (\n    <BaseLayout {...baseLayoutProps}>\n      {_.size(termAndConditions) > 1 && (\n        <SegmentControl\n          selectedIndex={filter.groupIndex}\n          values={termAndConditions.map((item) => item.label)}\n          onChange={onTabChange}\n        />\n      )}\n      {termAndConditions.map((item, index) => (\n        <Fragment key={item.label}>\n          {index === filter.groupIndex && (\n            <WebView\n              ref={webViewRef}\n              testID=\"termConditionView\"\n              style={styles.webview}\n              originWhitelist={['*']}\n              source={{ html: item.content }}\n              injectedJavaScript={injectedJavaScript}\n              onLoad={onWebViewLoad}\n              onMessage={onMessageReceived}\n              scalesPageToFit={Platform.OS === 'android'}\n              automaticallyAdjustContentInsets={false}\n              showsVerticalScrollIndicator\n            />\n          )}\n        </Fragment>\n      ))}\n\n      <Hint text=\"TERM_CONDITIONS_SCROLL_TO_AGREE\" />\n      <ButtonWrapper>\n        {!isLastTab ? (\n          <NextTermButton\n            disabled={disabledButton}\n            title=\"TERM_CONDITIONS_BTN_NEXT\"\n            onPressNextTerm={onPressNextTerm}\n          />\n        ) : (\n          <Fragment>\n            {termAndConditions.map((item, index) => {\n              const checked = selectedItems.findIndex((child) => child.id === item.id) > -1;\n```\n[/INST]", "answer": "-CodeGPT"}
