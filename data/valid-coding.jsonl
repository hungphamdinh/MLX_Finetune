{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`SwitchOffModal`):\n```javascript\nimport React from 'react';\nimport I18n from '@I18n';\nimport styled from 'styled-components/native';\nimport Row from '../../Grid/Row';\nimport { Button, Text } from '../../../Elements';\nimport { withModal } from '../../../HOC';\nimport { BIOMETRIC_STATUS } from '../../../Config/Constants';\nimport useUser from '../../../Context/User/Hooks/UseUser';\n\nconst ButtonWrapper = styled(Row)`\n  margin-top: 20px;\n  justify-content: space-around;\n`;\n\nconst Wrapper = styled.View`\n  padding-horizontal: 10px;\n`;\nconst SwitchOffModal = ({ onClosePress, onSuccess }) => {\n  const { updateUserBiometric } = useUser();\n\n  const switchOff = () => {\n    updateUserBiometric(BIOMETRIC_STATUS.OFF);\n    onSuccess();\n  };\n\n  return (\n    <Wrapper>\n      <Text text=\"SWITCH_OFF_BIOMETRIC_CONTENT\" />\n      <ButtonWrapper center>\n        <Button block info rounded title={I18n.t('COMMON_CANCEL')} onPress={onClosePress} />\n        <Button block primary rounded title={I18n.t('SWITCH_OFF')} onPress={switchOff} />\n      </ButtonWrapper>\n    </Wrapper>\n  );\n};\n\nexport default withModal(SwitchOffModal, 'COMMON_IMPORTANT_INFORMATION');\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport SwitchOffModal from '../SwitchOffModal';\n\ndescribe('SwitchOffModal', () => {\n  it('render without crash', () => {\n    render(<SwitchOffModal />);\n  });\n  it('should render the modal content correctly', () => {\n    const { getByText } = render(<SwitchOffModal />);\n    expect(getByText('SWITCH_OFF_BIOMETRIC_CONTENT')).toBeTruthy();\n    expect(getByText('COMMON_CANCEL')).toBeTruthy();\n    expect(getByText('SWITCH_OFF')).toBeTruthy();\n  });\n\n  it('should call onClosePress when cancel button is pressed', () => {\n    const onClosePressMock = jest.fn();\n    const { getByText } = render(\n      <SwitchOffModal onClosePress={onClosePressMock} setModalSwitchOffVisible={jest.fn()} />\n    );\n    const cancelButton = getByText('COMMON_CANCEL');\n    fireEvent.press(cancelButton);\n    expect(onClosePressMock).toHaveBeenCalled();\n  });\n\n  it('should call switchOff and turn off Modal when switch off button is pressed', () => {\n    const onSuccessMock = jest.fn();\n    const { getByText } = render(<SwitchOffModal onSuccess={onSuccessMock} />);\n    const switchOffButton = getByText('SWITCH_OFF');\n    fireEvent.press(switchOffButton);\n    expect(onSuccessMock).toHaveBeenCalled();\n  });\n});\n\n```"}
