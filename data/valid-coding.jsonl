{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport ItemOption from '../../landingPage/itemOption';\nimport { icons } from '../../../../resources/icons';\nimport { renderScreen } from '@Mock/mockApp';\n\ndescribe('ItemOption', () => {\n  const mockItem = { id: 1, icons: icons.selfRegistrationForm, label: 'Test Label' };\n  const mockOnPressItem = jest.fn();\n  it('renders correctly', () => {\n    const { getByText, getByTestId } = renderScreen(<ItemOption item={mockItem} onPressItem={mockOnPressItem} />)();\n    expect(getByText('Test Label')).toBeTruthy();\n    expect(getByTestId('item-option')).toBeTruthy();\n    expect(getByTestId('item-option-image')).toBeTruthy();\n  });\n  it('calls onPressItem when TouchableOpacity is pressed', () => {\n    const { getByTestId } = renderScreen(<ItemOption item={mockItem} onPressItem={mockOnPressItem} />)();\n    fireEvent.press(getByTestId('item-option'));\n    expect(mockOnPressItem).toHaveBeenCalledWith(mockItem);\n  });\n});\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { fireEvent, render } from '@testing-library/react-native';\nimport InspectionItem from './index';\n\ndescribe('InspectionItem', () => {\n  const mockOnItemPress = jest.fn();\n  const mockInspection = { property: { address: '123 Main St', name: 'Test Property', isActive: true } };\n  const mockWorkflow = { status: { name: 'Pending', colorCode: '#FFA500' }, subject: 'Test Inspection' };\n  it('renders the correct information', () => {\n    const { getByText } = render(<InspectionItem inspection={mockInspection} workflow={mockWorkflow} creationTime='2022-02-22T12:00:00Z' onItemPress={mockOnItemPress} syncState='synced' />);\n    expect(getByText('Test Inspection')).toBeTruthy();\n    expect(getByText('Test Property')).toBeTruthy();\n    expect(getByText('123 Main St')).toBeTruthy();\n    expect(getByText('Pending')).toBeTruthy();\n    expect(getByText('22/02/2022')).toBeTruthy();\n  });\n  it('calls onItemPress when pressed', () => {\n    const { getByTestId } = render(<InspectionItem inspection={mockInspection} workflow={mockWorkflow} creationTime='2022-02-22T12:00:00Z' onItemPress={mockOnItemPress} syncState='synced' />);\n    fireEvent.press(getByTestId('inspection-item'));\n    expect(mockOnItemPress).toHaveBeenCalled();\n  });\n});``` -CodeGPT\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport { renderScreen } from '@Mock/mockApp';\nimport NoticeSliderItem from '../../noticeSlider/noticeSliderItem';\n\ndescribe('NoticeSliderItem', () => {\n  const mockItem = { fileUrl: 'exampleImageUrl', content: '<p>Sample content</p>', subject: 'Sample Subject' };\n  const mockOnPress = jest.fn();\n  it('renders correctly', () => {\n    const { getByText } = renderScreen(<NoticeSliderItem item={mockItem} onPress={mockOnPress} />)();\n    expect(getByText('Sample Subject')).toBeTruthy();\n    expect(getByText('Sample content')).toBeTruthy();\n  });\n  it('calls onPress when notice is pressed', () => {\n    const { getByTestId } = renderScreen(<NoticeSliderItem item={mockItem} onPress={mockOnPress} />)();\n    fireEvent.press(getByTestId('notice-overlay'));\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\n  });\n});\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { renderScreen } from '@Mock/mockApp';\nimport EmptySliderItem from '../emptySliderItem';\n\ndescribe('EmptySliderItem', () => {\n  it('renders correctly', () => {\n    const { getByText, getByTestId } = renderScreen(<EmptySliderItem title='NOTICE_LIST_EMPTY_TITLE' content='NOTICE_LIST_EMPTY_CONTENT' />)();\n    expect(getByTestId('icon-bell')).toBeTruthy();\n    expect(getByText('NOTICE_LIST_EMPTY_TITLE')).toBeTruthy();\n    expect(getByText('NOTICE_LIST_EMPTY_CONTENT')).toBeTruthy();\n  });\n});\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { fireEvent, render } from '@testing-library/react-native';\nimport PaymentMethodItem from '../../momo/momoPaymentMethod/ItemPaymentMethod';\n\ndescribe('PaymentMethodItem', () => {\n  const mockMethod = { key: 'mockKey', icon: 'mockIcon', text: 'Mock Payment Method' };\n  const mockOnSelect = jest.fn();\n  it('renders the payment method text', () => {\n    const { getByText } = render(<PaymentMethodItem method={mockMethod} onSelect={mockOnSelect} />);\n    expect(getByText(mockMethod.text)).toBeTruthy();\n  });\n  it('calls onSelect when pressed', () => {\n    const { getByText } = render(<PaymentMethodItem method={mockMethod} onSelect={mockOnSelect} />);\n    fireEvent.press(getByText(mockMethod.text));\n    expect(mockOnSelect).toHaveBeenCalledWith(mockMethod.key);\n  });\n});\n-CodeGPT</s>"}
