{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (addOrEditVisitor - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport Connect from '@stores';\nimport _ from 'lodash';\nimport BaseLayout from '../../../components/Layout/BaseLayout';\nimport TabView from '../../../components/tabView';\nimport TabDetailInfo from './tabDetailInfo';\nimport TabPass from './tabPass';\nimport { useRoute } from '@react-navigation/native';\n\nconst AddOrEditVisitor = ({ navigation }) => {\n  const route = useRoute();\n  const isAddNew = route.name === 'AddVisitor';\n\n  const baseLayoutProps = {\n    showBell: false,\n    title: isAddNew ? 'VS_NEW' : 'VS_EDIT',\n  };\n\n  const components = [\n    {\n      view: <TabDetailInfo navigation={navigation} />,\n      label: 'VISITOR_DETAIL_INFO',\n    },\n  ];\n\n  if (!isAddNew) {\n    components.push({\n      view: <TabPass navigation={navigation} />,\n      label: 'VISITOR_PASS',\n    });\n  }\n\n  return (\n    <BaseLayout {...baseLayoutProps}>\n      <TabView child={components} />\n    </BaseLayout>\n  );\n};\n\nexport default Connect(AddOrEditVisitor);\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (noticeSlider - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport NoticeSlider from '../noticeSlider';\n\nconst mockList = {\n  data: [\n    {subject: 'subject 1', content: 'content 1'},\n    {subject: 'subject 2', content: 'content 2'},\n  ],\n  isRefresh: false,\n  isLoadMore: false,\n  currentPage: 1,\n  totalPage: 2,\n};\n\nconst mockOnViewAllNotices = jest.fn();\n\ndescribe('NoticeSlider', () => {\n  const renderNoticeSlider = () => renderScreen(<NoticeSlider list={mockList} onViewAllNotices={mockOnViewAllNotices} />)({});\n\n  it('should render correctly when having data', () => {\n    const { getByText, getByTestId} = renderNoticeSlider();\n    const wraper = getByTestId('notice-list');\n    const title = getByText('NOTICES');\n    expect(wraper).toBeTruthy();\n    expect(title).toBeTruthy();\n  });\n\n  it('should render the list of items when data is available', () => {\n    const { getByTestId } = renderNoticeSlider();\n    const appList = getByTestId('notice-list');\n    expect(appList).toBeTruthy();\n  });\n\n});\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (withMomoPayment - Part 2 - Code):\n```javascript\n}) => {\n      if (url && url.indexOf('payment/callback') > -1) {\n        this.handlePaymentCallback();\n      }\n    };\n\n    handlePaymentViaWallet = (listID) => {\n      Momo.ensureExistedMomoApp(() => {\n        this.props.actions.fee.createOrderMomo(listID, MOMO_REQUEST_TYPE.CAPTURE_WALLET);\n      });\n    };\n\n    choosePaymentMethod(params, callback) {\n      navigationServices.navigate('MoMoPaymentMethod', {\n        params,\n        callback,\n      });\n    }\n\n    createOrder = (listID, totalAmount) => {\n      const momoPaymentMethods = Momo.getPaymentMethods(this.props.app.settingApp?.allowOnlinePaymentMomo);\n      if (momoPaymentMethods.length === 1) {\n        this.handleSelectedPaymentMethod(momoPaymentMethods[0].key, listID);\n        return;\n      }\n      this.choosePaymentMethod(\n        {\n          listID,\n          totalAmount,\n        },\n        (method) => {\n          this.handleSelectedPaymentMethod(method, listID);\n        }\n      );\n    };\n\n    handleSelectedPaymentMethod = (method, listID) => {\n      if (method === MOMO_REQUEST_TYPE.CAPTURE_WALLET) {\n        this.handlePaymentViaWallet(listID);\n        return;\n      }\n      this.props.actions.fee.createOrderMomo(listID, method, this.handlePaymentCallback);\n    };\n\n    render() {\n      return <WrappedComponent {...this.getWrappedParams()} />;\n    }\n  }\n  return Connect(HOCComponent);\n}\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (tabDetailInfo - Part 2 - Unit Test):\n```javascript\nconst { getByTestId } = renderTabDetailInfo();\n    const visitorInformation = getByTestId('visitor-informations');\n    expect(visitorInformation).toBeDefined();\n  });\n\n  it('should do not show submit button', () => {\n    const { queryByTestId } = renderTabDetailInfo();\n    const submitButton = queryByTestId('submit-button');\n    expect(submitButton).toBeNull();\n  });\n\n  afterEach(() => {\n    global.useMockRoute = {};\n  });\n});\n\nconst commonProps = {\n  navigation: { state: { routeName: 'AddVisitor' } },\n  actions: {},\n  visitor: { detailVisitor, listType: [] },\n  file: { files: [] },\n  units: { unitActive: {} },\n  userProfile: { tenant: {} },\n  app: { settingApp: { dateTimeFormat: '' } },\n};\n\ndescribe('TabDetailInfo', () => {\n  beforeEach(() => {\n    global.useMockRoute = {\n      params: {\n        id: '123',\n      },\n      name: 'AddVisitor',\n    };\n  });\n  const renderAddVisitor = () =>\n    render(\n      <Provider store={store}>\n        <View>\n          <TabDetailInfo {...commonProps} />\n        </View>\n      </Provider>\n    );\n\n  test('should add a new visitor when the add visitor button is clicked', () => {\n    const { getByTestId } = renderAddVisitor();\n    const addVisitorButton = getByTestId('add-visitor-button');\n    fireEvent.press(addVisitorButton);\n    const visitorInformations = getByTestId('visitor-informations');\n    expect(visitorInformations.children.length).toBe(2);\n  });\n\n  test('should remove a visitor when the remove visitor button is clicked', async () => {\n    const { getByTestId } = renderAddVisitor();\n    const addVisitorButton = getByTestId('add-visitor-button');\n    fireEvent.press(addVisitorButton);\n    const removeVisitorButton = getByTestId('remove-visitor\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (listDeviceSection - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport ListDeviceSection from '../../deviceList/listDeviceSection';\n\ndescribe('ListDeviceSection', () => {\n  const deviceProps = {\n    devices: [\n      {\n        id: 1,\n        name: 'Device 1',\n      },\n      {\n        id: 2,\n        name: 'Device 2',\n      },\n    ],\n  };\n\n  const renderItem = (currentDeviceAmount, maxDeviceAmount) =>\n    renderScreen(\n      <ListDeviceSection\n        title=\"Device List\"\n        currentDeviceAmount={currentDeviceAmount}\n        maxDeviceAmount={maxDeviceAmount}\n        refreshing={false}\n        {...deviceProps}\n      />\n    )();\n\n  it('renders the component with the correct title and device count', () => {\n    const { getByText } = renderItem(2, 5);\n    expect(getByText('Device List (2/5):')).toBeTruthy();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (tabDetailInfo - Part 7 - Code):\n```javascript\nlabel=\"VS_NEW_INFO_TIME1\"\n                  placeholder=\"VS_NEW_INFO_TIME1\"\n                  name=\"registerTime\"\n                  mode=\"datetime\"\n                />\n                <FormDate\n                  disabled={!isAddNew}\n                  label=\"VS_NEW_INFO_TIME2\"\n                  placeholder=\"VS_NEW_INFO_TIME2\"\n                  name=\"registerCheckOutTime\"\n                  mode=\"datetime\"\n                />\n                <FormDropdown\n                  disabled={!isAddNew}\n                  required\n                  options={listType}\n                  label=\"VISITOR_PURPOSE_OF_VISIT\"\n                  placeholder=\"\"\n                  name=\"reasonForVisit\"\n                />\n                <FormInput editable={isAddNew} label=\"FB_PROBLEM\" placeholder=\"\" name=\"description\" multiline />\n                <FormDocumentPicker\n                  allowAddDocument={isAddNew}\n                  allowDeleteDocument={isAddNew}\n                  name=\"images\"\n                  label=\"COMMON_DOCUMENT\"\n                />\n                {isAddNew && (\n                  <Button testID=\"submit-button\" title=\"AD_COMMON_SAVE\" primary rounded onPress={handleSubmit} />\n                )}\n              </CardWrapper>\n            </AwareScrollView>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default Connect(TabDetailInfo);\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (noticeSliderItem - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport { View, TouchableOpacity } from 'react-native';\nimport IC_AVATAR_DF from '@resources/icons/avatar-default.png';\nimport LOGO from '@resources/icons/savillsLogo.png';\nimport { decode } from 'html-entities';\nimport { ImageView, Text } from '../../../Commons';\n\nconst NoticeSliderItem = ({ item, onPress }) => {\n  const image = item.fileUrl ? (item.fileUrl?.mimeType !== 'application/pdf' ? item.fileUrl : IC_AVATAR_DF) : LOGO;\n  const plainString = decode(item.content.replace(/(<[^>]+>)|(\\s\\s+)/g, ''));\n\n  return (\n    <TouchableOpacity testID=\"notice-overlay\" onPress={onPress}>\n      <View style={styles.container}>\n        <View>\n          <ImageView style={styles.image} source={image} resizeMode=\"cover\" />\n          <View>\n            <View style={styles.subjectBackground}>\n              <Text numberOfLines={1} style={styles.subject}>\n                {item.subject}\n              </Text>\n            </View>\n          </View>\n        </View>\n        <View style={styles.contentContainer}>\n          <View style={styles.contentWrapper}>\n            <Text numberOfLines={2} style={styles.content}>\n              {plainString}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = {\n  container: {\n    backgroundColor: 'white',\n    borderRadius: 14,\n    marginBottom: 20,\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    width: 300,\n  },\n  image: {\n    width: '100%',\n    height: 80\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (itemPaymentMethod - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport { Text } from '@components/Commons';\nimport styled from 'styled-components/native';\n\nconst MethodRow = styled.TouchableOpacity`\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 16px;\n`;\n\nconst Icon = styled.Image`\n  width: 30px;\n  height: 30px;\n  margin-right: 8px;\n`;\n\nconst MethodText = styled(Text)`\n  font-size: 16px;\n`;\n\nconst RadioOuterCircle = styled.View`\n  width: 18px;\n  height: 18px;\n  border-radius: 9px;\n  border-width: 1px;\n  border-color: #000;\n  margin-right: 10px;\n`;\n\nconst RadioInnerCircle = styled.View`\n  margin: 3px;\n  width: 10px;\n  height: 10px;\n  border-radius: 5px;\n  background-color: #000;\n`;\n\nconst RadioCircle = ({ isSelected }) => <RadioOuterCircle >{isSelected && <RadioInnerCircle testID=\"radio-inner\" />}</RadioOuterCircle>;\n\nconst PaymentMethodItem = ({ method, onSelect, isSelected }) => (\n  <MethodRow onPress={() => onSelect(method.key)}>\n    <RadioCircle isSelected={isSelected} />\n    <Icon source={method.icon} />\n    <MethodText text={method.text} />\n  </MethodRow>\n);\n\nexport default PaymentMethodItem;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (ItemNotice - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport { images } from '@resources/image';\nimport ItemNotice from '../ItemNotice';\n\nconst EmptyImage = images.emptyImage;\n\ndescribe('ItemNotice', () => {\n  const sampleItem = {\n    id: '1',\n    fileUrl: null,\n    content: 'Sample content',\n    subject: 'Sample Subject',\n  };\n  const onPressMock = jest.fn();\n  const render = (item = sampleItem) => renderScreen(<ItemNotice item={item} onPress={onPressMock} index={0} />)({});\n\n  it('renders correctly', () => {\n    const { getByText } = render();\n\n    expect(getByText('Sample Subject')).toBeTruthy();\n    expect(getByText('Sample content')).toBeTruthy();\n  });\n\n  it('handles onPress', () => {\n    const { getByTestId } = render();\n\n    fireEvent.press(getByTestId('item-notice'));\n    expect(onPressMock).toHaveBeenCalledWith(sampleItem.id);\n  });\n\n  it('handles short content correctly', () => {\n    const shortContentItem = { ...sampleItem, content: 'Short content' };\n    const { getByText } = render(shortContentItem);\n    expect(getByText('Short content')).toBeTruthy();\n  });\n\n  it('handles long content correctly', () => {\n    const longContent = 'L'.repeat(50);\n    const longContentItem = { ...sampleItem, content: longContent };\n    const { getByText } = render(longContentItem);\n    expect(getByText(longContent.substring(0, 50))).toBeTruthy();\n  });\n\n  it('displays the correct image', () => {\n    const { getByTestId } = render();\n    const imageComponent = getByTestId('image-view');\n    expect(imageComponent.props.source).toBe(sampleItem.file\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (AddPost - Part 2 - Code):\n```javascript\n000029;\n  elevation: 3;\n`;\n\nconst BottomBarButton = styled.TouchableOpacity`\n  padding: 8px;\n`;\n\nconst BottomSafeArea = styled.SafeAreaView`\n  background-color: white;\n`;\n\nconst AddPost = ({ actions, userProfile: { user }, units: { unitActive } }) => {\n  const [content, setContent] = useState('');\n  const [images, setImages] = useState([]);\n  const pickerRef = useRef();\n\n  const btImagePress = () => {\n    pickerRef.current?.showLibraryPicker();\n  };\n\n  const onSelectedImage = (newImages) => {\n    setImages([...images, ...newImages]);\n  };\n\n  const btCameraPress = () => {\n    pickerRef.current?.openCamera();\n  };\n\n  const onDeleteImage = (index) => {\n    const newImages = _.cloneDeep(images);\n    newImages.splice(index, 1);\n    setImages(newImages);\n  };\n\n  const onSubmit = () => {\n    if (images.length > 10) {\n      toast.showError('POST_CREATE_IMAGE_LIMIT');\n      return;\n    }\n    actions.socialCommunity.createPost({\n      content,\n      images,\n      unitId: unitActive.unitId,\n      memberRole: unitActive.memberRole,\n    });\n  };\n\n  const baseLayoutProps = {\n    title: 'POST_CREATE_TITLE',\n    showBell: false,\n    rightBtn: {\n      text: 'SOCIAL_COMMUNITY_POST_CREATE_BUTTON',\n      disabled: _.isEmpty(content) && _.isEmpty(images),\n      onPress: onSubmit,\n      testID: 'btCreate',\n    },\n  };\n\n  return (\n    <BaseLayout {...baseLayoutProps}>\n      <Container>\n        <PostContainer>\n          <UserInfo>\n            <Avatar size={40} />\n            <Username text={user?.displayName} />\n          </UserInfo>\n          <PostInput\n            mult\n```\n[/INST]", "answer": "-CodeGPT"}
