{"text": "You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\n\nGenerate a unit test for the following React Native component (`sectionName`):\n```javascript\nimport React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport { IconButton, Text } from '@Elements';\nimport Row from '@Components/Grid/Row';\nimport { Colors } from '@Themes';\nimport { FormInput } from '@Components/Forms';\nimport { modal } from '@Utils';\n\nimport _ from 'lodash';\n\nconst SectionInput = styled(FormInput)`\n  width: 80%;\n`;\n\nconst SectionName = ({ item, onRemoveSection, index, name, updateField }) => {\n  const [allowEdit, setAllowEdit] = React.useState(false);\n  const [sectionName, setSectionName] = React.useState(item.name);\n  const fieldName = `${name}.${index}`;\n\n  const removeSection = () => {\n    onRemoveSection(index);\n  };\n\n  const changeAllowEdit = () => {\n    if (!_.size(sectionName)) {\n      modal.showError('FORM_THIS_FIELD_IS_REQUIRED');\n      return;\n    }\n    setAllowEdit(!allowEdit);\n    updateField(index, {\n      name: sectionName,\n    });\n  };\n\n  const onChangeText = (text) => {\n    setSectionName(text);\n  };\n\n  return (\n    <Fragment>\n      {!allowEdit ? (\n        <Text preset=\"bold\" text={item.name} />\n      ) : (\n        <SectionInput testID=\"textInput\" onChangeText={onChangeText} mode=\"small\" label=\"\" name={`${fieldName}.name`} />\n      )}\n      <Row>\n        <IconButton\n          testID=\"buttonCreate\"\n          onPress={changeAllowEdit}\n          name={allowEdit ? 'save-outline' : 'create-outline'}\n          size={20}\n          color={Colors.azure}\n        />\n        <IconButton testID=\"buttonRemove\" onPress={removeSection} name=\"close-circle\" size={20} color={Colors.azure} />\n      </Row>\n    </Fragment>\n  );\n};\n\nexport default SectionName;\n\n```\n\nUnit Test:\n```javascript\nimport React from 'react';\nimport { modal } from '@Utils';\nimport { fireEvent } from '@testing-library/react-native';\nimport { renderScreen, mockFormProvider } from '@Mock/mockApp';\nimport SectionName from '../Sections/SectionName';\n\njest.mock('@Context/User/Hooks/UseUser');\n\nconst item = {\n  name: 'Master Section',\n};\n\nconst props = {\n  item,\n  onRemoveSection: jest.fn(),\n  index: 0,\n  name: 'Master Section',\n  updateField: jest.fn(),\n};\n\nconst SectionsProvider = () => mockFormProvider(<SectionName {...props} />)({});\n\nconst render = () => renderScreen(<SectionsProvider />)();\n\ndescribe('Section Name', () => {\n  it('renders correctly', () => {\n    const { getByText } = render();\n    expect(getByText(item.name)).toBeTruthy();\n  });\n\n  it('allows toggling edit mode', () => {\n    const { queryByText, getByTestId } = render();\n\n    // Assume 'create-outline' is the role or text content for the edit button\n    const editButton = getByTestId('buttonCreate', { name: /create-outline/i });\n    fireEvent.press(editButton);\n\n    // Check if the input appears\n    const input = queryByText(item.name);\n    expect(input).not.toBeTruthy(); // The name text should not be visible in edit mode\n\n    const saveButton = getByTestId('buttonCreate', { name: /save-outline/i });\n    expect(saveButton).toBeTruthy();\n  });\n\n  it('handles text change and saving correctly', () => {\n    const { getByTestId } = render();\n    fireEvent.press(getByTestId('buttonCreate', { name: /create-outline/i }));\n\n    const input = getByTestId('textInput');\n    fireEvent.changeText(input, 'New Section Name');\n\n    fireEvent.press(getByTestId('buttonCreate', { name: /save-outline/i }));\n    expect(props.updateField).toHaveBeenCalledWith(props.index, { name: 'New Section Name' });\n  });\n\n  it('removes section on remove button click', () => {\n    const { getByTestId } = render();\n    const removeButton = getByTestId('buttonRemove', { name: /close-circle/i });\n    fireEvent.press(removeButton);\n    expect(props.onRemoveSection).toHaveBeenCalledWith(props.index);\n  });\n\n  it('shows error when trying to save empty name', () => {\n    const { getByTestId } = render();\n    fireEvent.press(getByTestId('buttonCreate', { name: /create-outline/i }));\n\n    const input = getByTestId('textInput');\n    fireEvent.changeText(input, '');\n\n    fireEvent.press(getByTestId('buttonCreate', { name: /save-outline/i }));\n\n    expect(modal.showError).toHaveBeenCalledWith('FORM_THIS_FIELD_IS_REQUIRED');\n  });\n});\n\n```"}
