{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (termAndConditions - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport { renderScreen } from '../../../../__mocks__/mockApp';\nimport TermAndConditions from '..';\n\nconst mockMultipleTerm = [\n  {\n    label: 'Term 1',\n    content: '<p>Content 1</p>',\n    checkboxLabel: 'Agree to Term 1',\n  },\n  {\n    label: 'Term 2',\n    content: '<p>Content 2</p>',\n    checkboxLabel: 'Agree to Term 2',\n  },\n];\n\nconst mockOneTerm = [\n  {\n    label: 'Term 1',\n    content: '<p>Content 1</p>',\n    checkboxLabel: 'Agree to Term 1',\n  },\n];\n\nconst onAgree = jest.fn();\n\nfunction setParams(params) {\n  beforeEach(() => {\n    global.useMockRoute = {\n      params,\n      name: 'TermAndConditions',\n    };\n  });\n}\n\nfunction clearParams() {\n  afterEach(() => {\n    global.useMockRoute = {};\n  });\n}\n\nconst renderTerm = () => renderScreen(<TermAndConditions />)({});\n\ndescribe('TermAndConditions', () => {\n  setParams({\n    termAndConditions: mockMultipleTerm,\n  });\n\n  it('renders the component correctly', () => {\n    const { getByTestId, getByText } = renderTerm();\n    expect(getByTestId('termConditionView')).toBeTruthy();\n    expect(getByText('TERM_CONDITIONS_SCROLL_TO_AGREE')).toBeTruthy();\n    expect(getByText('TERM_CONDITIONS_BTN_NEXT')).toBeTruthy();\n  });\n\n  clearParams();\n});\n\ndescribe('TermAndConditions', () => {\n  setParams({\n    termAndConditions: mockOneTerm,\n  });\n  it('renders last T&C', () => {\n    const { getByTestId, getByText } = renderTerm();\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (momoWebView - Part 1 - Code):\n```javascript\nimport React from 'react';\nimport { Platform, DeviceEventEmitter } from 'react-native';\nimport { useRoute } from '@react-navigation/native';\nimport { WebView } from 'react-native-webview';\nimport BaseLayout from '@components/Layout/BaseLayout';\nimport navigationServices from '../../../../navigator/navigationServices';\n\nconst MoMoWebView = () => {\n  const {\n    params: { url },\n  } = useRoute();\n\n  const onNavigationStateChange = (newNavState) => {\n    const { url: newUrl } = newNavState;\n    if (newUrl.includes('propertycube.asia')) {\n      navigationServices.popTo('FeePaymentConfirm');\n      DeviceEventEmitter.emit('paymentCallBack');\n    }\n  };\n\n  const baseLayoutProps = {\n    title: 'MOMO_PAYMENT',\n    showBell: false,\n  };\n\n  return (\n    <BaseLayout {...baseLayoutProps}>\n      <WebView\n        testID=\"webview\"\n        originWhitelist={['*']}\n        source={{ uri: url }}\n        scalesPageToFit={Platform.OS === 'android'}\n        automaticallyAdjustContentInsets={false}\n        showsVerticalScrollIndicator={false}\n        onNavigationStateChange={onNavigationStateChange}\n      />\n    </BaseLayout>\n  );\n};\n\nexport default MoMoWebView;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (listDeviceSection - Part 1 - Code):\n```javascript\nimport React, { Fragment } from 'react';\nimport AppSwipeList from '@components/Lists/AppSwipeList';\nimport styled from 'styled-components/native';\nimport { View } from 'react-native';\nimport i18n from '@i18n';\nimport { Text } from '@components/Commons';\n\nconst Title = styled(Text)`\n  text-transform: capitalize;\n  margin-horizontal: 16px;\n  font-weight: bold;\n  margin-vertical: 8px;\n`;\n\nconst ListDeviceSection = ({ title, currentDeviceAmount, maxDeviceAmount, ...deviceProps }) => (\n  <Fragment>\n    <Title>\n      {i18n.t(title)} ({currentDeviceAmount}/{maxDeviceAmount}):\n    </Title>\n    <View>\n      <AppSwipeList {...deviceProps} />\n    </View>\n  </Fragment>\n);\n\nexport default ListDeviceSection;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (tabDetailInfo - Part 3 - Code):\n```javascript\n     .test('visitorInformations', requiredMessage, function () {\n        return validateVisitorInfo('phone', this.parent.visitorInformations, this.path, this.createError);\n      }),\n  });\n\n  const onPressAddVisitor = () => {\n    const { values } = formikRef.current;\n    formikRef.current.setFieldValue('visitorInformations', [...values.visitorInformations, {}]);\n  };\n\n  const onPressRemoveVisitor = (index) => {\n    const { values } = formikRef.current;\n    formikRef.current.setFieldValue(\n      'visitorInformations',\n      values.visitorInformations.filter((_item, idx) => idx !== index)\n    );\n  };\n\n  const onSubmit = async ({ images, registerTime, registerCheckOutTime, reasonForVisit, ...values }) => {\n    const checkInTime = registerTime ? moment(registerTime, dateTimeFormat).toDate() : registerTime;\n    const checkOutTime = registerCheckOutTime\n      ? moment(registerCheckOutTime, dateTimeFormat).toDate()\n      : registerCheckOutTime;\n\n    actions.visitor.createVisitor({\n      ...values,\n      unitId: unitActive.unitId,\n      buildingId: unitActive.buildingId,\n      floorId: unitActive.floorId,\n      fullUnitId: unitActive.fullUnitCode,\n      imageList: images,\n      tenantId: tenant.id,\n      registerTime: checkInTime,\n      registerCheckOutTime: checkOutTime,\n      reasonForVisit: { id: reasonForVisit },\n    });\n  };\n\n  const formatVisitorDateTime = (dateStr) => (dateStr ? moment(dateStr).toDate() : undefined);\n\n  const getInitialValuesForUpdate = () => {\n    if (isAddNew) {\n      return {};\n    }\n\n    return {\n      visitorInformations: detailVisitor.visitorInformations,\n      numberOfVisitors: detailVisitor.numberOfVisitors,\n      registerTime: formatVisitorDateTime(detailVisitor.registerTime),\n      registerCheckOutTime: formatVisitorDateTime(\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (selfRegistration - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport SelfRegistrationSetting from '../../../subSetting/selfRegistration';\nimport { renderScreen } from '../../../../../../__mocks__/mockApp';\nimport navigationServices from '../../../../../navigator/navigationServices';\n\nconst mockStore = {\n  selfRegistration: { curUnitAuthenticationCode: '123456' },\n  userProfile: { user: { emailAddress: 'test@example.com' } },\n};\n\nconst mockActions = {\n  selfRegistration: {\n    verifyEmailCodeForMembers: jest.fn(),\n  },\n};\n\nconst render = () =>\n  renderScreen(<SelfRegistrationSetting />)({\n    store: mockStore,\n    actions: mockActions,\n  });\n\ndescribe('Setting', () => {\n  it('renders Setting correctly', () => {\n    const { getByText } = render();\n\n    expect(getByText('PROFILE_BTN_SELF_REGISTRATION')).toBeTruthy();\n    expect(getByText('PROFILE_BTN_ADD_MORE_MEMBERS')).toBeTruthy();\n  });\n\n  it('navigates to UnitAuthCode screen on pressing Unit Auth Code', () => {\n    const { getByText } = render();\n    fireEvent.press(getByText('UNIT_AUTH_CODE'));\n    expect(navigationServices.navigate).toHaveBeenCalledWith('UnitAuthCode');\n  });\n\n  it('navigates to VerifyCodeAndEmailForUnits screen on pressing Add More Unit', () => {\n    const { getByText } = render();\n    fireEvent.press(getByText('PROFILE_BTN_ADD_MORE_UNITS'));\n    expect(navigationServices.navigate).toHaveBeenCalledWith('VerifyCodeAndEmailForUnits', {\n      emailAddress: 'test@example.com',\n    });\n  });\n\n  it('enable to press Add More Member', () => {\n    const { getByText } = render();\n    fireEvent.press(getByText('PROFILE_BTN_ADD_MORE_MEMBERS'));\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (selfRegistration - Part 2 - Code):\n```javascript\nCodeAndEmailForUnits', {\n        emailAddress: user.emailAddress,\n      });\n      return;\n    }\n\n    navigationServices.navigate(item.screen);\n  };\n\n  const renderSettingItem = (item) => {\n    if (item.screen === 'SetupPinCode' && hasPinCode) {\n      item.screen = 'ChangePinCode';\n      item.title = 'BTN_CHANGE_PIN';\n    }\n\n    if (item.screen === 'ForgotPinCode' && !hasPinCode) {\n      return null;\n    }\n\n    return <ItemSetting key={item.title} title={item.title} icon={item.icon} onPress={() => onItemPress(item)} />;\n  };\n\n  return (\n    <BaseLayout showBell={false} title=\"PROFILE_BTN_SELF_REGISTRATION\">\n      <AwareScrollView>\n        {data.map((item) => (\n          <Fragment key={item.title}>{renderSettingItem(item)}</Fragment>\n        ))}\n      </AwareScrollView>\n    </BaseLayout>\n  );\n};\n\nexport default Connect(SelfRegistrationSettings);\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (detailPost - Part 5 - Code):\n```javascript\n) => item.id,\n    renderItem: ({ item }) => renderItem(item),\n    ListEmptyComponent: <View />,\n    ListHeaderComponent: listHeaderComponent,\n    listRef,\n    onScrollToIndexFailed,\n  };\n\n  if (!detailPost) {\n    return <BaseLayout {...baseLayoutProps} />;\n  }\n\n  return (\n    <BaseLayout {...baseLayoutProps}>\n      {isPostRejected ? (\n        <PostRejected detailPost={detailPost} />\n      ) : (\n        <Fragment>\n          <AppList {...listProps} />\n          {!detailPost.isTurnOffComment ? (\n            <KeyboardAvoidingView\n              enabled\n              behavior={Platform.OS === 'ios' ? 'padding' : null}\n              keyboardVerticalOffset={Platform.select({ ios: 140, android: 0 })}\n            >\n              <Input {...commentInputProps} />\n            </KeyboardAvoidingView>\n          ) : (\n            <BlockView>\n              <Text text=\"POST_COMMENT_BLOCK\" />\n            </BlockView>\n          )}\n          <BottomSafeArea />\n          <ActionModal {...commentActionModalProps} />\n          <PostMoreModal {...moreActionModalProps} />\n        </Fragment>\n      )}\n    </BaseLayout>\n  );\n};\n\nexport default Connect(DetailPost);\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nGenerate a unit test for the following React Native component (deviceItem - Part 2 - Code):\n```javascript\n: 1} lines={textLines}>\n      <RowWrapper>\n        <DeviceIcon resizeMode=\"cover\" source={deviceIcon} />\n        <ItemWrapper>\n          <Device text={item.deviceName} preset=\"bold\" />\n          <CurrentDevice text={isCurrentDevice ? 'CURRENT_DEVICE' : ''} />\n        </ItemWrapper>\n      </RowWrapper>\n    </Wrapper>\n  );\n};\n\nexport default DeviceItem;\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (deviceReplaceModal - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport { fireEvent } from '@testing-library/react-native';\nimport DeviceReplaceModal from '../../deviceList/deviceReplaceModal';\n\ndescribe('DeviceReplaceModal', () => {\n  const mockList = [\n    {\n      deviceCode: 'device1',\n      deviceName: 'Device 1',\n    },\n    {\n      deviceCode: 'device2',\n      deviceName: 'Device 2',\n    },\n  ];\n\n  it('renders the component with the correct title and devices', () => {\n    const onPressItem = jest.fn();\n    const onClosePress = jest.fn();\n\n    const { getByText } = renderScreen(\n      <DeviceReplaceModal visible list={mockList} onPressItem={onPressItem} onClosePress={onClosePress} />\n    )();\n\n    expect(getByText('REGISTER_DEVICE_REPLACE_WARNING')).toBeTruthy();\n\n    mockList.forEach((item) => {\n      expect(getByText(item.deviceName)).toBeTruthy();\n    });\n\n    const firstDeviceItem = getByText('Device 1');\n    fireEvent.press(firstDeviceItem);\n\n    expect(onPressItem).toHaveBeenCalledWith(mockList[0]);\n    expect(onClosePress).toHaveBeenCalled();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
{"prompt": "<s>[INST] You are CodeGPT, an AI assistant specializing in generating unit tests for JavaScript and React Native code. Provide clear, concise, and correct unit tests using Jest and React Testing Library. Ensure the tests cover various cases and follow best practices.\nReview and improve the following unit test for React Native component (detailPost - Part 1 - Unit Test):\n```javascript\nimport React from 'react';\nimport { renderScreen } from '__@mocks__/mockApp';\nimport mockNavigation from '__@mocks__/mockNavigation';\nimport DetailPost from '../index';\n\nconst mockActions = {\n  socialCommunity: {\n    detailPost: jest.fn(),\n    getPostComments: jest.fn(),\n    postComment: jest.fn(),\n    deleteComment: jest.fn(),\n  },\n};\n\nconst mockApp = {\n  store: {\n    socialCommunity: {\n      list: [],\n    },\n  },\n  actions: mockActions,\n};\n\nconst commonProps = {\n  navigation: mockNavigation('DetailPost', {\n    id: 1\n  }),\n};\n\nconst renderDetail = () => renderScreen(<DetailPost {...commonProps} />)(mockApp);\n\ndescribe('DetailPost', () => {\n  it('renders correctly', () => {\n    renderDetail();\n  });\n});\n\n```\n[/INST]", "answer": "-CodeGPT"}
