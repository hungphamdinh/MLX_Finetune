{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ItemVisitor from '../ItemVisitor';\n\ndescribe('ItemVisitor', () => {\n  const item = { code: '1234', createdAt: '2022-02-01T10:00:00.000Z', numberOfVisitors: 2, reasonForVisit: { name: 'Delivery' }, fullUnitId: 'Unit 123', registerTime: '2022-02-01T10:30:00.000Z', registerCheckOutTime: '2022-02-01T11:00:00.000Z' };\n  it('renders the item code', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('1234')).toBeDefined();\n  });\n  it('renders the date and time', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('01/02/2022')).toBeDefined();\n    expect(getByText('5:00 PM')).toBeDefined();\n  });\n  it('renders the number of visitors and reason for visit', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('2 VS_VISITORS')).toBeDefined();\n    expect(getByText('Delivery')).toBeDefined();\n  });\n  it('renders the check-in and check-out times', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('VS_IN: 17:30 01/02/2022')).toBeDefined();\n    expect(getByText('VS_OUT: 18:00 01/02/2022')).toBeDefined();\n  });\n  it('renders the unit ID', () => {\n    const { getByText } = render(<ItemVisitor item={item} />);\n    expect(getByText('Unit 123')).toBeDefined();\n  });\n  it('calls the onPress function when pressed', () => {\n    const onPress = jest.fn();\n    const { getByTestId } = render(<ItemVisitor item={item} onPress={onPress} />);\n    fireEvent.press(getByTestId('item-visitor'));\n    expect(onPress).toHaveBeenCalled();\n  });\n});\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example\n```import React from 'react';\nimport { render } from '@testing-library/react-native';\nimport { ItemVisitorDetail } from './index';\n\ndescribe('ItemVisitorDetail', () => {\n  const mockItem = { code: '12345', createdAt: '2022-02-22T10:30:00Z', fullUnitId: 'ABC123', username: 'Test User', numberOfVisitors: 2, visitorInformations: [{ id: '1', name: 'Visitor 1', phone: '123-456-7890', identityCardNumber: '123456' }, { id: '2', name: 'Visitor 2', phone: '123-456-7890', identityCardNumber: '123456' }], reasonForVisit: { id: '1', name: 'Business' }, description: 'Test visit', registerTime: '2022-02-20T10:00:00.000Z', registerCheckOutTime: '2022-02-20T12:00:00.000Z', checkInTimes: [{ id: '1', value: '2022-02-20T11:00:00.000Z' }], checkOutTimes: [{ id: '2', value: '2022-02-20T13:00:00.000Z' }] };\n  it('renders the correct number of visitor information sections', () => {\n    const { queryAllByTestId } = render(<ItemVisitorDetail item={mockItem} />);\n    expect(queryAllByTestId('user-wrapper')).toHaveLength(2);\n  });\n  it('renders the correct unit ID', () => {\n    const { queryByText } = render(<ItemVisitorDetail item={mockItem} />);\n    expect(queryByText('ABC123')).not.toBeNull();\n  });\n  it('renders the correct visitor reason of visit', () => {\n    const { queryByText } = render(<ItemVisitorDetail item={mockItem} />);\n    expect(queryByText('Business')).not.toBeNull();\n  });\n  it('renders the correct description', () => {\n    const { queryByText } = render(<ItemVisitorDetail item={mockItem} />);\n    expect(queryByText('Test visit')).not.toBeNull();\n  });\n  it('renders the actual check-in and check-out times correctly', () => {\n    const { queryByText } = render(<ItemVisitorDetail item={mockItem} />);\n    expect(queryByText('20/02/2022 18:00:00')).not.toBeNull();\n    expect(queryByText('20/02/2022 20:00:00')).not.toBeNull();\n  });\n});``` -CodeGPT\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { render } from '@testing-library/react-native';\nimport EmptyList from '../../../Inspection/AttachImageScreen/EmptyList';\nimport { ImageResource } from '../../../../../Themes';\n\ndescribe('EmptyList Component', () => {\n  it('renders correctly', () => {\n    render(<EmptyList />);\n  });\n\n  it('renders image correctly', () => {\n    const { getByTestId } = render(<EmptyList />);\n    const image = getByTestId('image');\n    expect(image.props.source).toBe(ImageResource.IMG_LIBRARY_EMPTY);\n  });\n\n  it('renders text correctly', () => {\n    const { getByTestId } = render(<EmptyList />);\n    const text = getByTestId('text');\n    expect(text.props.children).toBe('AD_EFORM_NO_IMAGES_AVAILABLE');\n  });\n});\n\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example:\n```import React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport ListHistory from './ListHistory';\nimport { mockUseInspection } from '../../../../jestSetup';\n\ndescribe('ListHistory', () => {\n  it('renders AppList component with correct props', () => {\n    const { getByTestId } = render(<ListHistory workflow={{}} />);\n    const appList = getByTestId('app-list');\n    expect(appList).toBeTruthy();\n    expect(appList.props.data).toEqual([]);\n    expect(appList.props.renderItem).toBeInstanceOf(Function);\n  });\n  it('calls getChangeHistories when component mounts', () => {\n    render(<ListHistory workflow={{}} />);\n    expect(mockUseInspection.getChangeHistories).toHaveBeenCalled();\n  });\n  it('calls getChangeHistories only once when component updates', () => {\n    const { rerender } = render(<ListHistory workflow={{}} />);\n    rerender(<ListHistory workflow={{}} />);\n    expect(mockUseInspection.getChangeHistories).toHaveBeenCalled();\n  });\n  it('calls getChangeHistories with correct parameters when loadData is invoked', () => {\n    const { getByTestId } = render(<ListHistory workflow={{ creationTime: '2023-06-14', form: { id: '123' } }} />);\n    const appList = getByTestId('app-list');\n    fireEvent(appList, 'loadData', { page: 2 });\n    expect(mockUseInspection.getChangeHistories).toHaveBeenCalledWith({ page: 2, fromDate: '2023-06-14', id: '123' });\n  });\n  it('returns correct key from the keyExtractor', () => {\n    const { getByTestId } = render(<ListHistory workflow={{}} />);\n    const appList = getByTestId('app-list');\n    const keyExtractor = appList.props.keyExtractor;\n    const item = { id: 'abc' };\n    const key = keyExtractor(item);\n    expect(key).toBe('abc');\n  });\n});\n-CodeGPT</s>"}
{"text": "<s>[INST] You are a coding assistant, helping with programming problems in clear and concise language. Provide the best possible solution or explanation. End your responses with your signature '-CodeGPT'. \nGenerate a unit test for these code. The code will start from <code-start> and end from <code-end>.  \n[/INST]\nTo generate a unit test for your code you can follow this example\n```import React from 'react';\nimport { fireEvent } from '@testing-library/react-native';\nimport AttachImages from '../../../Inspection/AttachImageScreen';\nimport useFile from '@Context/File/Hooks/UseFile';\nimport { renderScreen } from '../../../../../../__mock__/mockApp';\nimport { usePhotoEditor } from '@Components/InnovatorInspection/PhotoEditor';\n\njest.mock('@Context/File/Hooks/UseFile');\njest.mock('@Components/InnovatorInspection/PhotoEditor', () => ({\n  usePhotoEditor: jest.fn(() => ({\n    showPhotoEditor: jest.fn(),\n  })),\n}));\n\nconst render = () => renderScreen(<AttachImages />)({});\n\ndescribe('AttachImages Component', () => {\n  const images = [\n    {\n      id: 1,\n      uri: 'image1.jpg',\n      position: 1,\n      files: {\n        fileUrl: 'https://example.com/image1.jpg',\n        position: 1,\n      },\n      key: 1,\n    },\n    {\n      id: 2,\n      position: 2,\n      uri: 'image2.jpg',\n      files: {\n        fileUrl: 'https://example.com/image2.jpg',\n        position: 2,\n      },\n      key: 2,\n    },\n  ];\n\n  beforeEach(() => {\n    global.useMockRoute = {\n      params: {\n        images,\n        callBack: jest.fn(),\n      },\n      name: 'attachImages',\n    };\n    useFile.mockReturnValue({\n      uploadFiles: jest.fn(),\n      isLoading: false,\n      downloadImage: jest.fn(),\n    });\n  });\n\n  it('renders correctly', () => {\n    render();\n  });\n\n  it('calls onSelectPhoto when an image is selected', () => {\n    const { getByTestId } = render();\n    fireEvent.press(getByTestId('image-1'));\n    expect(getByTestId('image-1')).toBeTruthy();\n  });\n\n  it('opens the zoom modal when an image is clicked', () => {\n    const { getByTestId } = render();\n    const zoomedImage = getByTestId('image-1');\n    fireEvent.press(zoomedImage);\n    expect(zoomedImage.props.children.props.source.fileUrl).toEqual('https://example.com/image1.jpg');\n  });\n\n  it('handles call showPhotoEditor when click edit', () => {\n    const mockShowPhotoEditor = jest.fn();\n    usePhotoEditor.mockReturnValue({\n      showPhotoEditor: mockShowPhotoEditor,\n    });\n  });\n\n  it('renders images in the correct order based on their position', () => {\n    const { getByTestId } = render();\n\n    const firstImage = getByTestId('image-1');\n    const secondImage = getByTestId('image-2');\n\n    // Assuming the order is based on position\n    const source1 = firstImage.props.children.props.source;\n    const source2 = secondImage.props.children.props.source;\n\n    expect(source1.fileUrl).toEqual('https://example.com/image1.jpg');\n    expect(source1.position).toEqual(1);\n\n    expect(source2.fileUrl).toEqual('https://example.com/image2.jpg');\n    expect(source2.position).toEqual(2);\n  });\n\n  it('updates the position of images correctly when dragged and dropped', () => {\n    const { getByTestId, queryAllByTestId } = render();\n\n    const secondImage = getByTestId('image-2');\n\n    // Mocking drag and drop event\n    fireEvent(secondImage, 'onDragRelease', [\n      { ...images[1], position: 1 },\n      { ...images[0], position: 2 },\n    ]); // Simulate dropping it in the first position\n\n    const reorderedImages = queryAllByTestId(/^image-/);\n\n    expect(reorderedImages[0].props.children.props.source.fileUrl).toEqual('https://example.com/image2.jpg');\n    expect(reorderedImages[1].props.children.props.source.fileUrl).toEqual('https://example.com/image1.jpg');\n  });\n\n  it('renders no images when images array is empty', () => {\n    global.useMockRoute.params.images = [];\n    const { queryByTestId } = render();\n    expect(queryByTestId('image-1')).toBeNull();\n  });\n});\n```\n-CodeGPT</s>"}
